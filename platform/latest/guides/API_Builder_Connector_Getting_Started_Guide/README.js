Ext.data.JsonP['API_Builder_Connector_Getting_Started_Guide']({"guide":" <!doctype html> <html> <head> <title>API Builder Connector Getting Started Guide</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-49153267\" class=\"content\"> <h1>API Builder Connector Getting Started Guide</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Introduction\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Createaconnector\">Create a connector</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Adddependencies\">Add dependencies</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Configurationfile\">Configuration file</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Initializerfile\">Initializer file</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Developtheconnector\">Develop the connector</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Addconnectlogic\">Add connect logic</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Addretrievelogic\">Add retrieve logic</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Addcreatelogic\">Add create logic</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Adddeletelogic\">Add delete logic</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Setupamodel\">Setup a model</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Publishtheconnector\">Publish the connector</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Getting_Started_Guide-section-src-49153267_APIBuilderConnectorGettingStartedGuide-Nextsteps\">Next steps</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>This guide covers the basics to create and build a Connector. A Connector is a component of a project that allows you to access data from an external source. A Connector is set up the same as a Builder project except you have logic for your connector in the <tt>lib</tt> folder and do not have API, Block or Web components. </p> <p>For this example, the connector will integrate with the Twitter REST API. You will need to create a new Twitter app and generate the OAuth access tokens. To create a new Twitter app, go to <a class=\"external-link external-link\" href=\"https://apps.twitter.com/\" target=\"_blank\">https://apps.twitter.com/</a>, then generate the access token from the app&apos;s Keys and Access Tokens tab. </p> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Createaconnector\"> <h2 class=\"heading\"><span>Create a connector</span></h2> <p>To create a new connector, from your workspace directory, execute the <tt class=\"\">appc generate</tt> command. When prompted, select <strong class=\"\">Component</strong> for the type of component, <strong class=\"\">Connector</strong> for the component to generate, and <strong class=\"\">Empty Connector Project</strong> for the connector to generate. Enter <tt>com.connector.twitter</tt> as the name and directory name for your project. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">$ appc generate</code></div> <div class=\"line\"><code class=\"plain\">Appcelerator Command-Line Interface, version </code><code class=\"value\">0.2</code><code class=\"plain\">.</code><code class=\"value\">230</code></div> <div class=\"line\"><code class=\"plain\">Copyright (c) </code><code class=\"value\">2014</code><code class=\"plain\">-</code><code class=\"value\">2015</code><code class=\"plain\">, Appcelerator, Inc. All Rights Reserved.</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">? What type of component would you like to generate? Arrow Component</code></div> <div class=\"line\"><code class=\"plain\">? What Arrow component would you like to generate? Arrow Connector</code></div> <div class=\"line\"><code class=\"plain\">? Which Connector would you like to generate? Empty Connector Project</code></div> <div class=\"line\"><code class=\"plain\">? What is the connector name? com.connector.twitter</code></div> <div class=\"line\"><code class=\"plain\">? Which directory to generate into? com.connector.twitter</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Adddependencies\"> <h2 class=\"heading\"><span>Add dependencies</span></h2> <p>As with all NPM modules, add your dependencies to the <tt class=\"\">dependencies</tt> object in the <tt class=\"\">package.json</tt> file. This example connector will be utilizing the twitter NPM module to make calls to Twitter. Add the <tt class=\"\">twitter</tt> key with a <tt class=\"\">~1.2.5</tt> value to the <tt>dependencies</tt> object. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">package.json</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"package.json\"> <div class=\"line\"><code class=\"plain\">{ ...</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;dependencies&quot;</code><code class=\"plain\"> : {</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;twitter&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;~1.2.5&quot;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> ... </code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Configurationfile\"> <h2 class=\"heading\"><span>Configuration file</span></h2> <p>The boilerplate sample contains the <tt class=\"\">conf/default.js</tt> configuration file. This file is used for testing the connector. You will also need to create a configuration file called <tt class=\"\">example.config.js</tt>. When you install the connector, this file is copied to the project&apos;s <tt class=\"\">conf</tt> directory. You need to add settings to configure your connector in these files, specifically add the settings to the <tt class=\"\">connectors</tt> object. For the Twitter connector, it will need the app keys, OAuth tokens, and an account name of the Twitter feed to access. Create the <tt class=\"\">conf/example.config.js</tt> file, then add the content below to it. You will also need to add the following keys to the connectors object in the <tt>conf/default.js</tt> file and add your Twitter app information to it for testing purposes. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./conf/example.config.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./conf/example.config.js\"> <div class=\"line\"><code class=\"plain\">module.exports = {</code></div> <div class=\"line\"><code class=\"plain\"> connectors: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&apos;com.connector.twitter&apos;</code><code class=\"plain\">: {</code></div> <div class=\"line\"><code class=\"plain\"> account: </code><code class=\"string\">&apos;TWITTER_ACCOUNT&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> consumer_key: </code><code class=\"string\">&apos;TWITTER_API_KEY&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> consumer_secret: </code><code class=\"string\">&apos;TWITTER_API_SECRET&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> access_token_key: </code><code class=\"string\">&apos;TWITTER_ACCESS_TOKEN&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> access_token_secret: </code><code class=\"string\">&apos;TWITTER_ACCESS_TOKEN_SECRET&apos;</code><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Initializerfile\"> <h2 class=\"heading\"><span>Initializer file</span></h2> <p>The <tt class=\"\">app.js</tt> file contains code that initializes the connector when it is used as a server for testing. You can hook into the lifecycle events of the server. The boilerplate file contains logic that is used to create a model. Update the code to let the application create a connector and access the tweet&apos;s text response parameter as the <tt>status</tt> parameter. Later on, you will add logic to automatically create a model when a connector is installed on an application. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> server = </code><code class=\"keyword\">new</code><code class=\"plain\"> Arrow();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">server.addModel(Arrow.Model.extend(</code><code class=\"string\">&apos;tweet&apos;</code><code class=\"plain\">, {</code></div> <div class=\"line\"><code class=\"plain\"> fields: {</code></div> <div class=\"line\"><code class=\"plain\"> status: { type: String, name: </code><code class=\"string\">&apos;text&apos;</code><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> connector: </code><code class=\"string\">&apos;com.connector.twitter&apos;</code></div> <div class=\"line\"><code class=\"plain\">}));</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">server.start();</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Developtheconnector\"> <h2 class=\"heading\"><span>Develop the connector</span></h2> <p>API Builder will guide you through the rest of the process. To start developing your connector, run the project in one console window, then edit the files with the connector logic in another console or editor. As you save your files, API Builder will automatically update your connector and restart the server instance, allowing you to work on and test the connector incrementally. </p> <p>Let&apos;s get started. First, run the project and look at the log output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">appc run</code></div> <div class=\"line\"><code class=\"plain\">...</code></div> <div class=\"line\"><code class=\"plain\">This connector does not </code><code class=\"keyword\">do</code><code class=\"plain\"> much of anything at the moment.</code></div> <div class=\"line\"><code class=\"plain\">Why don&apos;t you take a look at the </code><code class=\"string\">&quot;capabilities&quot;</code><code class=\"plain\"> array in:</code></div> <div class=\"line\"><code class=\"plain\">/Users/jdoe/workspace/com.connector.twitternew/lib/index.js</code></div> </div> </div> <p>Follow the log instructions and open the ./lib/index.js file. You will see an exposed create function that uses the <tt class=\"\">Connector.extend()</tt> method to create a new connector. In the object passed to the <tt class=\"\">extend()</tt> method, you will see a capabilities field with an array of <tt>Capability</tt> constants. The constants are used to indicate to API Builder, which operations the connector can perform. We will add capabilities incrementally. </p> <p>Let&apos;s start with connecting to a datasource. </p> <ol class=\"\"><li class=\"\"> <p>Add the <tt class=\"\">defaultConfig</tt> field to the parameter object passed to the <tt class=\"\">extend()</tt> method. The <tt class=\"\">defaultConfig</tt> field tells API Builder to copy the example configuration file to the project&apos;s <tt>conf</tt> directory when the user adds the connector to the project. </p> </li><li class=\"\"> <p>Uncomment the line containing <tt>Capabilities.ConnectsToADataSource.</tt> </p> </li><li class=\"\"> <p>Add the <tt>postCreate()</tt> function to attach a helper function to the connector instance that can be used by other connector methods. </p> </li></ol> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/index.js\"> <div class=\"line\"><code class=\"plain\">...</code></div> <div class=\"line\"><code class=\"plain\">exports.create = function (Arrow) {</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> Connector.extend({</code></div> <div class=\"line\"><code class=\"plain\"> defaultConfig: require(</code><code class=\"string\">&apos;fs&apos;</code><code class=\"plain\">).readFileSync(__dirname + </code><code class=\"string\">&apos;/../conf/example.config.js&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;utf8&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> capabilities: [</code></div> <div class=\"line\"><code class=\"plain\"> Capabilities.ConnectsToADataSource,</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// TODO: Each of these capabilities is optional; add the ones you want, and delete the rest.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// (Hint: I&apos;ve found it to be easiest to add these one at a time, running `appc run` for guidance.)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.ValidatesConfiguration,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.ContainsModels,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.GeneratesModels,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.CanCreate,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.CanRetrieve,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.CanUpdate,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.CanDelete,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Capabilities.AuthenticatesThroughConnector</code></div> <div class=\"line\"><code class=\"plain\"> ],</code></div> <div class=\"line\"><code class=\"plain\"> postCreate: function() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.createInstance = function (Model, data) {</code></div> <div class=\"line\"><code class=\"plain\"> var model = Model.instance(data, </code><code class=\"keyword\">true</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> model.setPrimaryKey(data.id_str);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> model;</code></div> <div class=\"line\"><code class=\"plain\"> };</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <p>Save the file. You will see the following log output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The </code><code class=\"string\">&quot;ConnectsToADataSource&quot;</code><code class=\"plain\"> capability has been enabled, so we need to make a couple of changes:</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/lifecycle/connect.js` (contains </code><code class=\"value\">2</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/lifecycle/disconnect.js` (contains </code><code class=\"value\">2</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Please go take a look at the TODOs in these </code><code class=\"keyword\">new</code><code class=\"plain\"> files, then </code><code class=\"keyword\">do</code><code class=\"plain\"> an `appc run` or `npm test` to </code><code class=\"keyword\">try</code><code class=\"plain\"> out the </code><code class=\"keyword\">new</code><code class=\"plain\"> capabilities.</code></div> </div> </div> <p>API Builder generates some new files in the <tt>lib</tt> folder. You will need to implement some logic to connect to and disconnect from the datasource. </p> <div class=\"section section-3\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Addconnectlogic\"> <h3 class=\"heading\"><span>Add connect logic</span></h3> <p>Open <tt class=\"\">./lib/lifecycle/connect.js</tt> and replace the contents of the file with the following. The <tt class=\"\">connect.js</tt> file contains logic to implement the connector&apos;s <tt>connect()</tt> method, which authorizes the connector to talk to the Twitter APIs. </p> <p>Next, let&apos;s implement some logic to retrieve the tweets. </p> </div> <div class=\"section section-3\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Addretrievelogic\"> <h3 class=\"heading\"><span>Add retrieve logic</span></h3> <p>To allow the connector to retrieve model data, implement the <tt>CanRetrieve</tt> capability. </p> <ol class=\"\"><li class=\"\"> <p>Open the <tt class=\"\">./lib/index.js</tt> file, uncomment the line containing <tt>Capabilities.CanRetrieve</tt>, and save the file. The log output tells us to update four new files that API Builder just generated. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The </code><code class=\"string\">&quot;CanRetrieve&quot;</code><code class=\"plain\"> capability has been enabled, so we need to make a couple of changes:</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/distinct.js` (contains </code><code class=\"value\">3</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/findAll.js` (contains </code><code class=\"value\">3</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/findById.js` (contains </code><code class=\"value\">4</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/query.js` (contains </code><code class=\"value\">5</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\">(Hint: If you only want to support some of these methods, feel free to delete the others.)</code></div> <div class=\"line\"><code class=\"plain\">Please go take a look at the TODOs in these </code><code class=\"keyword\">new</code><code class=\"plain\"> files, then </code><code class=\"keyword\">do</code><code class=\"plain\"> an `appc run` or `npm test` to </code><code class=\"keyword\">try</code><code class=\"plain\"> out the </code><code class=\"keyword\">new</code><code class=\"plain\"> capabilities.</code></div> </div> </div> </li><li class=\"\"> <p>Remove the <tt class=\"\">distinct.js</tt> and <tt>query.js</tt> files. We will not be implementing these for the example. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/lifecycle/connect.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/lifecycle/connect.js\"> <div class=\"line\"><code class=\"plain\">var Twitter = require(</code><code class=\"string\">&apos;twitter&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.connect = function (next) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Initialize the client</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Use this.config to get values from the configuration file</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.client = </code><code class=\"keyword\">new</code><code class=\"plain\"> Twitter({</code></div> <div class=\"line\"><code class=\"plain\"> consumer_key: </code><code class=\"keyword\">this</code><code class=\"plain\">.config.consumer_key,</code></div> <div class=\"line\"><code class=\"plain\"> consumer_secret: </code><code class=\"keyword\">this</code><code class=\"plain\">.config.consumer_secret,</code></div> <div class=\"line\"><code class=\"plain\"> access_token_key: </code><code class=\"keyword\">this</code><code class=\"plain\">.config.access_token_key,</code></div> <div class=\"line\"><code class=\"plain\"> access_token_secret: </code><code class=\"keyword\">this</code><code class=\"plain\">.config.access_token_secret</code></div> <div class=\"line\"><code class=\"plain\"> }); </code></div> <div class=\"line\"><code class=\"plain\"> next();</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> </li><li class=\"\"> <p>Open <tt class=\"\">./lib/methods/findAll.js</tt> and replace the contents of the file with the following. The <tt class=\"\">findAll.js</tt> file implements the connector&apos;s <tt>findAll()</tt> method, which retrieves all tweets from the user&apos;s Twitter account, or at least, as many tweets as Twitter will allow us to fetch. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/methods/findAll.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/methods/findAll.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> Collection = Arrow.Collection,</code></div> <div class=\"line\"><code class=\"plain\"> ORMError = Arrow.ORMError;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.findAll = function findAll(Model, callback) {</code></div> <div class=\"line\"><code class=\"plain\"> var params = {screen_name: </code><code class=\"keyword\">this</code><code class=\"plain\">.config.account};</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this Twitter API only returns the last twenty tweets</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.client.get(</code><code class=\"string\">&apos;statuses/user_timeline&apos;</code><code class=\"plain\">, params, function(error, tweets, response) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!error) {</code></div> <div class=\"line\"><code class=\"plain\"> var results = [];</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (var i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt; tweets.length; i++) {</code></div> <div class=\"line\"><code class=\"plain\"> results.push(Model.connector.createInstance(Model, tweets[i]));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, </code><code class=\"keyword\">new</code><code class=\"plain\"> Collection(Model, results));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.logger.error(error);</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">new</code><code class=\"plain\"> ORMError(</code><code class=\"string\">&apos;ERROR: Could not fetch tweets!&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> </li><li class=\"\"> <p>Open <tt class=\"\">./lib/methods/findById.js</tt> and replace the contents of the file with the following. The <tt class=\"\">findById.js</tt> file implements the connector&apos;s <tt>findById()</tt> method, which retrieves one specific tweet, identified by its ID, from the datasource. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/methods/findById.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/methods/findById.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> ORMError = Arrow.ORMError;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.findById = function (Model, id, callback) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.client.get(</code><code class=\"string\">&apos;statuses/show/&apos;</code><code class=\"plain\"> + id, {}, function(error, tweet, response) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!error) {</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, Model.connector.createInstance(Model, tweet));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.logger.error(error);</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">new</code><code class=\"plain\"> ORMError(</code><code class=\"string\">&apos;ERROR: Could not fetch tweet!&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> </li></ol> <p>Let&apos;s see if the connector&apos;s retrieve logic works. </p> <p>In a web browser: </p> <ol class=\"\"><li class=\"\"> <p>Navigate to the Admin Console. You can access it using the following URL: <tt>http://localhost:8080/api-create-ui</tt> </p> </li><li class=\"\"> <p>In the top navigation bar, click the <strong>Data</strong> tab. </p> </li><li class=\"\"> <p>In the left navigation bar, click <strong>tweet</strong>. </p> </li></ol> <p>The Admin console will retrieve and display the user&apos;s tweets. </p> <p>Next, let&apos;s add some logic to create a tweet. </p> </div> <div class=\"section section-3\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Addcreatelogic\"> <h3 class=\"heading\"><span>Add create logic</span></h3> <p>To allow the connector to create data, implement the <tt>CanCreate</tt> capability. </p> <ol class=\"\"><li class=\"\"> <p>Open the <tt class=\"\">./lib/index.js</tt> file, uncomment the line containing <tt>Capabilities.CanCreate</tt> and save the file. You will see the following console output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The </code><code class=\"string\">&quot;CanCreate&quot;</code><code class=\"plain\"> capability has been enabled, so we need to make a couple of changes:</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/create.js` (contains </code><code class=\"value\">3</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\">Please go take a look at the TODOs in these </code><code class=\"keyword\">new</code><code class=\"plain\"> files, then </code><code class=\"keyword\">do</code><code class=\"plain\"> an `appc run` or `npm test` to </code><code class=\"keyword\">try</code><code class=\"plain\"> out the </code><code class=\"keyword\">new</code><code class=\"plain\"> capabilities.</code></div> </div> </div> </li><li class=\"\"> <p>Open <tt class=\"\">./lib/methods/create.js</tt> and replace the contents of the file with the following. The <tt class=\"\">create.js</tt> file implements the connector&apos;s <tt>create()</tt> method, which allows the connector to post a tweet on the user&apos;s Twitter feed. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/methods/create.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/methods/create.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> ORMError = Arrow.ORMError;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.create = function (Model, values, callback) {</code></div> <div class=\"line\"><code class=\"plain\"> var params = {</code><code class=\"string\">&apos;status&apos;</code><code class=\"plain\">: values.text};</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.client.post(</code><code class=\"string\">&apos;statuses/update&apos;</code><code class=\"plain\">, params, function(error, tweet, response) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!error) {</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, Model.connector.createInstance(Model, tweet));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">new</code><code class=\"plain\"> ORMError(</code><code class=\"string\">&apos;ERROR: Unable to create tweet!&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> </li></ol> <p>Let&apos;s test the create logic. </p> <p>In the Admin console, you should still see the list of tweets. If not, click <strong class=\"\">Data</strong> in the top navigation bar, then click <strong>tweet</strong> in the left navigation bar. </p> <ol class=\"\"><li class=\"\"> <p>Click the <strong>Add (+)</strong> button in the top-right corner of the console. A dialog will appear. </p> </li><li class=\"\"> <p>Enter a status message, then click <strong>OK</strong>. </p> </li></ol> <p>The new status message will be displayed in the list of tweets. </p> <p>Next, let&apos;s add some logic to remove the tweets. </p> </div> <div class=\"section section-3\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Adddeletelogic\"> <h3 class=\"heading\"><span>Add delete logic</span></h3> <p>To allow the connector to remove data, implement the <tt>CanDelete</tt> capability. </p> <ol class=\"\"><li class=\"\"> <p>Open the <tt class=\"\">./lib/index.js</tt> file, uncomment the line containing <tt>Capabilities.CanDelete</tt> and save the file. You will see the following console output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The </code><code class=\"string\">&quot;CanDelete&quot;</code><code class=\"plain\"> capability has been enabled, so we need to make a couple of changes:</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/delete.js` (contains </code><code class=\"value\">4</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\"> - Created `lib/methods/deleteAll.js` (contains </code><code class=\"value\">3</code><code class=\"plain\"> TODOs)</code></div> <div class=\"line\"><code class=\"plain\">(Hint: If you only want to support some of these methods, feel free to delete the others.)</code></div> <div class=\"line\"><code class=\"plain\">Please go take a look at the TODOs in these </code><code class=\"keyword\">new</code><code class=\"plain\"> files, then </code><code class=\"keyword\">do</code><code class=\"plain\"> an `appc run` or `npm test` to </code><code class=\"keyword\">try</code><code class=\"plain\"> out the </code><code class=\"keyword\">new</code><code class=\"plain\"> capabilities.</code></div> </div> </div> </li><li class=\"\"> <p>Remove the <tt>lib/methods/deleteAll.js</tt>. </p> </li><li class=\"\"> <p>Open <tt class=\"\">./lib/methods/delete.js</tt> and replace the contents of the file with the following. The <tt class=\"\">delete.js</tt> file implements the connector&apos;s <tt>delete()</tt> method, which allows the connector to delete a specific tweet, specified by its ID, from the user&apos;s Twitter feed. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./lib/methods/delete.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./lib/methods/delete.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> ORMError = Arrow.ORMError;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports[</code><code class=\"string\">&apos;delete&apos;</code><code class=\"plain\">] = function (Model, instance, callback) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.client.post(</code><code class=\"string\">&apos;statuses/destroy/&apos;</code><code class=\"plain\"> + instance.id + </code><code class=\"string\">&apos;.json&apos;</code><code class=\"plain\">, {}, function(error, tweet, response) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!error) {</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, Model.connector.createInstance(Model, tweet));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> callback(</code><code class=\"keyword\">new</code><code class=\"plain\"> ORMError(</code><code class=\"string\">&apos;ERROR: Could not delete tweet!&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> </li></ol> <p>Let&apos;s test the delete logic. </p> <p>In the Admin console, you should still see the list of tweets. If not, click <strong class=\"\">Data</strong> in the top navigation bar, then click <strong>tweet</strong> in the left navigation bar. </p> <ol class=\"\"><li> <p>Click the tweet you previously added to the list. A dialog appears. </p> </li><li class=\"\"> <p>Click <strong>Delete</strong>. </p> </li></ol> <p>The new status message will be removed from the list of tweets. </p> </div> <div class=\"section section-3\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Setupamodel\"> <h3 class=\"heading\"><span>Setup a model</span></h3> <p>To have a model included with your connector, implement the <tt>ContainModel</tt> capability. </p> <ol class=\"\"><li class=\"\"> <p>Remove the <tt class=\"\">server.addModel</tt> method from the <tt>app.js</tt> file. </p> </li><li class=\"\"> <p>Open the <tt class=\"\">./lib/index.js</tt> file, uncomment the line containing <tt>Capabilities.ContainModel</tt> and save the file. You will see the following console output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The </code><code class=\"string\">&quot;ContainsModels&quot;</code><code class=\"plain\"> capability has been enabled, so we need to make a couple of changes:</code></div> <div class=\"line\"><code class=\"plain\"> - Created `models/yourModel.js` (contains </code><code class=\"value\">2</code><code class=\"plain\"> TODOs)</code></div> </div> </div> </li><li class=\"\"> <p>Rename the <tt class=\"\">yourModel.js</tt> file to <tt>tweet.js</tt>. </p> </li><li class=\"\"> <p>Open <tt>./models/tweet.js</tt> and replace the contents of the file with the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">./models/tweet.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"./models/tweet.js\"> <div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\">var Tweet = Arrow.Model.extend(</code><code class=\"string\">&apos;tweet&apos;</code><code class=\"plain\">, {</code></div> <div class=\"line\"><code class=\"plain\"> fields: {</code></div> <div class=\"line\"><code class=\"plain\"> status: { type: String, name: </code><code class=\"string\">&apos;text&apos;</code><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> connector: </code><code class=\"string\">&apos;com.connector.twitter&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\">module.exports = Tweet;</code></div> </div> </div> </li></ol> <p>Reload the Admin console and retest adding and removing a model. </p> </div> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Publishtheconnector\"> <h2 class=\"heading\"><span>Publish the connector</span></h2> <p>To publish the connector, execute the following command from the project directory: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">appc publish</code></div> </div> </div> <p>By default, the access level for the connector is set to private, so only the creator can access the connector. To share the connector with other people or publicly, specify a different access level with the <tt class=\"\">appc access</tt> command and add people or organizations to your component using the <tt class=\"\">appc user</tt> and <tt>appc org</tt> commands. </p> </div> <div class=\"section section-2\" id=\"src-49153267_APIBuilderConnectorGettingStartedGuide-Nextsteps\"> <h2 class=\"heading\"><span>Next steps</span></h2> <p>For information about installing your connector, see <a class=\"document-link\" href=\"#!/guide/Add_a_Connector\">Add a Connector</a>. </p> <p>For information about creating a connector, see <a class=\"document-link\" href=\"#!/guide/API_Builder_Connector_Project\">API Builder Connector Project</a>. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49153267\"><span>Edit</span></a> </div> </body> </html> ","title":"API Builder Connector Getting Started Guide"});