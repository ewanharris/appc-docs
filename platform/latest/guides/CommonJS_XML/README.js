Ext.data.JsonP['CommonJS_XML']({"guide":" <!doctype html> <html> <head> <title>CommonJS XML</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-41845648\" class=\"content\"> <h1>CommonJS XML</h1> <p>Demonstrates using CommonJS modules to create UI components in an Alloy XML view. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro has-no-icon\"> <div class=\"title\">App folder location</div> <p><i>alloy</i>/test/apps/advanced/commonjs_xml </p> </div> <p> <img src=\"images/download/attachments/41845648/common_js.png\" alt=\"images/download/attachments/41845648/common_js.png\" class=\"confluence-embedded-image\"> </img></p> <p>The sample app&apos;s <tt class=\"\">specialView.js</tt> file defines a CommonJS module that exports two functions: <tt class=\"\">createView</tt> and <tt>createMassiveCreateView</tt>. Each of these functions return a View object. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/lib/specialView.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/lib/specialView.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> _ = require(</code><code class=\"string\">&apos;alloy/underscore&apos;</code><code class=\"plain\">)._;</code></div> <div class=\"line\"><code class=\"plain\">exports.createView = </code><code class=\"keyword\">function</code><code class=\"plain\">(args) {</code></div> <div class=\"line\"><code class=\"plain\">\targs = args || {};</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">var</code><code class=\"plain\"> specialStyle = _.extend({</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&apos;#111&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> height: </code><code class=\"string\">&apos;50dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> width: </code><code class=\"string\">&apos;50dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> top: </code><code class=\"string\">&apos;10dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> left: </code><code class=\"string\">&apos;10dp&apos;</code></div> <div class=\"line\"><code class=\"plain\">\t}, args);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> Ti.UI.createView(specialStyle);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"plain\">exports.createMassiveGreenView = </code><code class=\"keyword\">function</code><code class=\"plain\">(args) {</code></div> <div class=\"line\"><code class=\"plain\">\targs = args || {};</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">var</code><code class=\"plain\"> specialStyle = _.extend({</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&apos;#0f0&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> height: </code><code class=\"string\">&apos;200dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> width: </code><code class=\"string\">&apos;200dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> top: </code><code class=\"string\">&apos;10dp&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> left: </code><code class=\"string\">&apos;10dp&apos;</code></div> <div class=\"line\"><code class=\"plain\">\t}, args);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> Ti.UI.createView(specialStyle);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <p>The application&apos;s main <tt>index.xml</tt> view shows the two ways to declaratively create instances of these views in an XML file. </p> <ul class=\"\"><li class=\"\"> <p>Add a <tt class=\"\">&lt;Module/&gt;</tt> element whose <tt class=\"\">module</tt> attribute specifies the base name of the CommonJS module file, relative to the project&apos;s <tt>libs/</tt> folder. </p> </li><li class=\"\"> <p>Lastly, you can declare the desired view by adding a an XML element whose name matches the base name of the view constructor function, minus the &quot;create&quot; prefix. In this example, the <tt class=\"\">&lt;MassiveGreenView/&gt;</tt> element automatically calls the <tt>createMassiveGreenView()</tt> function. </p> </li></ul> <p>By default, the module&apos;s <strong class=\"\">createView()</strong> method is invoked on the module to get the desired view. You can also specify a custom function to invoke with the the <tt>method</tt> attribute of the &lt;Module/&gt; element. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;</code><code class=\"keyword\">Window</code><code class=\"plain\"> </code><code class=\"color1\">backgroundColor</code><code class=\"plain\">=</code><code class=\"string\">&quot;#fff&quot;</code><code class=\"plain\"> </code><code class=\"color1\">layout</code><code class=\"plain\">=</code><code class=\"string\">&quot;horizontal&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!--</code></div> <div class=\"line\"><code class=\"plain\"> The &apos;specialView&apos; module&apos;s exported &quot;createView&quot;&#xA0;</code></div> <div class=\"line\"><code class=\"plain\"> function is automatically invoked.</code></div> <div class=\"line\"><code class=\"plain\"> --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!-- We can use ids and classes to apply styles from TSS --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;redOne&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;blue&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;bigger blue&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!-- and it also supports inline properties as well --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">left</code><code class=\"plain\">=</code><code class=\"string\">&quot;50dp&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!--</code></div> <div class=\"line\"><code class=\"plain\"> We can specify an explicit &quot;method&quot; to be used to create the UI</code></div> <div class=\"line\"><code class=\"plain\"> component, in this case &apos;createMassiveGreenView&apos;.&#xA0;</code></div> <div class=\"line\"><code class=\"plain\"> Also, since these all return a valid Titanium proxy object, you can</code></div> <div class=\"line\"><code class=\"plain\"> further nest Titanium proxy objects inside of them, as shown below.</code></div> <div class=\"line\"><code class=\"plain\"> --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">method</code><code class=\"plain\">=</code><code class=\"string\">&quot;createMassiveGreenView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">onClick</code><code class=\"plain\">=</code><code class=\"string\">&quot;doClick&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;click me&lt;/</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">Module</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!--</code></div> <div class=\"line\"><code class=\"plain\"> Finally, we can declare the module as an XML element, without having to specify the</code></div> <div class=\"line\"><code class=\"plain\"> &apos;method&apos; parameter.</code></div> <div class=\"line\"><code class=\"plain\"> --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">MassiveGreenView</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">onClick</code><code class=\"plain\">=</code><code class=\"string\">&quot;doClick&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;or click me!&lt;/</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">MassiveGreenView</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">View</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;specialView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">onClick</code><code class=\"plain\">=</code><code class=\"string\">&quot;doClick&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <div class=\"section section-2\" id=\"src-41845648_CommonJSXML-Seealso\"> <h2 class=\"heading\"><span>See also</span></h2> <ul class=\"\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Alloy_Controllers-section-src-34636384_AlloyControllers-LibrarycodeandCommonJSmodules\">Library Code and CommonJS Modules</a> </p> </li></ul> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=41845648\"><span>Edit</span></a> </div> </body> </html> ","title":"CommonJS XML"});