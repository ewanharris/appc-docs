Ext.data.JsonP['Debugging_iOS_Apps_with_3rd-party_Tools']({"guide":" <!doctype html> <html> <head> <title>Debugging iOS Apps with 3rd-party Tools</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-49160781\" class=\"content\"> <h1>Debugging iOS Apps with 3rd-party Tools</h1> <p>You can debug your Titanium App using the Safari DevTools. No matter the route you take, you must ensure that your project is using the built-in JavaScriptCore framework. For projects running Titanium SDK 7.0.0 and later, this option is enabled by default. For older projects, it can be enabled as seen below. </p> <p>Searching for Android Debugging? <a class=\"document-link\" href=\"#!/guide/Debugging_Android_Apps_with_3rd-party_Tools\">Here</a> you go! </p> <div class=\"section section-2\" id=\"src-49160781_DebuggingiOSAppswith3rd-partyTools-Enableuse-jscore-framework\"> <h2 class=\"heading\"><span>Enable use-jscore-framework</span></h2> <p>With Titanium SDK 6.x, developers must add a tag to enable the iOS debugger in order to use Safari (or iOS-webkit-debug-proxy). With SDK 7.x and later, this value is assumed to be true unless you explicitly add the tag with <tt>false</tt> as the value. </p> <p>The key is to enable the <tt class=\"\">use-jscore-framework</tt> option in <tt>tiapp.xml</tt>: </p> <p> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">tiapp</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ios</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">use</code><code class=\"plain\">-jscore-framework&gt;true&lt;/</code><code class=\"keyword\">use</code><code class=\"plain\">-jscore-framework&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">ios</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">tiapp</code><code class=\"plain\">&gt;</code></div> </div> </div> <p>Once enabled, this will force the SDK to use the pre-packaged JSCore framework/engine as the JavaScript engine internally (rather than our older TiCore framework). </p> <p>Since iOS 7, the pre-packaged JScore framework has contained a debugging agent and protocol using webinspectord. We make use of this service/protocol with our newest iOS debugger in SDK 6.0.0 as does Safari in it&apos;s tooling. </p> </div> <div class=\"section section-2\" id=\"src-49160781_DebuggingiOSAppswith3rd-partyTools-DebuggingwithSafariDevTools\"> <h2 class=\"heading\"><span>Debugging with Safari DevTools</span></h2> <p>Be sure to turn on use-jscore-framework as listed in <a class=\"document-link\" href=\"#!/guide/Debugging_iOS_Apps_with_3rd-party_Tools-section-src-49160781_DebuggingiOSAppswith3rd-partyTools-Enableuse-jscore-framework\">Enable use-jscore-framework</a>. </p> <ol class=\"\"><li> <p>Launch the app on the device or a simulator. Note: if using a device, make its connected by an USB cable before debugging. </p> <ol class=\"\"><li class=\"\"> <p>Launch you application via Studio or command-line: <tt>appc run -p ios</tt> </p> </li></ol></li><li class=\"\"> <p>Launch Safari and enable the <strong class=\"\">Develop</strong> mode (<strong class=\"\">Safari</strong> &gt; <strong class=\"\">Preferences</strong> &gt; <strong class=\"\">Advanced</strong> and enable <strong>Show Develop menu in menu bar</strong>). Note: it is important to have the Web Inspector enabled to allow connections for debugging. Otherwise, neither Studio nor Safari&apos;s debugger will be able to connect to the device using the web-inspector based protocol. </p> <img src=\"images/download/attachments/49160781/enabled_develop_safari.png\" alt=\"images/download/attachments/49160781/enabled_develop_safari.png\" class=\"confluence-embedded-image\" width=\"500\"> </img></li><li> <p>Once the app is up and running, connecting to the debugger depends on whether you are using a simulator or device. </p> <ol class=\"\"><li class=\"\"> <p>Simulator: <strong class=\"\">Safari</strong> &gt; <strong class=\"\">Developer</strong> &gt; <strong class=\"\">Simulator</strong> &gt; <strong>JSContext</strong> </p> </li><li class=\"\"> <p>Device: <strong class=\"\">Safari</strong> &gt; <strong class=\"\">Developer</strong> &gt; <strong class=\"\">&lt;device name&gt;</strong> &gt; <strong>JSContext</strong> </p> </li></ol></li></ol> <div class=\"section section-3\" id=\"src-49160781_DebuggingiOSAppswith3rd-partyTools-SafariBreakpoints\"> <h3 class=\"heading\"><span>Safari Breakpoints</span></h3> <p>Sometimes you cannot connect the debugger to the app until it&apos;s already executed the code its likely to break at. Try this workaround: </p> <ol class=\"\"><li> <p>Launch the simulator. </p> </li><li class=\"\"> <p>Open <strong class=\"\">Safari</strong> &gt; <strong class=\"\">Develop</strong> &gt; <strong>Simulator</strong>. </p> </li><li class=\"\"> <p>Ensure <strong class=\"\">Automatically Show Web Inspector for JSContexts</strong> and <strong>Automatically Pause Connecting to JSContexts</strong> are both enabled. </p> </li><li class=\"\"> <p>Launch the app/build via <strong class=\"\">Studio</strong> or the <strong>CLI</strong>. You should be able to connect and control the debugger before the app fully launches. </p> </li></ol> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49160781\"><span>Edit</span></a> </div> </body> </html> ","title":"Debugging iOS Apps with 3rd-party Tools"});