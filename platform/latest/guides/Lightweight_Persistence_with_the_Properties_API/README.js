Ext.data.JsonP['Lightweight_Persistence_with_the_Properties_API']({"guide":" <!doctype html> <html> <head> <title>Lightweight Persistence with the Properties API</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004900\" class=\"content\"> <h1>Lightweight Persistence with the Properties API</h1> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Lightweight_Persistence_with_the_Properties_API-section-src-29004900_LightweightPersistencewiththePropertiesAPI-ReadingandWritingProperties\">Reading and Writing Properties</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Lightweight_Persistence_with_the_Properties_API-section-src-29004900_LightweightPersistencewiththePropertiesAPI-StoringJSobjectsasJSONinproperties\">Storing JS objects as JSON in properties</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Lightweight_Persistence_with_the_Properties_API-section-src-29004900_LightweightPersistencewiththePropertiesAPI-Hands-onPractice\">Hands-on Practice</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Lightweight_Persistence_with_the_Properties_API-section-src-29004900_LightweightPersistencewiththePropertiesAPI-ReferencesandFurtherReading\">References and Further Reading</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Objective\"> <h2 class=\"heading\"><span>Objective</span></h2> <p>In this chapter, we&apos;ll dig deep into the <tt>Ti.App.Properties</tt> API. You&apos;ll learn how to store both simple and complex data in app properties and retrieve that data later. </p> </div> <div class=\"section section-2\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Contents\"> <h2 class=\"heading\"><span>Contents</span></h2> <p>Both iOS and Android store app properties in special files on the filesystem. Natively, iOS properties are known as <tt class=\"\">NSUserDefaults</tt>, which are stored in <tt class=\"\">.plist</tt> files in the application&apos;s library directory. Android stores them in standard xml text files at <tt class=\"\">/data/data/com.domainname.appname/shared_prefs/titanium.xml</tt>. Titanium provides a uniform means to set and get app properties via the <tt>Titanium.App.Properties</tt> API. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>There isn&apos;t a specific limit on the amount of data you can store in properties. However, an application&apos;s property data is loaded into memory as the application launches, and exists there until it closes. This allows very rapid access to it, but at the cost of the increased baseline memory used by the application. </p> </div> <div class=\"section section-3\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-ReadingandWritingProperties\"> <h3 class=\"heading\"><span>Reading and Writing Properties</span></h3> <p><tt>Titanium.App.Properties</tt> has six sets of get/set methods for handling six different data types: </p> <ul class=\"\"><li class=\"\"> <p><strong>getBool() / setBool()</strong>: for booleans (true, false) </p> </li><li class=\"\"> <p><strong>getDouble() / setDouble()</strong>: for double-precision floating point numbers </p> </li><li class=\"\"> <p><strong>getInt() / setInt()</strong>: for integers </p> </li><li class=\"\"> <p><strong>getList() / setList()</strong>: for arrays </p> </li><li class=\"\"> <p><strong>getString() / setString()</strong>: for strings </p> </li></ul> <p>The <i class=\"\">get</i> methods accept a property name and its default value. Thus, if a property has never been set before, the default value will be returned. Each <i>set</i> method requires a property name and property value pair. All of these methods are demonstrated below: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var window = Titanium.UI.createWindow({</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&apos;white&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">var myArray = [</code></div> <div class=\"line\"><code class=\"plain\"> { name: </code><code class=\"string\">&apos;Name 1&apos;</code><code class=\"plain\">, address: </code><code class=\"string\">&apos;1 Main St&apos;</code><code class=\"plain\"> }, </code></div> <div class=\"line\"><code class=\"plain\"> { name: </code><code class=\"string\">&apos;Name 2&apos;</code><code class=\"plain\">, address: </code><code class=\"string\">&apos;2 Main St&apos;</code><code class=\"plain\">}, </code></div> <div class=\"line\"><code class=\"plain\"> { name: </code><code class=\"string\">&apos;Name 3&apos;</code><code class=\"plain\">, address: </code><code class=\"string\">&apos;3 Main St&apos;</code><code class=\"plain\">}, </code></div> <div class=\"line\"><code class=\"plain\"> { name: </code><code class=\"string\">&apos;Name 4&apos;</code><code class=\"plain\">, address: </code><code class=\"string\">&apos;4 Main St&apos;</code><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">];</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setString(</code><code class=\"string\">&apos;myString&apos;</code><code class=\"plain\">,</code><code class=\"string\">&apos;This is a string&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setInt(</code><code class=\"string\">&apos;myInt&apos;</code><code class=\"plain\">,</code><code class=\"value\">10</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setBool(</code><code class=\"string\">&apos;myBool&apos;</code><code class=\"plain\">,</code><code class=\"keyword\">true</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setDouble(</code><code class=\"string\">&apos;myDouble&apos;</code><code class=\"plain\">,</code><code class=\"value\">10.6</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setList(</code><code class=\"string\">&apos;myList&apos;</code><code class=\"plain\">,myArray);</code></div> <div class=\"line\"><code class=\"comments\">// **********************************************</code></div> <div class=\"line\"><code class=\"comments\">// Notice the use of the second argument of the get* methods below</code></div> <div class=\"line\"><code class=\"comments\">// that would be returned if no property exists with that name</code></div> <div class=\"line\"><code class=\"comments\">// **********************************************</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;String: &apos;</code><code class=\"plain\"> + Ti.App.Properties.getString(</code><code class=\"string\">&apos;myString&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;This is a string default&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;Integer: &apos;</code><code class=\"plain\"> + Ti.App.Properties.getInt(</code><code class=\"string\">&apos;myInt&apos;</code><code class=\"plain\">, </code><code class=\"value\">20</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;Boolean: &apos;</code><code class=\"plain\"> + Ti.App.Properties.getBool(</code><code class=\"string\">&apos;myBool&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">false</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;Double: &apos;</code><code class=\"plain\"> + Ti.App.Properties.getDouble(</code><code class=\"string\">&apos;myDouble&apos;</code><code class=\"plain\">, </code><code class=\"value\">20.6</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;List: &apos;</code><code class=\"plain\"> + Ti.App.Properties.getList(</code><code class=\"string\">&apos;myList&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">window.open();</code></div> </div> </div> <p>This code outputs the following results: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">String: This is a string</code></div> <div class=\"line\"><code class=\"plain\">Integer: </code><code class=\"value\">10</code></div> <div class=\"line\"><code class=\"plain\">Boolean: </code><code class=\"keyword\">true</code></div> <div class=\"line\"><code class=\"plain\">Double: </code><code class=\"value\">10.600000381469727</code></div> <div class=\"line\"><code class=\"plain\">List:</code></div> <div class=\"line\"><code class=\"plain\"> { </code><code class=\"string\">&apos;address&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;1 Main St&apos;</code><code class=\"plain\"> </code><code class=\"string\">&apos;name&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;Name 1&apos;</code><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> { </code><code class=\"string\">&apos;address&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;2 Main St&apos;</code><code class=\"plain\"> </code><code class=\"string\">&apos;name&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;Name 2&apos;</code><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> { </code><code class=\"string\">&apos;address&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;3 Main St&apos;</code><code class=\"plain\"> </code><code class=\"string\">&apos;name&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;Name 3&apos;</code><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> { </code><code class=\"string\">&apos;address&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;4 Main St&apos;</code><code class=\"plain\"> </code><code class=\"string\">&apos;name&apos;</code><code class=\"plain\"> : </code><code class=\"string\">&apos;Name 4&apos;</code><code class=\"plain\"> }</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-StoringJSobjectsasJSONinproperties\"> <h3 class=\"heading\"><span>Storing JS objects as JSON in properties</span></h3> <p>If you have a complex Javascript object, you can convert it to a <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/JSON\" target=\"_blank\">JSON</a> string using <tt>JSON.stringify()</tt> provided by <a class=\"external-link external-link\" href=\"http://developer.appcelerator.com/apidoc/desktop/latest/Titanium.JSON\" target=\"_blank\">Titanium.JSON</a>, which will allow you to store it in the database using the <a class=\"external-link external-link\" href=\"#!/api/Titanium.App.Properties-method-setString\">Titanium.App.Properties.setString()</a> method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var window = Titanium.UI.createWindow({</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&apos;white&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">var weatherData = { </code><code class=\"string\">&quot;reports&quot;</code><code class=\"plain\"> : [ { </code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Mountain View&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Cloudy&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic23.gif&quot;</code><code class=\"plain\"> }, { </code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Washington, DC&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Mostly Cloudy&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic20.gif&quot;</code><code class=\"plain\"> }, { </code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Brasilia&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Thunderstorm&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic02.gif&quot;</code><code class=\"plain\"> } ] };</code></div> <div class=\"line\"><code class=\"plain\">Ti.App.Properties.setString(</code><code class=\"string\">&apos;myJSON&apos;</code><code class=\"plain\">, JSON.stringify(weatherData));</code></div> <div class=\"line\"><code class=\"plain\">var retrievedJSON=Ti.App.Properties.getString(</code><code class=\"string\">&apos;myJSON&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;myJSON not found&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&quot;The myJSON property contains: &quot;</code><code class=\"plain\"> + retrievedJSON);</code></div> <div class=\"line\"><code class=\"plain\">window.open();</code></div> </div> </div> <p>This will output the following to the log: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">The myJSON property contains: {</code><code class=\"string\">&quot;reports&quot;</code><code class=\"plain\">:[{</code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;Mountain View&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;Cloudy&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic23.gif&quot;</code><code class=\"plain\">},{</code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Washington, DC&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Mostly Cloudy&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic20.gif&quot;</code><code class=\"plain\">},{</code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Brasilia&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;condition&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Thunderstorm&quot;</code><code class=\"plain\">,</code><code class=\"string\">&quot;icon&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;http://www.worldweather.org/img_cartoon/pic02.gif&quot;</code><code class=\"plain\">}]}</code></div> </div> </div> <p>This stored JSON string can later be converted back to a Javascript object using <tt>JSON.parse()</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var myObject = JSON.parse(Ti.App.Properties.getString(</code><code class=\"string\">&apos;myJSON&apos;</code><code class=\"plain\">));</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Hands-onPractice\"> <h3 class=\"heading\"><span>Hands-on Practice</span></h3> <div class=\"section section-4\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Goal\"> <h4 class=\"heading\"><span>Goal</span></h4> <p>In this activity, you will write an app that prompts the user to select temperature units in either Celsius or Fahrenheit and then save that preference in an application property. When the app is loaded, the property should be read and used to update the UI accordingly. When complete, your app should look like the following: </p> </div> <div class=\"section section-4\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Steps\"> <h4 class=\"heading\"><span>Steps</span></h4> <ol class=\"\"><li class=\"\"> <p>Create a new Titanium Mobile project named <tt class=\"\">localdata</tt> with an app ID of <tt>com.appcelerator.localdata</tt> </p> </li><li> <p>In app.js, follow our recommended coding best-practices to create a two-tabbed application with tabs titled Current Conditions and Units. You can omit the tab icons. </p> </li><li> <p>Define and assign a window to the Current Conditions tab, but you can leave that window empty. We&apos;ll use it in the 5.3 lab that follows. </p> </li><li> <p>Define and assign a window to the Units tab with the following characteristics: </p> <ul class=\"\"><li> <p>Define and add a label with these properties: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">color: </code><code class=\"string\">&apos;black&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">text: </code><code class=\"string\">&apos;Fahrenheit&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">font: { fontSize: </code><code class=\"value\">22</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">&apos;bold&apos;</code><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\">left: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">top: </code><code class=\"value\">5</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">height: </code><code class=\"value\">25</code></div> </div> </div> </li><li> <p>Define and add a &quot;sub&quot; label with these properties: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">color: </code><code class=\"string\">&apos;black&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">text: </code><code class=\"string\">&apos;Output will be shown in Celsius&apos;</code><code class=\"plain\">, </code></div> <div class=\"line\"><code class=\"plain\">font: { fontSize: </code><code class=\"value\">18</code><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\">left: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">top: </code><code class=\"value\">40</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">height: </code><code class=\"value\">20</code></div> </div> </div> </li><li class=\"\"> <p>Define and add a switch positioned at <tt class=\"\">right: 10</tt>, <tt class=\"\">top: 5</tt> with an <tt class=\"\">auto</tt> width. Its value should be a zero or one depending on the value of the <tt class=\"\">units</tt> app property. If that property equals <tt class=\"\">c</tt>, set the switch value to <tt class=\"\">0</tt>, otherwise set it to <tt>1</tt>. </p> </li></ul></li><li class=\"\"> <p>Add an event handler to the switch: if the switch value is <tt class=\"\">1</tt>, update the sub-label text to read &apos;Output will be shown in Fahrenheit&apos; and set the <tt class=\"\">units</tt> app property equal to <tt class=\"\">f</tt>. If the value of the switch is <tt class=\"\">0</tt>, update the sub-label text to read &apos;Output will be shown in Celsius&apos; and set the <tt class=\"\">units</tt> app property equal to <tt>c</tt>. </p> </li><li> <p>Build your app for the simulator/emulator. The output should match the preceding picture. When you change the switch, the label should update. Close the app. When you re-open it, your preference should be saved and reloaded. </p> </li></ol> </div> </div> <div class=\"section section-3\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-ReferencesandFurtherReading\"> <h3 class=\"heading\"><span>References and Further Reading</span></h3> <ul class=\"\"><li> <p><a class=\"external-link external-link\" href=\"#!/api/Titanium.App.Properties\">API Docs: Properties</a> </p> </li><li> <p><a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/5.2_localdata.zip\" target=\"_blank\">Finished code</a> </p> </li></ul> </div> </div> <div class=\"section section-2\" id=\"src-29004900_LightweightPersistencewiththePropertiesAPI-Summary\"> <h2 class=\"heading\"><span>Summary</span></h2> <p>In this chapter, we dug into the <tt>Ti.App.Properties</tt> API. You learned how to store both simple and complex data in app properties and retrieve that data later. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004900\"><span>Edit</span></a> </div> </body> </html> ","title":"Lightweight Persistence with the Properties API"});