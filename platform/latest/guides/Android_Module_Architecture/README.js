Ext.data.JsonP['Android_Module_Architecture']({"guide":" <!doctype html> <html> <head> <title>Android Module Architecture</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-43289000\" class=\"content\"> <h1>Android Module Architecture</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Introduction\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Module\">Module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Modulelifecycleevents\">Module lifecycle events</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Getthecurrentactivity\">Get the current activity</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Proxy\">Proxy</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Methods\">Methods</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Properties\">Properties</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Customaccessormethods\">Custom accessor methods</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-propertyAccessorsannotationelement\">propertyAccessors annotation element</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Handlepropertychangesusingthemodellistener\">Handle property changes using the model listener</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Constants\">Constants</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Typeconversions\">Type conversions</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Filesandblobs\">Files and blobs</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Activitylifecycleevents\">Activity lifecycle events</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-ViewProxyandView\">View Proxy and View</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-ViewProxy\">View Proxy</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-View\">View</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-ViewPropertyandmethods\">View Property and methods</a> </p> </li></ul></li></ul> <div class=\"section section-2\" id=\"src-43289000_AndroidModuleArchitecture-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>The Titanium SDK is based on a modular architecture, which can be utilized to extend the SDK by building modules. The module architecture contains the following key interface components: </p> <ul class=\"\"><li class=\"\"> <p><strong>Proxy</strong>: A base class that represents the native binding between your JavaScript code and native code </p> </li><li class=\"\"> <p><strong>Module</strong>: A special type of Proxy that describes a specific API set or namespace </p> </li><li class=\"\"> <p><strong>ViewProxy</strong>: A specialized Proxy that knows how to render Views </p> </li><li class=\"\"> <p><strong>View</strong>: The visual representation of a UI component which Titanium can render </p> </li></ul> <p>When building a Module, you can only have one Module class but you can have zero or more Proxies, Views and ViewProxies. </p> <p>To return <u>visual</u> data between JavaScript and native code, create a View and a ViewProxy. Each View requires a View Proxy. The ViewProxy represents the model data (which is kept inside the proxy itself in case the View needs to be released) and is responsible for exposing the APIs and events that the View supports. </p> <p>To return <u>non-visual</u> data between JavaScript and native code, create a Proxy. The Proxy knows how to handle any method and property, and dispatching and firing events. </p> <p>These components require special class names and method signatures. Each components is described in further detail below. </p> </div> <div class=\"section section-2\" id=\"src-43289000_AndroidModuleArchitecture-Module\"> <h2 class=\"heading\"><span>Module</span></h2> <p>A Module is a class that provides an API point with a particular ID. That ID can then be used to <tt>require</tt> the module from JavaScript. </p> <p>All modules must extend the <tt class=\"\">KrollModule</tt> class and have the <tt class=\"\">@Kroll.module</tt> annotation. All module class names and file names must have the <tt>Module</tt> suffix. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.actionbarsearch;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.KrollModule;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.module(name=</code><code class=\"string\">&quot;Actionbarsearch&quot;</code><code class=\"plain\">, id=</code><code class=\"string\">&quot;com.example.actionbarsearch&quot;</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ActionbarsearchModule </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollModule</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The <tt class=\"\">id</tt> annotation element specifies the identifier used with <tt>require</tt> to import the module. In this case, the JavaScript to require the module would look like this: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> actionBarSearch = require(</code><code class=\"string\">&quot;com.example.actionbarsearch&quot;</code><code class=\"plain\">);</code></div> </div> </div> <p>The module must have a default constructor (that is, one that takes no arguments). </p> <p>A module can also have a parent module: <tt class=\"\">Titanium.UI</tt> and <tt>Titanium.App</tt> are children of the Titanium module. </p> <p>The <tt class=\"\">@Kroll.module</tt> annotation can also contain a <tt class=\"\">propertyAccessors</tt> element, which defines a set of properties exposed by the module. See <a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-Properties\">Properties</a> for more information. </p> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Modulelifecycleevents\"> <h3 class=\"heading\"><span>Module lifecycle events</span></h3> <p>The module provides several places for you to hook into the application&apos;s lifecycle. </p> <p class=\"line\">Use the <tt>@Kroll.onAppCreate</tt> annotation to declare a method to be called when the application object is created. This is optional and is only required if you have any application specific initialization, such as starting up a service that is required by the module. </p> <p class=\"line\"> </p> <p class=\"line\">The app create method is called during application startup. It is only called once, before your module is actually loaded. </p> <p> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.onAppCreate</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onAppCreate(TiApplication app)</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">\tLog.d(LCAT, </code><code class=\"string\">&quot;[MODULE LIFECYCLE EVENT] onAppCreate notification&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The module also provides callbacks that are invoked when the application&apos;s root activity is started, stopped, paused, or resumed. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">Activity Lifecycle Events</div> <p>Note that on Titanium applications, the root activity is the one that displays the splash screen. If the first UI component is a heavyweight Window (window with its own activity) or TabGroup, not all of the activity lifecycle events may fire for the root activity. Note that since Release 3.2.0, all Window objects are heavyweight and have their own activity associated with it. </p> <p>To have the module respond to the activity lifecycle events of a specific activity of a TabGroup or Window in the JavaScript application, override the activity lifecycle callbacks of a module proxy, then associate the proxy with the Window or TabGroup whose lifecycle events you want to monitor when you create the proxy in the JavaScript application. For details, see <a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-ActivityLifecycleEvents\">Activity Lifecycle Events</a> below. </p> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Getthecurrentactivity\"> <h3 class=\"heading\"><span>Get the current activity</span></h3> <p>To get access to the current activity, first use TiApplication&apos;s getInstance() method, and then use the getCurrentActivity() method: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">TiApplication appContext = TiApplication.getInstance();</code></div> <div class=\"line\"><code class=\"plain\">Activity activity = appContext.getCurrentActivity();</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43289000_AndroidModuleArchitecture-Proxy\"> <h2 class=\"heading\"><span>Proxy</span></h2> <p>A Proxy can expose methods, properties, and constants to JavaScript. Each of these can be a primitive type, or a proxy. Proxies also have built-in event management primarily through <tt class=\"\">fireEvent</tt> and <tt>hasListeners</tt>. </p> <p>A proxy must extend <a class=\"external-link external-link\" href=\"http://docs.appcelerator.com/module-apidoc/latest/android/org/appcelerator/kroll/KrollProxy.html\" target=\"_blank\">KrollProxy</a> and have the <tt class=\"\">@Kroll.proxy</tt> annotation. All proxy class names and file names must have the <tt>Proxy</tt> suffix. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.test;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.KrollProxy;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ExampleProxy </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollProxy</code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>To automatically generate a &quot;create&quot; method on a parent module, assign the parent module class to the <tt class=\"\">@Kroll.proxy creatableInModule</tt> annotation element. For example, the following code will expose the <tt>createExample()</tt> method to JavaScript in the TestModule: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.test;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.KrollProxy;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy(creatableInModule=TestModule.</code><code class=\"keyword\">class</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ExampleProxy </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollProxy</code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Methods\"> <h3 class=\"heading\"><span>Methods</span></h3> <p>Methods of a proxy or module are exposed with the <a class=\"external-link external-link\" href=\"http://docs.appcelerator.com/module-apidoc/latest/android/org/appcelerator/kroll/annotations/Kroll.method.html\" target=\"_blank\">@Kroll.method</a> annotation. A simple example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"string\">&quot;Hello World&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>You can specify the method parameters in one of two ways: </p> <ul class=\"\"><li> <p>Specify parameters explicitly. In this case, the Titanium attempts to validate and convert types before calling the method. </p> </li><li class=\"\"> <p>Specify a single <tt>Object[]</tt> argument. Your method must validate parameters and convert types manually at runtime. </p> </li></ul> <p>If you specify parameters explicitly <i class=\"\">and</i> one or more parameters are optional, they must be identified using the <tt>@Kroll.argument</tt> annotation: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> switchView(</code><code class=\"color1\">@Kroll</code><code class=\"plain\">.argument(optional=</code><code class=\"keyword\">true</code><code class=\"plain\">) </code><code class=\"keyword\">boolean</code><code class=\"plain\"> animate) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something.</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> </div> </div> <p>If one argument is optional, all subsequent arguments must be marked as optional as well. </p> <p>For methods with a variable number of arguments, specify the signature as taking a single array argument, and check the number and type of the arguments at runtime. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> HashMap doSomething(Object[] args) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// check and convert arguments</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> </div> </div> <p>For information on runtime type checking and type conversions, see <a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture-section-src-43289000_AndroidModuleArchitecture-TypeConversions\">Type Conversions</a>. </p> <p>If you want to the method name exposed to JavaScript to differ from method name in Java, use the optional <tt class=\"\">name</tt> element in the <tt>@Kroll.method</tt> annotation to specify the JavaScript method name: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method(name=</code><code class=\"string\">&quot;setTab&quot;</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setTabProxy(TiViewProxy tabProxy)</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> setParent(tabProxy);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.tab = tabProxy;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Properties\"> <h3 class=\"heading\"><span>Properties</span></h3> <p>Each proxy object maintains an internal dictionary of properties. Properties can be exposed to JavaScript in one of two ways: </p> <ul class=\"\"><li> <p>Creating custom getter and setter methods. When you create a custom getter and setter methods, you can perform data validation, and take actions when the properties are set. </p> </li><li class=\"\"> <p>Specifying a list of properties in the <tt class=\"\">@Kroll.proxy</tt> or <tt class=\"\">@Kroll.module</tt> annotation with the <tt>propertyAccessors</tt> element. This automatically generates getter and setter methods for each of the named properties. </p> </li></ul> <p>When you use custom getter and setter methods, you are responsible for storing property values in whatever way you want. </p> <p>Auto-generated property accessors store property values in the internal dictionary. The proxy class provides a set of methods for accessing the proxy&apos;s property dictionary from Java: </p> <ul class=\"\"><li class=\"\"> <p>Retrieve the value of a single property using <tt>getProperty()</tt>. </p> </li><li class=\"\"> <p>Set an individual property using <tt>setProperty()</tt>. </p> </li><li class=\"\"> <p>Retrieve the entire dictionary using <tt>getProperties()</tt>. </p> </li></ul> <p>In addition, you can register a <i class=\"\">model listener</i> &#x2013; another Java object that<i> </i>receives updates whenever a value is set in the property dictionary. This pattern is commonly used for views and view proxies. </p> <p>Using custom getter and setter methods is somewhat simpler, and is described first. Subsequent sections describe exposing properties using <tt>propertyAccessors</tt>, and responding to property changes using a model listener. </p> <div class=\"section section-4\" id=\"src-43289000_AndroidModuleArchitecture-Customaccessormethods\"> <h4 class=\"heading\"><span>Custom accessor methods</span></h4> <p>Properties are exposed as a pair of getter and setter methods with the <tt class=\"\">@Kroll.getProperty</tt> and <tt>@Kroll.setProperty</tt> annotations. This method is very straightforward, but involves writing boilerplate code for each property. </p> <p>The following example exposes a writable <tt>message</tt> property to JavaScript. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">private</code><code class=\"plain\"> String myMessage;</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.getProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> myMessage;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setMessage(String message) {</code></div> <div class=\"line\"><code class=\"plain\"> Log.d(TAG, </code><code class=\"string\">&quot;Tried setting message to: &quot;</code><code class=\"plain\"> + message);</code></div> <div class=\"line\"><code class=\"plain\">\tmyMessage = message;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Note the following two points: </p> <ul class=\"\"><li class=\"\"> <p>If there were no paired <tt class=\"\">@Kroll.setPropert</tt>y method, the <tt>message</tt> property would be read-only. </p> </li><li class=\"\"> <p>The getter and setter methods also have the <tt class=\"\">@Kroll.method</tt> annotation, which exposes the <tt class=\"\">getMessage</tt> and <tt>setMessage</tt> methods to JavaScript. </p> </li><li> <p>You are responsible for storing and retrieving the value. It can be stored in an instance variable (as in the example) or in the internal property dictionary. </p> </li></ul> <p>In JavaScript, we can now access <tt class=\"\">message</tt> as a property, <i class=\"\">or</i> by calling <tt class=\"\">setMessage()</tt> and <tt>getMessage()</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> calc = require(</code><code class=\"string\">&quot;module.id&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">calc.message = </code><code class=\"string\">&quot;hi&quot;</code><code class=\"plain\">; </code><code class=\"comments\">// or</code></div> <div class=\"line\"><code class=\"plain\">calc.setMessage(</code><code class=\"string\">&quot;hi&quot;</code><code class=\"plain\">);</code></div> </div> </div> <p>The <tt class=\"\">@Kroll.getProperty</tt> and <tt class=\"\">@Kroll.setProperty</tt> annotations support an optional <tt>name</tt> element, which specifies the name of the property. If name is not set, the name of the property is constr </p> </div> <div class=\"section section-4\" id=\"src-43289000_AndroidModuleArchitecture-propertyAccessorsannotationelement\"> <h4 class=\"heading\"><span>propertyAccessors annotation element</span></h4> <p>You can also define a a set of properties in your <tt class=\"\">@Kroll.proxy</tt> or <tt class=\"\">@Kroll.method</tt> annotation using the <tt>propertyAccessors</tt> element, and the accessors will be automatically generated for you: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy(creatableInModule = ActionbarsearchModule.</code><code class=\"keyword\">class</code><code class=\"plain\">,&#xA0;</code></div> <div class=\"line\"><code class=\"plain\"> propertyAccessors = { </code><code class=\"string\">&quot;hintText&quot;</code><code class=\"plain\">, </code><code class=\"string\">&quot;value&quot;</code><code class=\"plain\"> })</code></div> </div> </div> <p>In this case, the proxy has two properties, <tt class=\"\">hintText</tt> and <tt class=\"\">value</tt>, each with corresponding setter and getter methods, such as <tt class=\"\">setHintText</tt> and <tt class=\"\">getValue</tt>. These properties are stored in an internal dictionary. You can query properties using <tt class=\"\">getProperty</tt> <tt class=\"\">()</tt> or retrieve the entire dictionary using <tt class=\"\">getProperties</tt> <tt>()</tt>. </p> <p>When you define properties this way, you&apos;ll usually want to add a model listener to respond to property changes. When you set a property using the generated getter and setter methods, the model listener is automatically notified. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>If you define properties using the <tt class=\"\">propertyAccessors</tt> element, you <u class=\"\"> <strong class=\"\">cannot</strong> </u> override the accessors by defining custom accessor methods. Doing so causes module packaging to fail with a cryptic error. For each property, you must use <i class=\"\">either</i> <tt>propertyAccessors</tt> or custom accessors, but not both. </p> </div> </div> <div class=\"section section-4\" id=\"src-43289000_AndroidModuleArchitecture-Handlepropertychangesusingthemodellistener\"> <h4 class=\"heading\"><span>Handle property changes using the model listener</span></h4> <p>In most cases, you&apos;ll want to <i class=\"\">do something</i> when the property is set. For this reason, you can use a <tt>KrollProxyListener</tt>, which receives events when the proxy&apos;s properties change. </p> <p>The model listener pattern is typically used for views, so that property changes can be delegated from the view proxy to the view object. </p> <p>To add a listener, call the proxy&apos;s <tt>setModelListener()</tt> method: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">setModelListener(delegate);</code></div> </div> </div> <p>In the case of view proxies, the view object is automatically added as a model listener. An instance of the <tt>KrollModule</tt> class acts as its own model listener, providing a convenient mechanism for handling property changes inside a module. </p> <p>The <tt>KrollProxyListener</tt> interface defines four methods that you need to implement: </p> <div class=\"tablewrap\"> <table class=\"confluenceTable\"> <thead> <tr> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Method </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Description </p> </td> </tr> </thead><tfoot class=\"\"/><tbody> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>listenerAdded </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Called when an event listener is added to the proxy. </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>listenerRemoved </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Called when an event listener is removed from the proxy. </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>processProperties </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Called when the model listener is added, with a complete set of the proxy&apos;s properties. </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>propertyChanged </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Called when one of the proxy&apos;s properties changes. </p> </td> </tr> </tbody> </table> </div> <p>To handle properties, you must add logic to <tt class=\"\">processProperties</tt> and <tt class=\"\">propertyChanged</tt> for each property you support. The <tt>processProperties</tt> method receives a dictionary of properties: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> processProperties(KrollDict props) {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">super</code><code class=\"plain\">.processProperties(props);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (props.containsKey(</code><code class=\"string\">&quot;hintText&quot;</code><code class=\"plain\">)) {</code></div> <div class=\"line\"><code class=\"plain\"> searchView.setQueryHint(props.getString(</code><code class=\"string\">&quot;hintText&quot;</code><code class=\"plain\">)); </code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (props.containsKey(</code><code class=\"string\">&quot;value&quot;</code><code class=\"plain\">)) {</code></div> <div class=\"line\"><code class=\"plain\"> searchView.setQuery(props.getString(</code><code class=\"string\">&quot;value&quot;</code><code class=\"plain\">), </code><code class=\"keyword\">false</code><code class=\"plain\">); </code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The <tt class=\"\">propertyChanged</tt> method is fired whenever a property is invoked <i class=\"\">after</i> the initial call to <tt>processProperties</tt>. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> propertyChanged(String key, Object oldValue, Object newValue, KrollProxy proxy) {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (key.equals(</code><code class=\"string\">&quot;hintText&quot;</code><code class=\"plain\">)) {</code></div> <div class=\"line\"><code class=\"plain\"> searchView.setQueryHint((String) newValue);</code></div> <div class=\"line\"><code class=\"plain\">\t} </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (key.equals(</code><code class=\"string\">&quot;value&quot;</code><code class=\"plain\">)) {</code></div> <div class=\"line\"><code class=\"plain\"> searchView.setQuery((String) newValue, </code><code class=\"keyword\">false</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>You can set properties programmatically on the proxy using either <tt class=\"\">setProperty()</tt>or <tt class=\"\">setPropertyAndFire()</tt>. Both methods update the property dictionary and make the new property value visible to JavaScript. The <tt class=\"\">setPropertyAndFire()</tt> method also invokes the <tt class=\"\">propertyChanged</tt> callback on the model listener. In the case of a view proxy, you would typically call <tt class=\"\">setProperty</tt> to make a value from the native view object visible to the JavaScript layer: for example, when the user sets the text value in a text field, you want to make the value available to JavaScript<i class=\"\">. </i>There is no need to fire the <tt>propertyChanged</tt> callback, since the model listener itself (the view object) is generating the change. </p> <p>You can also use custom accessor methods when using the model listener. In this case, you&apos;d define the property getter and setter methods using the <tt class=\"\">@Kroll.setProperty</tt> and <tt class=\"\">@Kroll.getProperty</tt> annotations instead of listing the property in the <tt class=\"\">propertyAccessors</tt> element. You can do this if you want to validate or transform the value, or if you want to provide optional arguments in the setter. In the setter, you can then call <tt>setPropertyAndFire</tt> to store the value and notify the model listener. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.getProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> getProperty(</code><code class=\"string\">&quot;message&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setMessage(String message) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// validate or transform the value</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// store the value and fire the callback</code></div> <div class=\"line\"><code class=\"plain\"> setPropertyAndFire(</code><code class=\"string\">&quot;message&quot;</code><code class=\"plain\">, message);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Constants\"> <h3 class=\"heading\"><span>Constants</span></h3> <p>A constant is simply a static property on a <tt class=\"\">@Kroll.module</tt>. Annotate the property with <tt class=\"\">@Kroll.constant</tt>and declare it as both <tt class=\"\">static</tt> and <tt>final</tt>. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.module</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> CalcModule </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollModule {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.constant</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> ONE_HUNDRED = </code><code class=\"value\">100</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The constant can now be referred to directly from JavaScript: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">calc.ONE_HUNDRED == 100.</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Typeconversions\"> <h3 class=\"heading\"><span>Type conversions</span></h3> <p>Type conversions can be handled implicitly (through a method signature) or you can explicitly cast Objects to the correct types. </p> <p>The <tt>TiConvert</tt> class provides a set of helper methods for casting Objects to specific types. </p> <p>The JavaScript, Number, String, Array, Date can be converted into the corresponding Java types, either implicitly or explicitly, as shown in the following table: </p> <div class=\"tablewrap\"> <table class=\"confluenceTable\"> <thead> <tr> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>JavaScript Type </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Java Type </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Explicit Conversion </p> </td> </tr> </thead><tfoot class=\"\"/><tbody> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Number </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>int </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toInt(java.lang.Object)\" target=\"_blank\">TiConvert.toInt</a> </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Number </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>float </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toFloat(java.lang.Object)\" target=\"_blank\">TiConvert.toFloat</a> </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Number </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>double </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toDouble(java.lang.Object)\" target=\"_blank\">TiConvert.toDouble</a> </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>boolean </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>boolean </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toBoolean(java.lang.Object)\" target=\"_blank\">TiConvert.toBoolean</a> </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>String </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>String </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toString(java.lang.Object)\" target=\"_blank\">TiConvert.toString</a> or Cast </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Object </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>HashMap&lt;String, Object&gt; </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Cast </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Array </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Object[] </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Cast </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Date </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Date </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toDate(java.lang.Object)\" target=\"_blank\">TiConvert.toDate</a> or Cast </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Ti.Blob </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TiBlob </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/platform/util/TiConvert.html#toBlob(java.lang.Object)\" target=\"_blank\">TiConvert.toBlob</a> or Cast </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Ti.Filesystem.File </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>FileProxy </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Cast </p> </td> </tr> </tbody> </table> </div> <p>For example, if you declare a method with int values in the signature, the JavaScript Number values passed in will be converted to Java integers implicitly: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> multiply(</code><code class=\"keyword\">int</code><code class=\"plain\"> a, </code><code class=\"keyword\">int</code><code class=\"plain\"> b)</code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> a * b;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The same method with explicit type conversion would look like this: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> multiply(Object a, Object b)</code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">int</code><code class=\"plain\"> aval = TiConvert.toInt(a);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">int</code><code class=\"plain\"> bval = TiConvert.toInt(b);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> aval * bval;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"section section-4\" id=\"src-43289000_AndroidModuleArchitecture-Filesandblobs\"> <h4 class=\"heading\"><span>Files and blobs</span></h4> <p>When a JavaScript Titanium object is passed to Java, the Java method receives a reference to the associated proxy object. Among the most common of these proxy objects are the File and Blob objects. </p> <p>The Titanium.Blob JavaScript object is represented by an instance of the <tt class=\"\">TiBlob</tt>class. Use <tt>TiBlob</tt> in method signatures where you want to accept or return a Blob. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> addBlob(TiBlob blob)\t</code></div> </div> </div> <p>To return a Blob from Java, create and return an instance of <tt class=\"\">TiBlob</tt>. The <tt class=\"\">TiBlob</tt> class provides factory methods to create a <tt>Blob</tt> from a byte array, File, String, or an Android Bitmap. For example, the following code returns a blob representing a bitmap: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> TiBlob loadImage()</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> TiBlob.blobFromImage(myBitmap);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The ModDevGuide project includes sample code for retrieving a bitmap from resources. </p> <p>A Titanium File object is passed into Java as a <tt class=\"\">FileProxy</tt>. Use a <tt class=\"\">TiBaseFile</tt> object to get an instance of FileProxy given a <tt class=\"\">TiBaseFile</tt>, and vice versa. Many APIs use the <tt>TiBaseFile</tt> object internally to manipulate files, and you can easily construct a FileProxy from a TiBaseFile </p> <p>The following example shows one way to create a <tt class=\"\">TiBaseFile</tt> using <tt class=\"\">TiFileFactory</tt>, and use the new instance to construct a <tt>FileProxy</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">TiBaseFile file = TiFileFactory.createTitaniumFile(</code><code class=\"keyword\">new</code><code class=\"plain\"> String[] { url }, </code><code class=\"keyword\">false</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">FileProxy fileProxy = </code><code class=\"keyword\">new</code><code class=\"plain\"> FileProxy(file);</code></div> </div> </div> <p>You can retrieve the associated <tt class=\"\">TiBaseFile</tt> from a <tt class=\"\">FileProxy</tt> using <tt>getBaseFile</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">TiBaseFile file = fileProxy.getBaseFile();</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-Activitylifecycleevents\"> <h3 class=\"heading\"><span>Activity lifecycle events</span></h3> <p>Starting with Titanium SDK 4.0.0, a proxy can respond to <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\" target=\"_blank\">activity lifecycle events</a> by overriding the activity lifecycle callbacks, then in the JavaScript application, assign either a Window or TabGroup object to the proxy&apos;s <tt>lifecycleContainer</tt> property when creating the module proxy to monitor the lifecycle events of that object to trigger the module proxy&apos;s lifecycle events. </p> <p>First, in the module proxy, override the activity lifecycle callbacks you want to respond to, such as <tt class=\"\">onCreate</tt>, <tt class=\"\">onStart</tt>, <tt class=\"\">onRestart</tt>, <tt class=\"\">onResume</tt>, <tt class=\"\">onPause</tt>, <tt class=\"\">onStop</tt> or <tt>onDestroy</tt>. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ExampleProxy.java</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ExampleProxy.java\"> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onResume(Activity activity) {</code></div> <div class=\"line\"><code class=\"plain\"> Log.d(LCAT, </code><code class=\"string\">&quot;onResume called&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> loadState();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onPause(Activity activity) {</code></div> <div class=\"line\"><code class=\"plain\"> Log.d(LCAT, </code><code class=\"string\">&quot;onPause called&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> saveState();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> </div> </div> <p>Then, in the JavaScript application, when you create the module proxy, assign its <tt>lifecycleContainer</tt> property to either a Window or TabGroup object to listen for that object&apos;s lifecycle events to trigger the module proxy&apos;s activity lifecycle callbacks. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow();</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> foo = require(</code><code class=\"string\">&apos;com.appc.foo&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> fooProxy = foo.createExample({lifecycleContainer: win});</code></div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43289000_AndroidModuleArchitecture-ViewProxyandView\"> <h2 class=\"heading\"><span>View Proxy and View</span></h2> <p>To display UI elements with a module, create both a View Proxy and a View. A View Proxy is a special Proxy that is used for Views &#x2014; objects which interact with the UI to draw things on the screen. The View Proxy is for exposing methods and properties of the view to JavaScript (just as a normal proxy would do), while a View acts as a model listener for the View Proxy. The view implementation is responsible for taking data from the view proxy, and applying it directly to the native <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/android/view/View.html\" target=\"_blank\">View</a> that it exposes. </p> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-ViewProxy\"> <h3 class=\"heading\"><span>View Proxy</span></h3> <p>A View Proxy must extend the <tt class=\"\">TiViewProxy</tt> class and have the <tt class=\"\">@Kroll.proxy</tt>annotation. All view proxy class names and file names must have the <tt class=\"\">Proxy</tt> suffix. Any class that extend the <tt class=\"\">TiViewProxy</tt> class must also implement the <tt>TiUIView createView(Activity activity)</tt>method, which create and returns the associated View. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.test;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.proxy.TiViewProxy;</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy(creatableInModule=TestModule.</code><code class=\"keyword\">class</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> FooProxy </code><code class=\"keyword\">extends</code><code class=\"plain\"> TiViewProxy</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> TiUIView createView(Activity activity)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Calls the View constructor</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">new</code><code class=\"plain\"> FooView(</code><code class=\"keyword\">this</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>To get a reference to the View from the View Proxy, use the <tt>view</tt> variable: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">FooView fooView = (FooView)view;</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-View\"> <h3 class=\"heading\"><span>View</span></h3> <p>A View must extend the <tt class=\"\">TiUIView</tt> class. All view class names and file names must have the <tt class=\"\">View</tt> suffix. Any class that extends the <tt class=\"\">TiUIView</tt> class must implement a constructor and call <tt class=\"\">setNativeView</tt> with an instance of a native Android <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/android/view/View.html\" target=\"_blank\">View</a> either in the constructor or in <tt>processProperties.</tt> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.test;</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiUIView;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiCompositeLayout;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.proxy.TiViewProxy;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> android.view.View;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">private</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ExampleView </code><code class=\"keyword\">extends</code><code class=\"plain\"> TiUIView</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> ExampleView(TiViewProxy proxy) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">super</code><code class=\"plain\">(proxy);</code></div> <div class=\"line\"><code class=\"plain\"> setNativeView(</code><code class=\"keyword\">new</code><code class=\"plain\"> TiCompositeLayout(proxy.getActivity(), LayoutArrangement.DEFAULT));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289000_AndroidModuleArchitecture-ViewPropertyandmethods\"> <h3 class=\"heading\"><span>View Property and methods</span></h3> <p>To set a property or invoke a method on a View, the View Proxy acts as an intermediary between the JavaScript and View. The View Proxy exposes APIs to the JavaScript, then invokes APIs on the View. However, the application must be running on the UI thread. The code below checks to see if the application is running on the UI thread. If it is not, it sends a blocking message until it is back on the UI thread. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">FooProxy.java</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"FooProxy.java\"> <div class=\"line\"><code class=\"keyword\">private</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> MSG_SET_COLOR = </code><code class=\"value\">70000</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty(retain=</code><code class=\"keyword\">false</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setProperty(</code><code class=\"keyword\">final</code><code class=\"plain\"> String value) </code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Get the view object from the proxy and set the property</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (view != </code><code class=\"keyword\">null</code><code class=\"plain\">) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Check to see if we are on the UI thread</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!TiApplication.isUIThread()) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// If not, </code></div> <div class=\"line\"><code class=\"plain\"> TiMessenger.sendBlockingMainMessage(</code><code class=\"keyword\">new</code><code class=\"plain\"> Handler(TiMessenger.getMainMessenger().getLooper(), </code><code class=\"keyword\">new</code><code class=\"plain\"> Handler.Callback() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">boolean</code><code class=\"plain\"> handleMessage(Message msg) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">switch</code><code class=\"plain\"> (msg.what) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> MSG_SET_PROPERTY: {</code></div> <div class=\"line\"><code class=\"plain\"> AsyncResult result = (AsyncResult) msg.obj;</code></div> <div class=\"line\"><code class=\"plain\"> FooView fooView = (FooView)view;</code></div> <div class=\"line\"><code class=\"plain\"> fooView.setProperty(value);</code></div> <div class=\"line\"><code class=\"plain\"> result.setResult(</code><code class=\"keyword\">null</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }).obtainMessage(MSG_SET_PROPERTY), value);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// If we are on the UI thread</code></div> <div class=\"line\"><code class=\"plain\"> FooView fooView = (FooView)view;</code></div> <div class=\"line\"><code class=\"plain\"> fooView.setProperty(value);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Updates the property on the Proxy object</code></div> <div class=\"line\"><code class=\"plain\"> setProperty(</code><code class=\"string\">&quot;property&quot;</code><code class=\"plain\">, value, </code><code class=\"keyword\">true</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43289000\"><span>Edit</span></a> </div> </body> </html> ","title":"Android Module Architecture"});