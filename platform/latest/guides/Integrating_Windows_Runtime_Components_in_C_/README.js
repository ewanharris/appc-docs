Ext.data.JsonP['Integrating_Windows_Runtime_Components_in_C_']({"guide":" <!doctype html> <html> <head> <title>Integrating Windows Runtime Components in C#</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-49158655\" class=\"content\"> <h1>Integrating Windows Runtime Components in C#</h1> <div class=\"section section-2\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLS8qPCFbQ0RBVEFbKi9kaXYucmJ0b2MxNTQxNzg2NzcxOTk3e3BhZGRpbmc6MHB4O31kaXYucmJ0b2MxNTQxNzg2NzcxOTk3dWx7bGlzdC1zdHlsZTpkaXNjO21hcmdpbi1sZWZ0OjBweDt9ZGl2LnJidG9jMTU0MTc4Njc3MTk5N2xpe21hcmdpbi1sZWZ0OjBweDtwYWRkaW5nLWxlZnQ6MHB4O30vKl1dPiovSW50cm9kdWN0aW9uI0ludGVncmF0aW5nV2luZG93c1J1bnRpbWVDb21w\"> <h2 class=\"heading\"><span>/*&lt;![CDATA[*/ div.rbtoc1541786771997 {padding: 0px;} div.rbtoc1541786771997 ul {list-style: disc;margin-left: 0px;} div.rbtoc1541786771997 li {margin-left: 0px;padding-left: 0px;} /*]]&gt;*/</span></h2> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUludHJvZHVjdGlvbg\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNyZWF0ZXNpbXBsZVdpbmRvd3NSdW50aW1lY29tcG9uZW50aW5DIw\">Create simple Windows Runtime component in C#</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNhbGxXaW5kb3dzUnVudGltZWNvbXBvbmVudGZyb21UaXRhbml1bW1vZHVsZQ\">Call Windows Runtime component from Titanium module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNyZWF0ZW5ld1RpdGFuaXVtbW9kdWxl\">Create new Titanium module</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNvcHlNeUNvbXBvbmVudC53aW5tZGludG93aW5kb3dzL2xpYmZvbGRlcm9meW91cm1vZHVsZXByb2plY3Q\">Copy MyComponent.winmd into windows/lib folder of your module project</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLU1vZGlmeVRpdGFuaXVtbW9kdWxldG91c2VNeUNvbXBvbmVudA\">Modify Titanium module to use MyComponent</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUMrK2J1aWx0LWludHlwZXNhbmRXaW5kb3dzUnVudGltZXR5cGVz\">C++ built-in types and Windows Runtime types</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUJ1aWxkbW9kdWxld2l0aC0tcnVuLWNtYWtlb3B0aW9u\">Build module with --run-cmake option</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_-section-src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLU5leHRzdGVwcw\">Next steps</a> </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUludHJvZHVjdGlvbg\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>This article shows how to integrate Windows Runtime components that&apos;s built in C#, with Titanium module. This content is valid as of Titanium SDK 6.1.0. </p> </div> <div class=\"section section-2\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNyZWF0ZXNpbXBsZVdpbmRvd3NSdW50aW1lY29tcG9uZW50aW5DIw\"> <h2 class=\"heading\"><span>Create simple Windows Runtime component in C#</span></h2> <p>This section we are going to create a basic Windows Runtime Component in C# that exposes few methods. For basic information about Windows Runtime Components in C#, refer to official document from Microsoft here: <a class=\"external-link external-link\" href=\"https://docs.microsoft.com/en-us/windows/uwp/winrt-components/creating-windows-runtime-components-in-csharp-and-visual-basic\" target=\"_blank\">Creating Windows Runtime Components in C# and Visual Basic</a>. </p> <ol class=\"\"><li class=\"\"> <p>In Visual Studio, choose <strong class=\"\">File</strong>, <strong class=\"\">New</strong>, <strong class=\"\">Project</strong>. In the <strong class=\"\">Installed Templates</strong> section of the <strong class=\"\">New Project</strong> dialog box, choose <strong class=\"\">Visual C#</strong>, <strong class=\"\">Windows </strong><strong class=\"\">Universal</strong>. Then choose the <strong class=\"\">Windows Runtime Component (Universal Windows)</strong> and enter <tt>MyComponent</tt> for the project name. </p> </li><li class=\"\"> <p>In Solution Explorer, rename the <tt>Class1.cs</tt> to MyComponent.cs that is the class basically what we want to export. </p> </li><li class=\"\"> <p>Then, changes the name of the namespace to <tt class=\"\">MyComponent</tt>, and change the name of the class to <tt>Speaker</tt>. </p> </li></ol> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">MyComponent.cs</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"MyComponent.cs\"> <div class=\"line\"><code class=\"keyword\">using</code><code class=\"plain\"> System;</code></div> <div class=\"line\"><code class=\"keyword\">namespace</code><code class=\"plain\"> MyComponent</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">sealed</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> Speaker</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Then, add one static method, one instance method and property for instance. That would be look like below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">MyComponent.cs</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"MyComponent.cs\"> <div class=\"line\"><code class=\"keyword\">using</code><code class=\"plain\"> System;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">namespace</code><code class=\"plain\"> MyComponent</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">sealed</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> Speaker</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> SampleNumber { </code><code class=\"keyword\">get</code><code class=\"plain\">; </code><code class=\"keyword\">set</code><code class=\"plain\">; }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">string</code><code class=\"plain\"> sayHello(</code><code class=\"keyword\">string</code><code class=\"plain\"> str)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> String.Format(</code><code class=\"string\">&quot;Hello, {0}!&quot;</code><code class=\"plain\">, str);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">string</code><code class=\"plain\"> sayNumber()</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> String.Format(</code><code class=\"string\">&quot;SampleNumber is {0}.&quot;</code><code class=\"plain\">, SampleNumber);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>After updating your Windows Runtime component, select solution in the Solution Explorer, right-click and choose <strong class=\"\">Build Solution</strong>. When build is succeeded, you get <tt class=\"\">MyComponent.winmd</tt> that is built under the directory in your project. You may see the location of the built binary in the Visual Studio&apos;s <strong>Output</strong> view. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">1&gt;------ Build started: Project: MyComponent, Configuration: Debug Any CPU ------</code></div> <div class=\"line\"><code class=\"plain\">1&gt; WRC1 -&gt; C:\\Users\\test\\Documents\\Visual Studio 2015\\Projects\\MyComponent\\bin\\Debug\\MyComponent.winmd</code></div> <div class=\"line\"><code class=\"plain\">========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNhbGxXaW5kb3dzUnVudGltZWNvbXBvbmVudGZyb21UaXRhbml1bW1vZHVsZQ\"> <h2 class=\"heading\"><span>Call Windows Runtime component from Titanium module</span></h2> <p>After successfully building your Windows Runtime component describe above, you should have <tt>MyComponent.winmd</tt> under the Debug folder. Then we want to write a Titanium Module that uses your component. </p> <div class=\"section section-3\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNyZWF0ZW5ld1RpdGFuaXVtbW9kdWxl\"> <h3 class=\"heading\"><span>Create new Titanium module</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">cd</code><code class=\"plain\"> </code><code class=\"plain\">/PATH/TO/WORKSPACE</code></div> <div class=\"line\"><code class=\"plain\">appc new --name </code><code class=\"functions\">test</code><code class=\"plain\"> --</code><code class=\"functions\">id</code><code class=\"plain\"> com.example.</code><code class=\"functions\">test</code><code class=\"plain\"> --</code><code class=\"functions\">type</code><code class=\"plain\"> timodule</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUNvcHlNeUNvbXBvbmVudC53aW5tZGludG93aW5kb3dzL2xpYmZvbGRlcm9meW91cm1vZHVsZXByb2plY3Q\"> <h3 class=\"heading\"><span>Copy MyComponent.winmd into windows/lib folder of your module project</span></h3> <p>Copy your Windows Runtime component files into <strong>windows/lib</strong> folder of your Titanium module project. As of Titanium 6.1.0, Titanium CLI will look into the folder and generates Visual Studio project that has links to the components automatically. </p> </div> <div class=\"section section-3\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLU1vZGlmeVRpdGFuaXVtbW9kdWxldG91c2VNeUNvbXBvbmVudA\"> <h3 class=\"heading\"><span>Modify Titanium module to use MyComponent</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTest.hpp</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTest.hpp\"> <div class=\"line\"><code class=\"preprocessor\">#ifndef _COMEXAMPLETEST_HPP_</code></div> <div class=\"line\"><code class=\"preprocessor\">#define _COMEXAMPLETEST_HPP_</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;ComExampleTest_EXPORT.h&quot;</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;Titanium/detail/TiBase.hpp&quot;</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;Titanium/Module.hpp&quot;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">namespace</code><code class=\"plain\"> Com</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">namespace</code><code class=\"plain\"> Example</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">using</code><code class=\"plain\"> </code><code class=\"keyword\">namespace</code><code class=\"plain\"> HAL;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> Test(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp;) TITANIUM_NOEXCEPT;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">virtual</code><code class=\"plain\"> ~Test() = </code><code class=\"keyword\">default</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> Test(</code><code class=\"keyword\">const</code><code class=\"plain\"> Test&amp;) = </code><code class=\"keyword\">default</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> Test&amp; operator=(</code><code class=\"keyword\">const</code><code class=\"plain\"> Test&amp;) = </code><code class=\"keyword\">default</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"preprocessor\">#ifdef TITANIUM_MOVE_CTOR_AND_ASSIGN_DEFAULT_ENABLE</code></div> <div class=\"line\"><code class=\"plain\"> Test(Test&amp;&amp;) = </code><code class=\"keyword\">default</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> Test&amp; operator=(Test&amp;&amp;) = </code><code class=\"keyword\">default</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"preprocessor\">#endif</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> JSExportInitialize();</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_FUNCTION_DEF(sayHello);</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_FUNCTION_DEF(sayNumber);</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_PROPERTY_DEF(sampleNumber);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Overridden method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// postInitialize is called when JSObject is initialized and associated with module</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Typically used for initializing static/instance member variables</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> postInitialize(JSObject&amp; js_object) override;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Overridden method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// postCallAsConstructor is called when this module is instantiated via constructor (for instance &quot;new test()&quot;)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Typically used for initializing instance member variables</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> postCallAsConstructor(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context, </code><code class=\"keyword\">const</code><code class=\"plain\"> std::vector&lt;JSValue&gt;&amp; arguments) override;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Overridden method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// afterPropertiesSet is called after properties are all set in constructor (for instance &quot;new test({sampleNumber:123})&quot;&quot;)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Typically used for notifying all properties are set right after constructor</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> afterPropertiesSet() TITANIUM_NOEXCEPT override;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">private</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// This is Custom Windows Runtime Component we are developing</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> MyComponent::Speaker^ speaker__;</code></div> <div class=\"line\"><code class=\"plain\"> };</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"preprocessor\">#endif // _COMEXAMPLETEST_HPP_</code></div> </div> </div> <p>Then your Titanium modules cpp will look like: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTest.cpp</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTest.cpp\"> <div class=\"line\"><code class=\"preprocessor\">#include &quot;ComExampleTest.hpp&quot;</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;Titanium/detail/TiImpl.hpp&quot;</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;TitaniumWindows/LogForwarder.hpp&quot;</code></div> <div class=\"line\"><code class=\"preprocessor\">#include &quot;TitaniumWindows/Utility.hpp&quot;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">namespace</code><code class=\"plain\"> Com</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">namespace</code><code class=\"plain\"> Example</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Test::Test(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context) TITANIUM_NOEXCEPT</code></div> <div class=\"line\"><code class=\"plain\"> : Titanium::Module(js_context, </code><code class=\"string\">&quot;com.example.test&quot;</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_LOG_DEBUG(</code><code class=\"string\">&quot;Test::ctor Initialize&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> Test::postInitialize(JSObject&amp; js_object)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Overridden method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// postCallAsConstructor is called when this module is instantiated via constructor (for instance &quot;new test()&quot; in JavaScript)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> Test::postCallAsConstructor(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context, </code><code class=\"keyword\">const</code><code class=\"plain\"> std::vector&lt;JSValue&gt;&amp; arguments)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Titanium::Module::postCallAsConstructor(js_context, arguments); </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Let&apos;s create Speaker instance on the constructor for now. In JavaScript</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> speaker__ = ref </code><code class=\"keyword\">new</code><code class=\"plain\"> MyComponent::Speaker();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Overridden method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// afterPropertiesSet is called after properties are set in constructor (for instance &quot;new test({sampleNumber:123})&quot;&quot; in JavaScript)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> Test::afterPropertiesSet() TITANIUM_NOEXCEPT</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Titanium::Module::afterPropertiesSet(); </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Output logs to see if it works</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_MODULE_LOG_INFO(</code><code class=\"string\">&quot;Test::afterPropertiesSet() is called&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Expose sayHello method as static method and just delegate it to Speaker</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_FUNCTION(Test, sayHello)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// We can call Windows Runtime Components static method like this</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// We call ConvertUTF8String function to convert Platform::String^ to std::string here</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateString(TitaniumWindows::Utility::ConvertUTF8String(MyComponent::Speaker::sayHello(</code><code class=\"string\">&quot;World&quot;</code><code class=\"plain\">)));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Expose sayNumber method as instance method and just delegate it to Speaker</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_FUNCTION(Test, sayNumber)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Note that speaker__ can be nullptr.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Speaker instantiates it only when constructor is called</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// We call ConvertUTF8String function to convert Platform::String^ to std::string here</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (speaker__) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateString(TitaniumWindows::Utility::ConvertUTF8String(speaker__-&gt;sayNumber()));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateUndefined();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Expose name property setter and just delegate it to Speaker</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_PROPERTY_SETTER(Test, sampleNumber)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Note that speaker__ can be nullptr.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Speaker instantiates it only when constructor is called</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (speaker__) {</code></div> <div class=\"line\"><code class=\"plain\"> speaker__-&gt;SampleNumber = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;</code><code class=\"color1\">int</code><code class=\"plain\">&gt;(argument);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Expose sampleNumber property getter and just delegate it to Speaker</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_PROPERTY_GETTER(Test, sampleNumber)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Note that speaker__ can be nullptr.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Speaker instantiates it only when constructor is called</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (speaker__) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateNumber(speaker__-&gt;SampleNumber);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateUndefined();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> Test::JSExportInitialize()</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> JSExport&lt;Test&gt;::SetClassVersion(1);</code></div> <div class=\"line\"><code class=\"plain\"> JSExport&lt;Test&gt;::SetParent(JSExport&lt;Titanium::Module&gt;::Class());</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_ADD_FUNCTION(Test, sayHello);</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_ADD_FUNCTION(Test, sayNumber);</code></div> <div class=\"line\"><code class=\"plain\"> TITANIUM_ADD_PROPERTY(Test, sampleNumber);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>For more examples of using the module API, see working Titanium modules under <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile_windows/tree/master/Source\" target=\"_blank\">github/appcelerator/titanium_mobile_windows/Source</a> </p> </div> <div class=\"section section-3\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUMgIGJ1aWx0LWludHlwZXNhbmRXaW5kb3dzUnVudGltZXR5cGVz\"> <h3 class=\"heading\"><span>C++ built-in types and Windows Runtime types</span></h3> <p>You might wonder why we can&apos;t pass <tt class=\"\">JSValue</tt> as string directly to <tt class=\"\">MyComponent-&gt;Name</tt>. That is because only Windows Runtime types can be passed across ABI boundary. For basic information about type system in Windows Runtime refer to <a class=\"external-link external-link\" href=\"https://docs.microsoft.com/en-us/cpp/cppcx/type-system-c-cx\" target=\"_blank\">Type System (C++/CX)</a>. To pass string across ABI boundary you need to convert <tt class=\"\">JSValue</tt> to <tt class=\"\">std::string</tt> and then convert to <tt class=\"\">Platform::String^</tt> (C++). There are some utility functions to convert it in <tt class=\"\">TitaniumWindows::Utility</tt> namespace. Let say we have argument variable that is passed as <tt class=\"\">JSValue</tt> like below, we can cast <tt class=\"\">JSValue</tt> to std::string, and then convert it to <tt class=\"\">Platform::String^</tt> using <tt class=\"\">TitaniumWindows::Utility::ConvertUTF8String</tt>. Note that we need to treat strings in <tt>JSValue</tt> as UTF8 because it consists of UTF8 strings. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"comments\">// Only Windows Runtime types can be passed to Windows Runtime component.</code></div> <div class=\"line\"><code class=\"comments\">// Usage: const auto wrcString = ConvertToString(jsvalue)</code></div> <div class=\"line\"><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\">Platform::String^ ConvertToString(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSValue&amp; js_value) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">const</code><code class=\"plain\"> auto name = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;std::string&gt;(js_value);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> TitaniumWindows::Utility::ConvertUTF8String(name);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLUJ1aWxkbW9kdWxld2l0aC0tcnVuLWNtYWtlb3B0aW9u\"> <h3 class=\"heading\"><span>Build module with --run-cmake option</span></h3> <p>In order to re-create Visual Studio project files so it can use your component, we need to specify <tt>--run-cmake</tt> option. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">appc run -p windows --build-only --run-cmake</code></div> </div> </div> <p>Then Titanium CLI will generate module zip that contains your Windows Runtime Component. </p> </div> </div> <div class=\"section section-2\" id=\"src-49158655_safe-id-SW50ZWdyYXRpbmdXaW5kb3dzUnVudGltZUNvbXBvbmVudHNpbkMjLU5leHRzdGVwcw\"> <h2 class=\"heading\"><span>Next steps</span></h2> <ul class=\"\"><li> <p>For information about HAL API, see <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/HAL\" target=\"_blank\">github/appcelerator/HAL</a> </p> </li><li> <p>For information about TitaniumKit, see <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile_windows\" target=\"_blank\">github/appcelerator/titanium_mobile_windows</a> </p> </li><li> <p>For more examples of using the module API, see working Titanium modules under <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile_windows/tree/master/Source\" target=\"_blank\">github/appcelerator/titanium_mobile_windows/Source</a> </p> </li></ul> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49158655\"><span>Edit</span></a> </div> </body> </html> ","title":"Integrating Windows Runtime Components in C#"});