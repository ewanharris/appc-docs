Ext.data.JsonP['Windows_Module_Development_Guide']({"guide":" <!doctype html> <html> <head> <title>Windows Module Development Guide</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-46248208\" class=\"content\"> <h1>Windows Module Development Guide</h1> <div class=\"section section-2\" id=\"src-46248208_WindowsModuleDevelopmentGuide-Overview\"> <h2 class=\"heading\"><span>Overview</span></h2> <p>Titanium provides the ability to extend the built-in functionality of the Titanium SDK through a series of optional extensions called modules. Modules let you write code in a platform&apos;s native language (C++/CX for Windows). Through a series of components, we can expose new functionality to the JavaScript running in the Titanium SDK. </p> <p>These guides assume you are familiar with native development using the Windows Runtime SDK and Visual Studio. </p> </div> <div class=\"section section-2\" id=\"src-46248208_WindowsModuleDevelopmentGuide-Chapters\"> <h2 class=\"heading\"><span>Chapters</span></h2> <p><a class=\"document-link\" href=\"#!/guide/Windows_Module_Quick_Start\"><strong>Windows Module Quick Start</strong></a> </p> <p>Provides basic information to quickly create, build, package and test modules. </p> <p><a class=\"document-link\" href=\"#!/guide/Windows_Background_Service_Quick_Start\"><strong>Windows Background Service Quick Start</strong></a> </p> <p>Provides basic information to quickly create, build, package and test Windows background service modules. </p> <p><a class=\"document-link\" href=\"#!/guide/Windows_Module_Architecture\"><strong>Windows Module Architecture</strong></a> </p> <p>Provides in-depth information about the class components used to build modules. Titanium uses a specific notation for each module component. </p> <p><a class=\"document-link\" href=\"#!/guide/Windows_Module_Project\"><strong>Windows Module Project</strong></a> </p> <p>Provides in-depth information about the structure of a module project as well as using Studio and the CLI to manage the projects. Also provides information about adding assets and third-party frameworks to the module. </p> <p><strong class=\"\"><a class=\"document-link\" href=\"#!/guide/Integrating_Windows_Runtime_Components_in_C_\">Integrating Windows Runtime Components in C#</a></strong> </p> <p>This article shows how to integrate Windows Runtime Components that is built in C# with Titanium module. </p> <p><strong>Windows Module API Reference</strong> </p> <p>Useful APIs for module development. The module components extend the <tt>TitaniumKit Module.</tt> </p> <p> </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=46248208\"><span>Edit</span></a> </div> </body> </html> ","title":"Windows Module Development Guide"});