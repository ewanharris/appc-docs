Ext.data.JsonP['Android_Services']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Android Services</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"43287937\" class=\"content\">\n            <h1>Android Services</h1>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-TypesofServices\">Types of Services</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-CreateaJavaScriptService\">Create a JavaScript Service</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-ServiceCode\">Service Code</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-DeclareaService\">Declare a Service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-StartedServices\">Started Services</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-CreateaServiceIntent\">Create a Service Intent</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-StartaStartedService\">Start a Started Service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-StopaStartedService\">Stop a Started Service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-MonitorStartedServices\">Monitor Started Services</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-BoundServices\">Bound Services</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-CreateaBoundService\">Create a Bound Service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-ManagetheBoundService\">Manage the Bound Service</a>    </p>\n</li></ul></li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-SimpleServiceExample\">Simple Service Example</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-WriteyourserviceJavascriptcode\">Write your service Javascript code</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-Updatethetiapp.xml\">Update the tiapp.xml</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-Writesomecodetostarttheservice\">Write some code to start the service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-Writesomecodetostoptheservice\">Write some code to stop the service</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-Testingnotes\">Testing notes</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-OtherExamples\">Other Examples</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Services-section-43287937_AndroidServices-FurtherReading\">Further Reading</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"43287937_AndroidServices-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>\nAn Android service is a component started by an application that runs in the background.  The service does not have any application UI associated with it, so the user does not directly interact with it, only your application.  The service continues to run if the user backgrounds the application, such as when switching to a different application or hitting the <strong class=\" \">Home</strong> button.    </p>\n    <p>\nThe Titanium SDK gives you the ability to write your own Android Services using JavaScript but with some limitations:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nCan only run at intervals that you specify (or only once).    </p>\n</li><li class=\" \">    <p>\nCan only be started programmatically by the Titanium application that defined it.  They cannot be declared in the Android manifest and started by a separate application.    </p>\n</li><li class=\" \">    <p>\nMay stop running if the application is killed, even though the service is restarted.    </p>\n</li></ul>    </div>\n    <div class=\"section section-2 \" id=\"43287937_AndroidServices-TypesofServices\">\n        <h2 class=\"heading \"><span>Types of Services</span></h2>\n    <p>\nIn Android, services can either be started or bound:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nA <i class=\" \">started service</i> is a service started by the application, but the application has no direct reference to the service.  It runs freely in the background.  If the application is destroyed, the service continues to run.    </p>\n</li><li class=\" \">    <p>\nA <i class=\" \">bound service</i> is a service started by the application, where the application binds itself to the service.  If the application is destroyed, the service is destroyed.    </p>\n</li></ul>    <p>\nIn Titanium, there really is not a distinction between the two services.  The only difference is:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nA started service is a service created and started by a Titanium application and may stop running if the application is destroyed.    </p>\n</li><li class=\" \">    <p>\nA bound services is a service created by a Titanium application, which returns a reference to a Service object that the application can invoke methods on to start and stop the service, and bind callbacks to.    </p>\n</li></ul>    <p>\nThese services are discussed in more detail below.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43287937_AndroidServices-CreateaJavaScriptService\">\n        <h2 class=\"heading \"><span>Create a JavaScript Service</span></h2>\n    <p>\nTo create a JavaScript service:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nCreate a JavaScript file with the code to execute.    </p>\n</li><li class=\" \">    <p>\nDeclare the JavaScript file as a service in the <tt class=\" \">tiapp.xml</tt> file.    </p>\n</li><li class=\" \">    <p>\nCreate a service intent referencing the JavaScript file using the <tt class=\" \">Titanium.Android.createServiceIntent()</tt> method and set the interval to run the code using the intent's <tt class=\" \">putExtra()</tt> method, then:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nStart a started service using the intent using the <tt class=\" \">Titanium.Android.startService()</tt> method.    </p>\n</li><li class=\" \">    <p>\nCreate a bound service using the intent with the <tt class=\" \">Titanium.Android.createService()</tt> method and start the bound service using the service's <tt class=\" \">start()</tt> method.    </p>\n</li></ul></li></ol>    <div class=\"section section-3 \" id=\"43287937_AndroidServices-ServiceCode\">\n        <h3 class=\"heading \"><span>Service Code</span></h3>\n    <p>\nCode your JavaScript service using the Titanium APIs, specifically the non-UI APIs, such as <tt class=\" \">Ti.API.info()</tt> or <tt class=\" \">Ti.Network.createHTTPClient()</tt>.    </p>\n    <p>\nPlace the file in either the <tt class=\" \">app/lib</tt> folder for Alloy projects or the <tt class=\" \">Resources</tt> folder for classic Titanium projects.  You can place the file in subfolders within either of those folders.  When referencing the file URL, do not include the <tt class=\" \">app/lib</tt> or <tt class=\" \">Resources</tt> folder, or start the URL with a slash ('/').    </p>\n    <p>\nUse the <tt class=\" \">Titanium.Android.Service</tt> API to manage to the service.  To get a reference to the service, use the <tt class=\" \">Titanium.Android.currentService</tt> property inside the JavaScript service code to retrieve a reference to the service, then invoke the <tt class=\" \">Titanium.Android.Service</tt> APIs on the <tt class=\" \">Service</tt> object.  With the <tt class=\" \">Service</tt> object, you can:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nUse the<tt class=\" \"> intent</tt> property to retrieve the intent that started the service to get extra data that was added to the intent.    </p>\n</li><li class=\" \">    <p>\nUse the <tt class=\" \">serviceInstanceId</tt> property to retrieve the instance ID of the service.  A service can be started multiple times and have multiple instances running.    </p>\n</li><li class=\" \">    <p>\nInvoke the <tt class=\" \">start()</tt> method to start the service.  <u class=\" \">Only used with bound services.</u>    </p>\n</li><li class=\" \">    <p>\nInvoke the <tt class=\" \">stop()</tt> method to stop the service.    </p>\n</li><li class=\" \">    <p>\nMonitor the <tt class=\" \">pause</tt> event to know when the service enters the pause state.  Fired when the code finishes executing.    </p>\n</li><li class=\" \">    <p>\nMonitor the <tt class=\" \">resume</tt> event to know when the service enters the resume state.  Fired when the code is executed.    </p>\n</li><li class=\" \">    <p>\nMonitor the <tt class=\" \">start</tt> event to know when the service starts.  <u class=\" \">Only used with bound services.</u>    </p>\n</li><li class=\" \">    <p>\nMonitor the <tt class=\" \">stop</tt> event to know when the service stops.  <u class=\" \">Only used with bound services.</u>    </p>\n</li><li class=\" \">    <p>\nMonitor the <tt class=\" \">taskremoved</tt> event to know if the application that started the service is destroyed.  <u class=\" \">Only used with started services.</u>    </p>\n</li></ul>    <p>\n    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n        \n    <p>\n<u class=\" \">To retrieve extras sent with the intent</u>, call the intent's <tt class=\" \">hasExtra()</tt> method and pass it the property to retrieve to verify the data exists, then call one of the intent's <tt class=\" \">get*Extra()</tt> methods and pass it the same property name to retrieve the data.    </p>\n    <p>\nThe example below checks for EXTRA_TEXT data sent with the intent.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var extra;</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (intent.hasExtra(Ti.Android.EXTRA_TEXT) &amp;&amp; (extra = intent.getStringExtra(Ti.Android.EXTRA_TEXT))) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Do something with the extra</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    </div>\n    \n    <p>\n    </p>\n    <p>\n<u class=\" \"><br/></u>    </p>\n    <p>\nThe example below demonstrates the usage of some of the service APIs.  The service monitors some of its events and stops itself after ten iterations.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">someService.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Grab a reference to the service and its intent</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> service = Ti.Android.currentService;</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> serviceIntent = service.intent;</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(service.serviceInstanceId);</code></div>\n<div class=\"line\"><code class=\"comments\">// Bind event listeners to the service</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (!Ti.App.Properties.getBool(</code><code class=\"string\">'bind'</code><code class=\"plain\">)) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.Properties.setInt(</code><code class=\"string\">'inc'</code><code class=\"plain\">, 0);</code></div>\n<div class=\"line\"><code class=\"plain\">        </code></div>\n<div class=\"line\"><code class=\"plain\">    service.addEventListener(</code><code class=\"string\">'taskremoved'</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(){</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(</code><code class=\"string\">'**************************** taskremoved fired'</code><code class=\"plain\">);   </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    service.addEventListener(</code><code class=\"string\">'pause'</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(){</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(</code><code class=\"string\">'**************************** pause fired'</code><code class=\"plain\">);   </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    service.addEventListener(</code><code class=\"string\">'resume'</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(){</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(</code><code class=\"string\">'**************************** resume fired'</code><code class=\"plain\">);   </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.Properties.setBool(</code><code class=\"string\">'bind'</code><code class=\"plain\">, </code><code class=\"keyword\">true</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> count = Ti.App.Properties.getInt(</code><code class=\"string\">'inc'</code><code class=\"plain\">) || 0;</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (count &gt;= 10) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Stop the service</code></div>\n<div class=\"line\"><code class=\"plain\">    service.stop(serviceIntent);        </code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.Properties.setInt(</code><code class=\"string\">'inc'</code><code class=\"plain\">, ++count);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\n    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-DeclareaService\">\n        <h3 class=\"heading \"><span>Declare a Service</span></h3>\n    <p>\nFor both started and bound services, you need to declare the JavaScript file as a service in the <tt class=\" \">tiapp.xml</tt> file.    </p>\n    <p>\n<strong class=\" \">To declare a service:</strong>    </p>\n<ol class=\" \"><li class=\" \">    <p>\nAdd the <tt class=\" \">&lt;services&gt;</tt> element as a child of the <tt class=\" \">&lt;android&gt;</tt> element.    </p>\n</li><li class=\" \">    <p>\nFor each service, add a <tt class=\" \">&lt;service&gt;</tt> element as a child of the <tt class=\" \">&lt;services&gt;</tt> element.  Set the <tt class=\" \">url</tt> attribute to the URL of the JavaScript file and the <tt class=\" \">type</tt> attribute to <tt class=\" \">interval</tt>.  Currently, <tt class=\" \">interval</tt> is the only supported type, which indicates the code will be run at intervals.  The interval is set when creating the service intent.    </p>\n</li></ol><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">tiapp.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;android&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;services&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">            &lt;service url=</code><code class=\"string\">'someService.js'</code><code class=\"plain\"> type=</code><code class=\"string\">'interval'</code><code class=\"plain\">/&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;/services&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/android&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div>\n</div>\n</div>    <p>\n    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-StartedServices\">\n        <h3 class=\"heading \"><span>Started Services</span></h3>\n    <p>\nA started service is a service created <strong class=\" \">and </strong>started using the <tt class=\" \">Titanium.Android</tt> API.  The application creates an intent referencing the JavaScript code to run as a service, then starts the service.  The service self manages itself after it starts.    </p>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-CreateaServiceIntent\">\n        <h4 class=\"heading \"><span>Create a Service Intent</span></h4>\n    <p>\nTo create a started service, create a service intent with the <tt class=\" \">Titanium.Android.createServiceIntent()</tt> method.  Pass the method a dictionary with the <tt class=\" \">url</tt> property set to the URL of the JavaScript file that contains the code the application wants to run as a service.  You can optionally set the <tt class=\" \">startMode</tt> property to either:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<tt class=\" \">Titanium.Android.START_REDELIVER_INTENT</tt>: Indicates to restart the service with the original intent if the application is destroyed. (Default)    </p>\n</li><li class=\" \">    <p>\n<tt class=\" \">Titanium.Android.START_NOT_STICKY</tt>: Indicates not to restart the service if the application is destroyed.    </p>\n</li></ul>    <p>\nTo pass data to the service, use the Intent object's <tt class=\" \">putExtra()</tt> method to add extras to the intent.  For details, see <a class=\"document-link \" href=\"#!/guide/Android_Intents-section-43287298_AndroidIntents-AddExtraData\">Android Intents: Add Extra Data</a>.    </p>\n    <p>\nTo set the interval for the service, use the <tt class=\" \">putExtra</tt><tt class=\" \">()</tt> method, and set the property name to <tt class=\" \">interval</tt> and the value to how often to call the code in milliseconds.    </p>\n    <p>\nThe example below creates an intent to call the service every ten seconds.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var SECONDS = </code><code class=\"value\">10</code><code class=\"plain\">; </code><code class=\"comments\">// every 10 seconds</code></div>\n<div class=\"line\"><code class=\"plain\">var intent = Titanium.Android.createServiceIntent({</code></div>\n<div class=\"line\"><code class=\"plain\">  url: </code><code class=\"string\">'someService.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">intent.putExtra(</code><code class=\"string\">'interval'</code><code class=\"plain\">, SECONDS * </code><code class=\"value\">1000</code><code class=\"plain\">); </code><code class=\"comments\">// Needs to be milliseconds </code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-StartaStartedService\">\n        <h4 class=\"heading \"><span>Start a Started Service</span></h4>\n    <p>\nTo start a started service, pass the <tt class=\" \">Titanium.Android.startService()</tt> method a service intent object.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Titanium.Android.startService(intent);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-StopaStartedService\">\n        <h4 class=\"heading \"><span>Stop a Started Service</span></h4>\n    <p>\nTo stop a started service from the application, pass the <tt class=\" \">Titanium.Android.stopService()</tt> method the service intent object that was passed to the <tt class=\" \">startService()</tt> method.    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n        \n    <p>\nThe service can stop itself by retrieving a reference to itself and calling its <tt class=\" \">stop()</tt> method.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.Android.currentService.stop();</code></div>\n</div>\n</div>    </div>\n    \n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Titanium.Android.stopService(intent);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-MonitorStartedServices\">\n        <h4 class=\"heading \"><span>Monitor Started Services</span></h4>\n    <p>\nThe application can see if the service is still running by calling the <tt class=\" \">Titanium.Android.isServiceRunning()</tt> method and pass it the intent object that created the service.    </p>\n    <p>\nThe example below checks to see if the intent was used to start a service that is currently running.  If not, it will start the service.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (!Ti.Android.isServiceRunning(intent)) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Android.startService(intent); </code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">'Service is already running.'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\n    </p>\n    </div>\n    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-BoundServices\">\n        <h3 class=\"heading \"><span>Bound Services</span></h3>\n    <p>\nA bound service is a service only created using the <tt class=\" \">Titanium.Android</tt> API.  The application can manage the service using the <tt class=\" \">Titanium.Android.Service</tt> API to invoke the <tt class=\" \">start()</tt> and <tt class=\" \">stop()</tt> methods on it as well as bind some event callbacks to it.    </p>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-CreateaBoundService\">\n        <h4 class=\"heading \"><span>Create a Bound Service</span></h4>\n    <p>\nTo create a bound service, create a service intent with the <tt class=\" \">Titanium.Android.createServiceIntent()</tt> method, then pass the intent to the <tt class=\" \">Titanium.Android.createService()</tt> method to create a <tt class=\" \">Service</tt> object.    </p>\n    <p>\n<strong class=\" \">To create a service intent</strong>, pass the method a dictionary with the <tt class=\" \">url</tt> property set to the URL of the JavaScript file that contains the code the application wants to run as a service.  You can optionally set the <tt class=\" \">startMode</tt> property to either:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<tt class=\" \">Titanium.Android.START_REDELIVER_INTENT</tt>: Indicates to restart the service with the original intent if the application is destroyed. (Default)    </p>\n</li><li class=\" \">    <p>\n<tt class=\" \">Titanium.Android.START_NOT_STICKY</tt>: Indicates not to restart the service if the application is destroyed.    </p>\n</li></ul>    <p>\nTo pass data to the service, use the Intent object's <tt class=\" \">putExtra()</tt> method to add extras to the intent.  For details, see <a class=\"document-link \" href=\"#!/guide/Android_Intents-section-43287298_AndroidIntents-AddExtraData\">Android Intents: Add Extra Data</a>.    </p>\n    <p>\nTo set the interval for the service, use the <tt class=\" \">putExtra</tt><tt class=\" \">()</tt> method, and set the property name to <tt class=\" \">interval</tt> and the value to how often to call the code in milliseconds.    </p>\n    <p>\n<strong class=\" \">To create the Service object</strong>, pass the <tt class=\" \">Titanium.Android.createService()</tt> method the service intent object.    </p>\n    <p>\nThe example below creates an intent to call the service every ten seconds, then creates the service object.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var intent = Ti.Android.createServiceIntent({</code></div>\n<div class=\"line\"><code class=\"plain\">  url: </code><code class=\"string\">'someService.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">intent.putExtra(</code><code class=\"string\">'interval'</code><code class=\"plain\">, SECONDS * </code><code class=\"value\">1000</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var service = Ti.Android.createService(intent);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-4 \" id=\"43287937_AndroidServices-ManagetheBoundService\">\n        <h4 class=\"heading \"><span>Manage the Bound Service</span></h4>\n    <p>\nUse the <tt class=\" \">Titanium.Android.Service</tt> API to manage some aspects of the bound service.    </p>\n    <p>\n<strong class=\" \">To start or stop the service</strong>, call the Service object's <tt class=\" \">start()</tt> or <tt class=\" \">stop()</tt> methods, respectively.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">service.start();</code></div>\n<div class=\"line\"><code class=\"comments\">// Do stuff</code></div>\n<div class=\"line\"><code class=\"plain\">service.stop();</code></div>\n</div>\n</div>    <p>\n<strong class=\" \">To monitor when the service starts or stops</strong>, the application can bind event listeners to the <tt class=\" \">start</tt> and <tt class=\" \">stop</tt> events.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">service.addEventListener(</code><code class=\"string\">'start'</code><code class=\"plain\">, doSomething);</code></div>\n<div class=\"line\"><code class=\"plain\">service.addEventListener(</code><code class=\"string\">'stop'</code><code class=\"plain\">, doSomethingElse);</code></div>\n</div>\n</div>    <p>\n    </p>\n    <p>\n    </p>\n    </div>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43287937_AndroidServices-SimpleServiceExample\">\n        <h2 class=\"heading \"><span>Simple Service Example</span></h2>\n    <p>\nThis example shows a simple started service which does nothing other than write to logcat (the Android log). Not exciting, but it's a complete example from A to Z.    </p>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-WriteyourserviceJavascriptcode\">\n        <h3 class=\"heading \"><span>Write your service Javascript code</span></h3>\n    <p>\nRemember, these simple services execute code on an interval. The code that executes is defined by you in a JavaScript file, just like when you define other Titanium executable code. Create an application and add a file named (for this example) <tt class=\" \">logservice.js</tt> into the <tt class=\" \">app/lib</tt> folder for Alloy projects or <tt class=\" \">Resources</tt> folder for classic Titanium projects. Open the <tt class=\" \">logservice.js</tt> file in an editor and add the following code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Titanium.API.info(</code><code class=\"string\">'Hello World, I am a Service'</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\nYou can do all sorts of things in that JavaScript file, and everything you put in it will run every <strong class=\" \">N</strong> milliseconds.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-Updatethetiapp.xml\">\n        <h3 class=\"heading \"><span>Update the tiapp.xml</span></h3>\n    <p>\nYou need to let the Titanium builder know that this Javascript file you just created is meant to be the code that executes when a Service runs.    </p>\n<ol class=\" \"><li class=\" \">    <p>\nOpen the project's <tt class=\" \">tiapp.xml</tt> and add a <tt class=\" \">&lt;services&gt;</tt> element under the <tt class=\" \">&lt;android&gt;</tt> element.    </p>\n</li><li class=\" \">    <p>\nNext, add a <tt class=\" \">&lt;service&gt;</tt> element under the <tt class=\" \">&lt;services&gt;</tt> element.  Assign the <tt class=\" \">url</tt> attribute the name of the JavaScript file, which is <tt class=\" \">logservice.js</tt> and assign the <tt class=\" \">type</tt> attribute to <tt class=\" \">interval</tt>    </p>\n</li></ol><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;android xmlns:android=</code><code class=\"string\">\"http://schemas.android.com/apk/res/android\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;services&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">      &lt;service url=</code><code class=\"string\">\"logservice.js\"</code><code class=\"plain\"> type=</code><code class=\"string\">\"interval\"</code><code class=\"plain\">/&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/services&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;/android&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div>\n</div>\n</div>    <p>\nAt this point, you've successfully defined the service. If you were to build your app right now and check the generated <tt class=\" \">AndroidManifest.xml</tt> in the <tt class=\" \">build/android</tt> folder, you would see an entry for the service:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;service</code></div>\n<div class=\"line\"><code class=\"plain\">  android:name=</code><code class=\"string\">\"com.billdawson.logservicedemo.LogserviceService\"</code></div>\n<div class=\"line\"><code class=\"plain\">/&gt;</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-Writesomecodetostarttheservice\">\n        <h3 class=\"heading \"><span>Write some code to start the service</span></h3>\n    <p>\nAs we noted up in the introduction, one caveat about these simple services is that they are pretty much bound to the Titanium application in which you create them. In other words, the services will not get started and run successfully unless you start them from code inside the same application in which you define them. Modify your project's <tt class=\" \">app/alloy.js</tt> file for Alloy projects or <tt class=\" \">app.js</tt> file for classic Titanium projects to start the service.    </p>\n    <p>\nFor purposes of this example, all of the code examples that follow can just be put down at the bottom of your app's file so they run when the app starts.    </p>\n    <p>\nFirst, create an intent in which we specify the JavaScript file to start using the <tt class=\" \">url</tt> property, and the interval (in milliseconds) at which it should run the code in its JavaScript file. Use <tt class=\" \">Ti.Android.createServiceIntent()</tt> to make the intent, then add the interval information to it using the intent's <tt class=\" \">putExtra()</tt> method:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var SECONDS = </code><code class=\"value\">10</code><code class=\"plain\">; </code><code class=\"comments\">// every 10 seconds</code></div>\n<div class=\"line\"><code class=\"plain\">var intent = Titanium.Android.createServiceIntent({</code></div>\n<div class=\"line\"><code class=\"plain\">  url: </code><code class=\"string\">'logservice.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">intent.putExtra(</code><code class=\"string\">'interval'</code><code class=\"plain\">, SECONDS * </code><code class=\"value\">1000</code><code class=\"plain\">); </code><code class=\"comments\">// Needs to be milliseconds</code></div>\n</div>\n</div>    <p>\nWith the intent in hand, we need to tell Android to start the service defined by the intent:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Titanium.Android.startService(intent);</code></div>\n</div>\n</div>    <p>\nThat's it! Go ahead and start your application in an emulator or on your phone.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-Writesomecodetostoptheservice\">\n        <h3 class=\"heading \"><span>Write some code to stop the service</span></h3>\n    <p>\nNotice we did not write any code yet to actually <strong class=\" \">stop</strong> the service once it's running. You can do that by calling <tt class=\" \">Titanium.Android.stopService()</tt> by passing it an intent that has the same information (or even the same intent object). (You do not need to set the &quot;interval&quot; extra in the intent if you are just stopping the service.)    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var intent = Titanium.Android.createServiceIntent({</code></div>\n<div class=\"line\"><code class=\"plain\">  url: </code><code class=\"string\">'logservice.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Android.stopService(intent);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"43287937_AndroidServices-Testingnotes\">\n        <h3 class=\"heading \"><span>Testing notes</span></h3>\n    <p>\nWhile you are testing your service you can back out completely from the application, and the service should still continue to run and emit the &quot;Hello World&quot; statements to the log.  However, if you back out of the application then launch it again, the service will get started a <i class=\" \">second</i> time, because your <tt class=\" \">app.js</tt> code will run again and call <tt class=\" \">Titanium.Android.startService()</tt>. Behind the scenes, there is only one instance of the Service running (in Android terms, its <tt class=\" \">onCreate()</tt> has occurred only once, but it has been &quot;started&quot; twice, that is, its <tt class=\" \">onStart()</tt> has occurred twice). A new set of intervals will then queue up and your service code will run double the number of times. This may not be what you want, so you can call <tt class=\" \">Titanium.Android.isServiceRunning()</tt> by passing it the same intent that you would use to start the service. Then you can conditionally start it only if it is not already running.    </p>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43287937_AndroidServices-OtherExamples\">\n        <h2 class=\"heading \"><span>Other Examples</span></h2>\n    <p>\nSee the following for other examples of services:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nKitchenSink's <a class=\"external-link external-link\" href=\"http://github.com/appcelerator/titanium_mobile/blob/master/demos/KitchenSink/Resources/examples/android_services.js\" target=\"_blank\">android_services.js</a> script    </p>\n</li></ul>    </div>\n    <div class=\"section section-2 \" id=\"43287937_AndroidServices-FurtherReading\">\n        <h2 class=\"heading \"><span>Further Reading</span></h2>\n<ul class=\" \"><li class=\" \">    <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium.Android\">Titanium.Android API Reference</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"external-link external-link\" href=\"http://developer.android.com/guide/components/services.html\" target=\"_blank\">Android Developer: Services</a>    </p>\n</li></ul>    <p>\n    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43287937\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"Android Services"});