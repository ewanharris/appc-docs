Ext.data.JsonP['Tracking_Position_and_Heading']({"guide":" <!doctype html> <html> <head> <title>Tracking Position and Heading</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004915\" class=\"content\"> <h1>Tracking Position and Heading</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Objective\">Objective</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Contents\">Contents</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Developmentconsiderations\">Development considerations</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-iOSdevelopmentconsiderations\">iOS development considerations</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Androiddevelopmentconsiderations\">Android development considerations</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Windowsdevelopmentconsiderations\">Windows development considerations</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Usinglocationservicesinyourapp\">Using location services in your app</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Requestinglocationpermission\">Requesting location permission</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Detectiflocationservicesareavailable\">Detect if location services are available</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Configuretheaccuracyandfrequency\">Configure the accuracy and frequency</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-iOSgeoconfiguration\">iOS geo configuration</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Androidgeoconfiguration\">Android geo configuration</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-ObtainthecurrentGPSposition\">Obtain the current GPS position</a> </p> </li></ul></li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-ContinuallymonitortheGPSposition\">Continually monitor the GPS position</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Androidlifecycleevents\">Android lifecycle events</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_safe-id-VHJhY2tpbmdQb3NpdGlvbmFuZEhlYWRpbmctVXNldGhlZGV2aWNlJ3Njb21wYXNz\">Use the device&apos;s compass</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Forwardandreversegeocoding\">Forward and reverse geocoding</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-References\">References</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Tracking_Position_and_Heading-section-src-29004915_TrackingPositionandHeading-Summary\">Summary</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-29004915_TrackingPositionandHeading-Objective\"> <h2 class=\"heading\"><span>Objective</span></h2> <p>In this chapter, you&apos;ll learn how to use Titanium&apos;s Geolocation API to retrieve GPS positioning and heading information from mobile devices. You&apos;ll learn iOS, Android, and Windows Phone specifics that will help you best balance accuracy with battery consumption. And you&apos;ll learn how to manage Geolocation listeners with respect to your application&apos;s lifecycle. </p> </div> <div class=\"section section-2\" id=\"src-29004915_TrackingPositionandHeading-Contents\"> <h2 class=\"heading\"><span>Contents</span></h2> <p>The position and heading APIs are part of the <tt class=\"\">Ti.Geolocation</tt> module, which contains all the functions, properties, and events necessary to handle location information. That namespace is further divided into the <tt>Ti.Geolocation.Android</tt> namespaces, which provide Android-specific features. In the following sections, you&apos;ll learn how to use this API to perform the following activities: </p> <ul class=\"\"><li> <p>Detect if location services are available </p> </li><li> <p>Obtain the current GPS position </p> </li><li> <p>Continually monitor the GPS position </p> </li><li> <p>Use the device&apos;s compass </p> </li><li> <p>Configure location service properties </p> </li><li> <p>Forward and reverse geocoding </p> </li></ul> <p>You&apos;ll also learn best practices and caveats to consider when using location services in your apps. But first, let&apos;s dive into some platform specific considerations when using these services. </p> <div class=\"section section-3\" id=\"src-29004915_TrackingPositionandHeading-Developmentconsiderations\"> <h3 class=\"heading\"><span>Development considerations</span></h3> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-iOSdevelopmentconsiderations\"> <h4 class=\"heading\"><span>iOS development considerations</span></h4> <p>iOS users are prompted to grant or deny permission when your application attempts to use geolocation information. </p> <p>Starting with iOS 8, to use location services, add either the<tt class=\"\"> NSLocationWhenInUseUsageDescription</tt>or <tt class=\"\">NSLocationAlwaysUsageDescription</tt>key to the iOS plist section of the project&apos;s <tt class=\"\">tiapp.xml</tt> file. To localize the message, see <a class=\"document-link\" href=\"#!/guide/Internationalization-section-src-29004892_Internationalization-LocalizePropertyListKeys\">Internationalization: Localize Property List Keys</a>. </p> <p>Starting with iOS 11, to request Always permission you must replace the <tt class=\"\">NSLocationAlwaysUsageDescription </tt>with<tt> NSLocationAlwaysAndWhenInUseUsageDescription</tt>. This is because your users now have the ability to still choose &quot;When in use&quot; when the app is requesting the &quot;Always&quot; permission. In the flow of your app you need to take this into consideration. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">ti</code><code class=\"plain\">:app&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ios</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">plist</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">dict</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">key</code><code class=\"plain\">&gt;NSLocationAlwaysUsageDescription&lt;/</code><code class=\"keyword\">key</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">string</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> Specify the reason for accessing the user&apos;s location information.</code></div> <div class=\"line\"><code class=\"plain\"> This appears in the alert dialog when asking the user for permission to</code></div> <div class=\"line\"><code class=\"plain\"> access their location.</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">string</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">dict</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">plist</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">ios</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">ti</code><code class=\"plain\">:app&gt;</code></div> </div> </div> </div> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Androiddevelopmentconsiderations\"> <h4 class=\"heading\"><span>Android development considerations</span></h4> <p>In general, testing geolocation code should be done on a device so that you accurately and realistically test your app in an environment close to a real-world usage scenario. However, Emulators created using Android Studio 3 support GPS out the box too. </p> <p>Starting at <a class=\"external-link external-link\" href=\"https://docs.appcelerator.com/platform/latest/#!/guide/Titanium_SDK_7.1.0.GA_Release_Note\" target=\"_blank\">TiSDK 7.1.0.GA</a> there is support for <a class=\"external-link external-link\" href=\"https://developers.google.com/location-context/fused-location-provider/\" target=\"_blank\">FusedLocationProvider</a>. To enable this, the only thing you need to do is include the <a class=\"external-link external-link\" href=\"#!/api/Modules.PlayServices\">Ti.PlayServices</a> module in your app. This will enable battery efficient geolocation API&apos;s in your app. </p> </div> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Windowsdevelopmentconsiderations\"> <h4 class=\"heading\"><span>Windows development considerations</span></h4> <p>In order to enable location service for Windows Phone, you need to provide appropriate <tt class=\"\">location</tt> Capability in your <tt class=\"\">tiapp.xml</tt>. Windows Phone users are prompted to grant or deny permission when your application attempt to use geolocation information. In any cases Windows Phone user should enable location service on their device preliminarily (<tt class=\"\">Settings -&gt; location</tt> on Windows Phone, <tt>Settings -&gt; Privacy -&gt; Location</tt> on Windows 10 Mobile). </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;windows&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;manifest&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Capabilities&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;DeviceCapability Name=</code><code class=\"string\">&quot;location&quot;</code><code class=\"plain\"> /&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/Capabilities&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/manifest&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/windows&gt;</code></div> <div class=\"line\"><code class=\"plain\"> ...</code></div> <div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div> </div> </div> <p>For more information about geolocation configuration in <tt>tiapp.xml,</tt> see <a class=\"external-link external-link\" href=\"#!/guide/tiapp.xml_and_timodule.xml_Reference-section-29004921_tiapp.xmlandtimodule.xmlReference-Windows-specificsection\">Windows-specific section</a> in <a class=\"external-link external-link\" href=\"#!/guide/tiapp.xml_and_timodule.xml_Reference\">tiapp.xml and timodule.xml Reference</a>. </p> </div> </div> <div class=\"section section-3\" id=\"src-29004915_TrackingPositionandHeading-Usinglocationservicesinyourapp\"> <h3 class=\"heading\"><span>Using location services in your app</span></h3> <p>Using location services generally follows these three stages: </p> <ol class=\"\"><li> <p>Requesting Location Permission </p> </li><li> <p>Determine if location services are enabled and available. </p> </li><li> <p>Configure the accuracy and listener mechanisms to use. </p> </li><li> <p>Grab a one-time location or enable a location-listener to continually monitor a user&apos;s location. </p> </li><li> <p>With a location-listener, actively manage the listener in coordination with the app&apos;s lifecycle. </p> </li></ol> <p>Using location services can have a significant impact on a device&apos;s battery life, so it&apos;s important to use them in the most efficient manner possible. Power consumption is strongly influenced by the accuracy and frequency of location updates required by your application. The higher the accuracy you request, and the more frequently you request location updates, the more battery power that will be consumed. </p> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Requestinglocationpermission\"> <h4 class=\"heading\"><span>Requesting location permission</span></h4> <p>When you want to use Geolocation in your app you&apos;ll need to ask for permission of your user. On Android this needs to be requested starting version 6.0. Before Android 6.0 all was needed was the geolocation permission in the manifest. </p> <p>It is pretty straightforward to request permission. For iOS you need to configure your plist correctly as described at the iOS Development Considerations section. Before asking permission it is advised to check if the permission is already given. In the sample below you can see how to do all this, we&apos;re going to be requesting for permisson while the app is in use. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> hasLocationPermission = Ti.Geolocation.hasLocationPermissions(Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE);</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (!hasLocationPermission) {</code></div> <div class=\"line\"><code class=\"plain\">\tTi.Geolocation.requestLocationPermissions(Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// permission granted</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// permission refused</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p><sup class=\"\"> <i class=\"\">Note: Only on iOS is the attribute <tt>Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE </tt>is required. The property is ignored on other platforms.</i> </sup> </p> <p>On iOS you can find out why the permission has been refused. A very thourough example for requesting permissions was created in the 5.1.0 sample app, which is available on GitHub <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-developer-relations/appc-sample-ti510/blob/master/app/controllers/permissions.js#L159\" target=\"_blank\">https://github.com/appcelerator-developer-relations/appc-sample-ti510/blob/master/app/controllers/permissions.js</a> </p> </div> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Detectiflocationservicesareavailable\"> <h4 class=\"heading\"><span>Detect if location services are available</span></h4> <p>To determine whether or not location services will be available to you on the current mobile device, you simply need to check the boolean property <tt class=\"\">Ti.Geolocation.locationServicesEnabled</tt>. Keep in mind, though, that on Android 2.2 and above, a low-precision &quot;passive&quot; location provider is enabled at all times, even when the user disables both the GPS and Network location providers. Therefore, this method always returns <tt>true</tt> on such devices. With this in mind, the base skeleton of a locations based app might look something like this. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// perform other operations with Ti.Geolocation</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Configuretheaccuracyandfrequency\"> <h4 class=\"heading\"><span>Configure the accuracy and frequency</span></h4> <p>The location services systems of the underlying platforms are very different, so there are significant implementation differences between the platforms. The basic methods of requesting location information and receiving location updates are essentially the same on all platforms. However, the method of configuring the accuracy and frequency of location updates is different for each platform. </p> <div class=\"section section-5\" id=\"src-29004915_TrackingPositionandHeading-iOSgeoconfiguration\"> <h5 class=\"heading\"><span>iOS geo configuration</span></h5> <p>In iOS, the accuracy (and power consumption) of location services is primarily determined by the <tt>Ti.Geolocation.accuracy</tt> property setting. You can set this property to one of the following values: </p> <ul class=\"\"><li> <p>ACCURACY_BEST (highest accuracy and power consumption) </p> </li><li> <p>ACCURACY_NEAREST_TEN_METERS </p> </li><li> <p>ACCURACY_HUNDRED_METERS </p> </li><li> <p>ACCURACY_KILOMETER </p> </li><li> <p>ACCURACY_THREE_KILOMETERS (lowest accuracy and power consumption). </p> </li></ul> <p>(Note that the constants ACCURACY_HIGH and ACCURACY_LOW are Android-specific and may not be used with iOS.) </p> <p>Based on the accuracy you choose, iOS uses its own logic to select location providers and filter location updates to provide location updates that meet your accuracy requirements. You can further limit power consumption on iOS by setting the <tt>Ti.Geolocation.distanceFilter</tt> property to eliminate position updates when the user is not moving. That property accepts a distance in meters; when the user has moved approximately that distance, your app will receive location update events. </p> <ul class=\"\"><li class=\"\"> <p><strong class=\"\">accuracy</strong> - The target accuracy of all location data received. The following <tt>Ti.Geolocation</tt>constants represent the valid values for this property: </p> <ul class=\"\"><li class=\"\"> <p><tt>ACCURACY_BEST</tt> - Location data will be of the highest possible accuracy of which the device is capable </p> </li><li class=\"\"> <p><tt>ACCURACY_HUNDRED_METERS</tt> - Location data will be accurate within 100 meters </p> </li><li class=\"\"> <p><tt>ACCURACY_KILOMETER</tt> - Location data will be accurate within 1 kilometer </p> </li><li class=\"\"> <p><tt>ACCURACY_NEAREST_TEN_METERS</tt> - Location data will be accurate within 10 meters </p> </li><li class=\"\"> <p><tt>ACCURACY_THREE_KILOMETERS_</tt> - Location data will be accurate within 3 kilometers </p> </li></ul></li><li class=\"\"> <p><strong class=\"\">distanceFilter</strong> - The minimum change of position (in meters) before a <tt>location</tt> event is fired. The default is 0, meaning that location events are continuously generated. </p> </li><li class=\"\"> <p><strong class=\"\">headingFilter</strong> - The minium change of heading (in degrees) before a <tt>heading</tt> event is fired. The default is 0, meaning that heading events are continuously generated. </p> </li><li class=\"\"> <p><strong class=\"\">preferredProvider</strong> - Allows you to specify the preferred method for receiving a location. The following <tt>Ti.Geolocation</tt>constants represent your possible choices: </p> <ul class=\"\"><li class=\"\"> <p><tt>PROVIDER_NETWORK</tt> - Give the network based location provider preference </p> </li><li class=\"\"> <p><tt>PROVIDER_GPS</tt> - Give the GPS location preference </p> </li></ul></li></ul> <p>Using the event-driven location example at the beginning of this chapter, let&apos;s modify it to use some of the above properties. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Geolocation configuration on iOS</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Geolocation configuration on iOS\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.purpose = </code><code class=\"string\">&apos;Get Current Location&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_BEST;</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.distanceFilter = 10;</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.preferredProvider = Ti.Geolocation.PROVIDER_GPS;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.addEventListener(</code><code class=\"string\">&apos;location&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Error: &apos;</code><code class=\"plain\"> + e.error);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.coords);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-5\" id=\"src-29004915_TrackingPositionandHeading-Androidgeoconfiguration\"> <h5 class=\"heading\"><span>Android geo configuration</span></h5> <p>Since Android offers a much richer geolocation model, with multiple location providers, distance filters, update frequencies, and so forth we offer a method of using manual and simple mode for geolocation. </p> <ul class=\"\"><li class=\"\"> <p><strong class=\"\">Manual mode</strong> gives developers low-level control of location updates, including enabling individual location providers and filtering updates, for the best combination of accuracy and battery life. Manual mode is used when the <tt class=\"\">Titanium.Geolocation.Android.manualMode</tt> flag is set to <tt class=\"\">true</tt>. In manual mode, the accuracy property is not used, and all configuration is done through the <tt>Titanium.Geolocation.Android</tt> module. </p> </li><li class=\"\"> <p><strong class=\"\">Simple mode</strong> provides a compromise mode that provides adequate support for undemanding location applications without requiring developers to write a lot of Android-specific code. Setting <tt>Ti.Geolocation.accuracy</tt> to either ACCURACY_HIGH or ACCURACY_LOW enables simple mode. In this mode the platform handles enabling and disabling location providers and filtering location updates. </p> </li></ul> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// demonstrates manual mode:</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> providerGps = Ti.Geolocation.Android.createLocationProvider({</code></div> <div class=\"line\"><code class=\"plain\"> name: Ti.Geolocation.PROVIDER_GPS,</code></div> <div class=\"line\"><code class=\"plain\"> minUpdateDistance: 0.0,</code></div> <div class=\"line\"><code class=\"plain\"> minUpdateTime: 0</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.Android.addLocationProvider(providerGps);</code></div> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.Android.manualMode = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> locationCallback = </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!e.success || e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;error:&apos;</code><code class=\"plain\"> + JSON.stringify(e.error));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;coords: &apos;</code><code class=\"plain\"> + JSON.stringify(e.coords));</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"plain\">Titanium.Geolocation.addEventListener(</code><code class=\"string\">&apos;location&apos;</code><code class=\"plain\">, locationCallback);</code></div> </div> </div> <p>See the <a class=\"external-link external-link\" href=\"https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Geolocation.Android\" target=\"_blank\">https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Geolocation.Android</a> for further Android-specific information. </p> </div> <div class=\"section section-5\" id=\"src-29004915_TrackingPositionandHeading-ObtainthecurrentGPSposition\"> <h5 class=\"heading\"><span>Obtain the current GPS position</span></h5> <p>With your app configured to use the appropriate level of platform-specific geolocation configuration, you&apos;re ready to work with location data. Many apps only infrequently need to use location services. Whether it&apos;s at app startup, on a button click, or at a timed interval, developers have a multitude of opportunities to actively query for location information. </p> <p>Let&apos;s take a look at a very basic example. After asserting that location services are enabled and permissions are requested, the <tt class=\"\">Ti.Geolocation.getCurrentPosition()</tt> function is used to query for location information. This function takes a single parameter; a callback function whose event object contains the requested location in its <tt>coords</tt> property. This is an asynchronous call as the GPS functionality may take a moment to work, especially if this is the first time your app is accessing location. Also worth noting is that the location services might return a cached location (depending on the platform and the configuration choices you have made). </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.Geolocation.getCurrentPosition(</code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.error(</code><code class=\"string\">&apos;Error: &apos;</code><code class=\"plain\"> + e.error);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.coords);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The output for a successful execution of the above app would look something like this: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;accuracy&quot;</code><code class=\"plain\">: 100,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;altitude&quot;</code><code class=\"plain\">: 0,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;altitudeAccuracy&quot;</code><code class=\"plain\">: </code><code class=\"keyword\">null</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;heading&quot;</code><code class=\"plain\">: 0,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;latitude&quot;</code><code class=\"plain\">: 40.493781233333333,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;longitude&quot;</code><code class=\"plain\">: -80.056671</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;speed&quot;</code><code class=\"plain\">: 0,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;timestamp&quot;</code><code class=\"plain\">: 1318426498331</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004915_TrackingPositionandHeading-ContinuallymonitortheGPSposition\"> <h3 class=\"heading\"><span>Continually monitor the GPS position</span></h3> <p>Often you will want to know where a mobile device is at all times. The most common example of this is navigation for driving directions. To have the same constant awareness of a device&apos;s position in Titanium, you simply need to monitor the <tt class=\"\">location</tt> event with the <tt>Ti.Geolocation</tt> module. </p> <p>Here&apos;s a simple case showing how location data can be handled via event listener. You&apos;ll notice that the data is handled in a nearly identical manner to the <tt>Ti.Geolocation.getCurrentPosition()</tt> example. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.addEventListener(</code><code class=\"string\">&apos;location&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Error: &apos;</code><code class=\"plain\"> + e.error);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.coords);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>As with the <tt class=\"\">Ti.Geolocation.getCurrentPosition()</tt> example, the location data is returned in the event object&apos;s <tt>coords</tt> property. The listener callback will be executed every time your device detects a new location. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>Continually monitoring the GPS for location will consume a mobile device&apos;s battery much faster than usual. Be sure that you actually need to be constantly handling the device&apos;s location before using this method. If you do, be sure to remove the <tt class=\"\">location</tt> event listener via <tt>Ti.Geolocation.removeEventListener()</tt> when you are not actively using the location information. </p> </div> <div class=\"section section-4\" id=\"src-29004915_TrackingPositionandHeading-Androidlifecycleevents\"> <h4 class=\"heading\"><span>Android lifecycle events</span></h4> <p>When monitoring location events continually in Android, apps will continue to receive events even when in the background. As mentioned above, this can be a major drain on the battery life of a mobile device. While this is sometimes the desired behavior, most apps only need location data while active. </p> <p>In order to manage our location events such that we only receive them while our app is active, we need to take advantage of Titanium&apos;s access to the Android lifecycle events. There are three events of significance, each of which can be handled via <tt class=\"\">addEventListener()</tt> on the <tt>Ti.Android.currentActivity</tt> object: </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">destroy</tt> - This event is fired when your activity is destroyed. Location events should <i>always</i> be removed in this event. </p> </li><li class=\"\"> <p><tt>pause</tt> - This event is fired when an activity moves to the background. If you intend to suspend your location data handling when your app is in the background, you need to remove location event listeners in this event. </p> </li><li class=\"\"> <p><tt class=\"\">resume</tt> - This event is fired when an activity comes to the foreground. If you previously removed location events in a <tt>pause</tt> event, this is where you would add them again to reenable them. </p> </li></ul> <p>Below is a demonstration of how you would handle these events in order to only manage <tt class=\"\">location</tt> events when your app is active. The key part to note is that pausing and resuming your <tt class=\"\">location</tt> event handling is the responsibility of the Android Activity object accessible through the Titanium API as <tt>Ti.Android.currentActivity</tt>. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> locationAdded = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> handleLocation = </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.coords);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> addHandler = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!locationAdded) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.addEventListener(</code><code class=\"string\">&apos;location&apos;</code><code class=\"plain\">, handleLocation);</code></div> <div class=\"line\"><code class=\"plain\"> locationAdded = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> removeHandler = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (locationAdded) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.removeEventListener(</code><code class=\"string\">&apos;location&apos;</code><code class=\"plain\">, handleLocation);</code></div> <div class=\"line\"><code class=\"plain\"> locationAdded = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_BEST;</code></div> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.preferredProvider = Ti.Geolocation.PROVIDER_GPS;</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> addHandler();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> activity = Ti.Android.currentActivity;</code></div> <div class=\"line\"><code class=\"plain\"> activity.addEventListener(</code><code class=\"string\">&apos;destroy&apos;</code><code class=\"plain\">, removeHandler);</code></div> <div class=\"line\"><code class=\"plain\"> activity.addEventListener(</code><code class=\"string\">&apos;pause&apos;</code><code class=\"plain\">, removeHandler);</code></div> <div class=\"line\"><code class=\"plain\"> activity.addEventListener(</code><code class=\"string\">&apos;resume&apos;</code><code class=\"plain\">, addHandler);</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004915_safe-id-VHJhY2tpbmdQb3NpdGlvbmFuZEhlYWRpbmctVXNldGhlZGV2aWNlJ3Njb21wYXNz\"> <h3 class=\"heading\"><span>Use the device&apos;s compass</span></h3> <p>A mobile device&apos;s compass can be used to determine its heading. By using heading, the added dimension of direction can be added to a location based mobile app. With this addition, developers can add features like more robust navigation or even augmented reality. </p> <p>Just as with location, Titanium has events and functions for both continual and one-time monitoring of heading. Also, check the API docs for platform-specific configuration information of heading options. For continual monitoring, the <tt class=\"\">heading</tt> event needs to be registered with the <tt class=\"\">Ti.Geolocation</tt> module. In the case of needing only the current heading, a simple call to the <tt>Ti.Geolocation.getCurrentHeading()</tt> function is necessary. As you may have noticed, this is very similar to how location is handled. </p> <p>The below includes both of the methods for determining heading mentioned above. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.purpose = </code><code class=\"string\">&apos;Get Current Heading&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// make a single request for the current heading</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.getCurrentHeading(</code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.heading);</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Set &apos;heading&apos; event for continual monitoring</code></div> <div class=\"line\"><code class=\"plain\"> Ti.Geolocation.addEventListener(</code><code class=\"string\">&apos;heading&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Error: &apos;</code><code class=\"plain\"> + e.error);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e.heading);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Please enable location services&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The console output of your program will contain the heading information, which will be sent continuously from the <tt>heading</tt> event. The data for each heading entry will be structured in the following manner. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;accuracy&quot;</code><code class=\"plain\">: 3,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;magneticHeading&quot;</code><code class=\"plain\">: 34.421875, </code><code class=\"comments\">// degrees east of magnetic north</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;timestamp&quot;</code><code class=\"plain\">: 1318447443692,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;trueHeading&quot;</code><code class=\"plain\">: 43.595027923583984, </code><code class=\"comments\">// degrees east of true north</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;type&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;heading&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;x&quot;</code><code class=\"plain\">: 34.421875,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;y&quot;</code><code class=\"plain\">: -69.296875,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;z&quot;</code><code class=\"plain\">: -1.140625</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004915_TrackingPositionandHeading-Forwardandreversegeocoding\"> <h3 class=\"heading\"><span>Forward and reverse geocoding</span></h3> <p>Another feature of location services that is built into the Titanium API is geocoding. This is the process of converting an address into a geographic location (forward geocoding), or vice versa (reverse geocoding). For example, let&apos;s say we wanted to know the latitude and longitude of the Appcelerator headquarters in Mountain View, California. All we need to do is use the <tt>Ti.Geolocation.forwardGeocoder()</tt> function, giving it the address and a callback as parameters. Here&apos;s the code: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.forwardGeocoder(</code><code class=\"string\">&apos;440 Bernardo Ave Mountain View CA&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e);</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <p>And here is the output of a forward geocoding of Appcelerator HQ. As you can see, it delivers the geographic location of the given address in latitude and longitude. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;accuracy&quot;</code><code class=\"plain\">: 1,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;latitude&quot;</code><code class=\"plain\">: 37.389071,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;longitude&quot;</code><code class=\"plain\">: -122.050156,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;success&quot;</code><code class=\"plain\">: 1</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Now let&apos;s say we just have latitude and longitude and we want to figure out what places of interest are in the area. This case can occur if you accept these coordinates from user input, or if you want to get further information in your <tt class=\"\">location</tt> events. To do so, we use the <tt>Ti.Geolocation.reverseGeocoder()</tt> function. To this function we pass a latitude, longitude, and callback function. Let&apos;s see what we get when we use the random coordinates (50,50), as in the below sample. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">Ti.Geolocation.reverseGeocoder(50, 50, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(e);</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <p>Here&apos;s the output: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;places&quot;</code><code class=\"plain\">: [</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;address&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;, 418020 Dzhany-Kuduk, , Kazakhstan&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;city&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Oral&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;country&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Kazakhstan&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;country_code&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;KZ&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;latitude&quot;</code><code class=\"plain\">: 50.0,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;longitude&quot;</code><code class=\"plain\">: 50.0,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;street&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;zipcode&quot;</code><code class=\"plain\">: 418020</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> ],</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;success&quot;</code><code class=\"plain\">: 1</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>While the above output shows only one place, you&apos;ll notice that the <tt class=\"\">places</tt> property is an array. This means that on any given call to <tt class=\"\">Ti.Gelocation.reverseGeocoder()</tt> you may receive a number of entries in the <tt>places</tt> property, if multiple places are found in the area of your query. </p> </div> <div class=\"section section-3\" id=\"src-29004915_TrackingPositionandHeading-References\"> <h3 class=\"heading\"><span>References</span></h3> <ul class=\"\"><li> <p><a class=\"external-link external-link\" href=\"http://www.w3.org/TR/geolocation-API/\" target=\"_blank\">W3C Geolocation API specification</a> </p> </li></ul> </div> </div> <div class=\"section section-2\" id=\"src-29004915_TrackingPositionandHeading-Summary\"> <h2 class=\"heading\"><span>Summary</span></h2> <p>In this chapter we learned how we can leverage a mobile device&apos;s native location services to add the context of a physical location to our apps. Using Titanium&apos;s APIs we are able to proactively query or passively listen for a device&apos;s current GPS position and heading. By using the configuration properties found in the <tt class=\"\">Ti.Geolocation</tt> module like <tt class=\"\">accuracy</tt> and <tt>distanceFilter</tt> we can further refine a location based experience. </p> <p>Finally, we learned how to use additional location based features like forward and reverse geocoding to get even more location details. In the next chapter, we&apos;ll learn how we can use the native mapping functionality of mobile devices via the <tt>Titanium.Maps</tt> module. We&apos;ll be able to take the techniques learned in this chapter and apply them to the next in order to create a visual representation of our location data. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004915\"><span>Edit</span></a> </div> </body> </html> ","title":"Tracking Position and Heading"});