Ext.data.JsonP['iOS_Hyperloop_Programming_Guide']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>iOS Hyperloop Programming Guide</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"46253491\" class=\"content\">\n            <h1>iOS Hyperloop Programming Guide</h1>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Requirements\">Requirements</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Classes\">Classes</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Instantiation\">Instantiation</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-MethodsandProperties\">Methods and Properties</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Namedmethods\">Named methods</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Constants,EnumerationsandFunctions\">Constants, Enumerations and Functions</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Casting\">Casting</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Blocks\">Blocks</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Functionpointers\">Function pointers</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Creatingyourownclasses\">Creating your own classes</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Usingthird-partylibraries\">Using third-party libraries</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-CocoaPods\">CocoaPods</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Custom\">Custom</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-UsingSwift\">Using Swift</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-CustomizingyourXcodebuild\">Customizing your Xcode build</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Addingathird-partyframework\">Adding a third-party framework</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Hyperloop_Programming_Guide-section-46253491_iOSHyperloopProgrammingGuide-Resources\">Resources</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Requirements\">\n        <h2 class=\"heading \"><span>Requirements</span></h2>\n    <p>\nYou&rsquo;ll need to have the following minimum requirements to use Hyperloop for iOS:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nTitanium 5.4.0+    </p>\n</li><li class=\" \">    <p>\niOS 9.0 SDK    </p>\n</li></ul>    <p>\nHyperloop only works with Titanium applications that are registered with the platform. If you are using a Titanium project that hasn&rsquo;t yet been registered, you can register it with the following command: <tt class=\" \">appc new --import</tt>.    </p>\n    <p>\nIf you&rsquo;d like to experience Hyperloop on your application before registering your application, you can use the following demo GUID in your tiapp.xml: <tt class=\" \">11111111-1111-1111-1111- 111111111111</tt>. However, when using a demo GUID, your application will only operate on the simulator.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Classes\">\n        <h2 class=\"heading \"><span>Classes</span></h2>\n    <p>\n    <span style=\"color: #373d49;\">\nClasses in Hyperloop map to the underlying classes defined in Objective-C. For example, if you have a class such as     </span>\n    <span style=\"color: #c7254e;\">\nUIView     </span>\n    <span style=\"color: #373d49;\">\ndefined in the     </span>\n    <span style=\"color: #c7254e;\">\nUIKit     </span>\n    <span style=\"color: #373d49;\">\nframework, you would reference it using a standard require such as:    </span>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var UIView = require(</code><code class=\"string\">'UIKit/UIView'</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\n    <span style=\"color: #373d49;\">\nThis will return the     </span>\n    <span style=\"color: #c7254e;\">\nUIView     </span>\n    <span style=\"color: #373d49;\">\nclass object. Meaning, it&rsquo;s not an instance of a     </span>\n    <span style=\"color: #c7254e;\">\nUIView     </span>\n    <span style=\"color: #373d49;\">\n, but the     </span>\n     <span style=\"color: #c7254e;\">\nUIView     </span>\n    <span style=\"color: #373d49;\">\nclass itself (or in Objective-C parlance, the interface defined with     </span>\n    <span style=\"color: #c7254e;\">\n@interface    </span>\n     <span style=\"color: #373d49;\">\n).    </span>\n    </p>\n    <p>\n    <span style=\"color: #373d49;\">\nOnce you have the Class reference returned from     </span>\n    <span style=\"color: #c7254e;\">\nrequire    </span>\n     <span style=\"color: #373d49;\">\n, you can call normal JavaScript property and functions against it. Remember, at this point calling functions or properties against the class object above will be accessing Class level Objective-C methods (not instance level).    </span>\n    </p>\n    <p>\n    <span style=\"color: #373d49;\">\nFor example, you could get the     </span>\n    <span style=\"color: #c7254e;\">\nlayerClass     </span>\n    <span style=\"color: #373d49;\">\nof the     </span>\n    <span style=\"color: #c7254e;\">\nUIView     </span>\n    <span style=\"color: #373d49;\">\nusing the example:    </span>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> layerClass = UIView.layerClass;</code></div>\n</div>\n</div>    <p>\n    <span style=\"color: #373d49;\">\nYou can use layerClass now because it is defined by the Class method.    </span>\n    </p>\n    <p>\n    <span style=\"color: #373d49;\">\n<br/>    </span>\n    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Instantiation\">\n        <h2 class=\"heading \"><span>Instantiation</span></h2>\n    <p>\n    <span style=\"color: #373d49;\">\nTo instantiate a native Class and create an instance, you can use the normal     </span>\n<tt class=\" \">alloc init </tt>    <span style=\"color: #373d49;\">\nstyle pattern from Objective-C:     </span>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = UIView.alloc().init();</code></div>\n</div>\n</div>    <p>\n    <span style=\"color: #373d49;\">\n<br/>    </span>\n    </p>\n    <p>\n    <span style=\"color: #373d49;\">\nOr, to simplify and make it more standard JavaScript convention, use     </span>\n<tt class=\" \">new </tt>    <span style=\"color: #373d49;\">\n: <br/>     </span>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = </code><code class=\"keyword\">new</code><code class=\"plain\"> UIView();</code></div>\n</div>\n</div>    <p>\n    <span style=\"color: #373d49;\">\nThis is the equivalent of the <tt class=\" \">alloc init</tt> example above. When constructing an instance using <tt class=\" \">new</tt>, it will always call the default initializer that is designated as <tt class=\" \">init</tt>. If you have a special initializer that takes arguments, you can use the following as you would in Objective-C:    </span>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = UIView.alloc().initWithFrame(CGRectMake(0,0,100,100));</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-MethodsandProperties\">\n        <h2 class=\"heading \"><span>Methods and Properties</span></h2>\n    <p>\nMethods is Objective-C are mapped to JavaScript functions. Properties in Objective-C are mapped to JavaScript property accessors.    </p>\n    <p>\nFor example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">@interface UIView : UIControl</code></div>\n<div class=\"line\"><code class=\"plain\">@property UIColor * backgroundColor;</code></div>\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)addSubview:(id)view;</code></div>\n<div class=\"line\"><code class=\"plain\">@end</code></div>\n</div>\n</div>    <p>\nWould map to the following in JavaScript:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">view.backgroundColor = UIColor.redColor();</code></div>\n<div class=\"line\"><code class=\"plain\">view.addSubview(label);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Namedmethods\">\n        <h2 class=\"heading \"><span>Named methods</span></h2>\n    <p>\nIf you have a selector with multiple parameters, the name of the function will be slightly different since JavaScript cannot receive multiple parameters as part of a function call. For example, to send a message with the selector <tt class=\" \">addAttribute:value:range:</tt> you would use the function named <tt class=\" \">addAttributeValueRange</tt> instead. Hyperloop will camel case each receiver name in the selector and remove the &quot;:&quot; character to formulate the name of the method. Arguments should then be passed to the function in the same order as you would in Objective-C.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Constants,EnumerationsandFunctions\">\n        <h2 class=\"heading \"><span>Constants, Enumerations and Functions</span></h2>\n    <p>\nConstants, enumerations, and functions defined in the Framework are available in the Framework package. For example, to reference the enum <tt class=\" \">UISemanticContentAttribute</tt> you would reference it such as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> UISemanticContentAttributeUnspecified = require(</code><code class=\"string\">'UIKit'</code><code class=\"plain\">).UISemanticContentAtt</code></div>\n<div class=\"line\"><code class=\"plain\">ributeUnspecified;</code></div>\n<div class=\"line\"><code class=\"plain\">view.semanticContentAttribute = UISemanticContentAttributeUnspecified;</code></div>\n</div>\n</div>    <p>\nThe constants, enumerations and functions will be read-only properties of the UIKit framework.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Casting\">\n        <h2 class=\"heading \"><span>Casting</span></h2>\n    <p>\nSometimes interfaces define generic return types such as <tt class=\" \">NSObject</tt> or <tt class=\" \">id</tt> and you will need to cast them to a different type to then reference methods and properties of the class. You can use the special class function <tt class=\" \">cast</tt> on any Class to return a casted object. For example, suppose the result of the function returned an id but you know the implementation is actually a <tt class=\" \">UIView</tt>. You could use the following:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = UIView.cast(object);</code></div>\n<div class=\"line\"><code class=\"plain\">view.backgroundColor = UIColor.redColor();</code></div>\n</div>\n</div>    <p>\n<strong class=\" \">Be careful with casting</strong>: If you cast an object which is actually something different, you will experience an error and likely a crash. You can also cast a Titanium UI Component into its equivalent. For example, this would work:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> tiView = Ti.UI.createView( { backgroundColor : </code><code class=\"string\">\"red\"</code><code class=\"plain\"> } );</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> nativeView = UIView.cast(tiView);</code></div>\n<div class=\"line\"><code class=\"plain\">console.log(</code><code class=\"string\">'color should be red'</code><code class=\"plain\">, nativeView.backgroundColor);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Blocks\">\n        <h2 class=\"heading \"><span>Blocks</span></h2>\n    <p>\nBlocks in Hyperloop are translated into JavaScript functions.    </p>\n    <p>\nFor example, to animate a view which normally takes a block:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">UIView.animateWithDurationAnimationsCompletion(1.0, </code><code class=\"keyword\">function</code><code class=\"plain\"> () {</code></div>\n<div class=\"line\"><code class=\"plain\">\tview.layer.opacity = 0.0;</code></div>\n<div class=\"line\"><code class=\"plain\">\t}, </code><code class=\"keyword\">function</code><code class=\"plain\"> (done) {</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div>    <p>\n    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Functionpointers\">\n        <h2 class=\"heading \"><span>Function pointers</span></h2>\n    <p>\nCurrently, function pointers are not currently supported in the latest version.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Creatingyourownclasses\">\n        <h2 class=\"heading \"><span>Creating your own classes</span></h2>\n    <p>\nHyperloop provides you the ability to dynamically create your own Objective-C classes at runtime. Once created, these classes can be used as normal in either Hyperloop or passed to native calls. Let&rsquo;s create a simple custom <tt class=\" \">UIView</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> MyView = Hyperloop.defineClass(</code><code class=\"string\">'MyClass'</code><code class=\"plain\">, </code><code class=\"string\">'UIView'</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\n    </p>\n    <p>\nThis will create a new class in the Objective-C runtime named <tt class=\" \">MyClass</tt> which will extend UIView which is equivalent to the following code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">@interface MyClass : UIView @end</code></div>\n</div>\n</div>    <p>\nYou can also pass an Array or String as the third argument which are the protocols to implement for the new class.    </p>\n    <p>\nYou can now add methods:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">MyView.addMethod({</code></div>\n<div class=\"line\"><code class=\"plain\">\tselector: </code><code class=\"string\">'drawRect:'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tinstance: </code><code class=\"keyword\">true</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\targuments: [</code><code class=\"string\">'CGRect'</code><code class=\"plain\">],</code></div>\n<div class=\"line\"><code class=\"plain\">\tcallback: </code><code class=\"keyword\">function</code><code class=\"plain\"> (rect) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t</code><code class=\"comments\">// this code is executed when drawRect: is called</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div>    <p>\nHyperloop supports the following set of properties for adding methods:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<tt class=\" \">arguments</tt> can be either an Array or String of argument types (which can be either Objective-C encoding types or general type names such as <tt class=\" \">float</tt> or <tt class=\" \">int</tt>).    </p>\n</li><li class=\" \">    <p>\n<tt class=\" \">returnType</tt> can be a String return type (which can be either Objective-C encoding types or general type names such as <tt class=\" \">float</tt> or <tt class=\" \">int</tt>). If no return is required (a <tt class=\" \">void</tt> return type), you can omit the <tt class=\" \">returnType</tt> property altogether and void will be implied.    </p>\n</li></ul>    <p>\nAnother example with multiple arguments using simplified types:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">MyView.addMethod({</code></div>\n<div class=\"line\"><code class=\"plain\">\tselector: </code><code class=\"string\">'foo:bar:hello:'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tinstance: </code><code class=\"keyword\">true</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\treturnType: </code><code class=\"string\">'void'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\targuments: [</code><code class=\"string\">'int'</code><code class=\"plain\">, </code><code class=\"string\">'float'</code><code class=\"plain\">, </code><code class=\"string\">'id'</code><code class=\"plain\">],</code></div>\n<div class=\"line\"><code class=\"plain\">\tcallback: </code><code class=\"keyword\">function</code><code class=\"plain\"> (a, b, c) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div>    <p>\nOnce you have defined your class, you would just instantiate it as normal.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> myview = </code><code class=\"keyword\">new</code><code class=\"plain\"> MyView();</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 column\" id=\"46253491_iOSHyperloopProgrammingGuide-Usingthird-partylibraries\">\n        <h2 class=\"heading column\"><span>Using third-party libraries</span></h2>\n    <p>\nYou can use Third-party libraries in Hyperloop as if they were APIs defined in Cocoa.    </p>\n    <div class=\"section section-3 \" id=\"46253491_iOSHyperloopProgrammingGuide-CocoaPods\">\n        <h3 class=\"heading \"><span>CocoaPods</span></h3>\n    <p>\nHyperloop supports CocoaPods as a way to manage Third-party dependencies in your Hyperloop enabled project.    </p>\n    <p>\nYou must first install CocoaPods if you do not already have it installed. You can install using: <tt class=\" \">sudo gem install cocoapods</tt>    </p>\n    <p>\nOnce you have CocoaPods installed you can create a Podfile in your Titanium project directory such as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">platform :ios, </code><code class=\"string\">'7.0'</code></div>\n<div class=\"line\"><code class=\"plain\">target </code><code class=\"string\">'MyProject'</code><code class=\"plain\"> </code><code class=\"keyword\">do</code></div>\n<div class=\"line\"><code class=\"plain\">end</code></div>\n</div>\n</div>    <p>\nNote that <tt class=\" \">MyProject</tt> should be the name of your Titanium project.    </p>\n    <p>\nOnce you have a <tt class=\" \">Podfile</tt>, you can add dependencies. For example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">platform :ios, </code><code class=\"string\">'7.0'</code></div>\n<div class=\"line\"><code class=\"plain\">target </code><code class=\"string\">'Hyperloop_Sample'</code><code class=\"plain\"> </code><code class=\"keyword\">do</code></div>\n<div class=\"line\"><code class=\"plain\">\tpod </code><code class=\"string\">'JBChartView'</code></div>\n<div class=\"line\"><code class=\"plain\">end</code></div>\n</div>\n</div>    <p>\nWhich will import the JBChartView framework as a dependency.    </p>\n    <p>\nThat&rsquo;s it! The Hyperloop compiler will do the rest &ndash; managing pulling down the required dependencies, compiling them and integrating them into the Xcode build.    </p>\n    <p>\nLet&rsquo;s now use the imported project:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> JBBarChartView = require(</code><code class=\"string\">'JBChartView/JBBarChartView'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> chart = </code><code class=\"keyword\">new</code><code class=\"plain\"> JBBarChartView();</code></div>\n<div class=\"line\"><code class=\"plain\">chart.minimumValue = 1;</code></div>\n<div class=\"line\"><code class=\"plain\">chart.maximumValue = 100;</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"46253491_iOSHyperloopProgrammingGuide-Custom\">\n        <h3 class=\"heading \"><span>Custom</span></h3>\n    <p>\nIn addition to CocoaPods, you can include third-party or first-party custom code by including a reference in <tt class=\" \">appc.js</tt> under the <tt class=\" \">thirdparty</tt> property. For example, to include custom objective-c from the project&rsquo;s src directory you could provide:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">module.exports = {</code></div>\n<div class=\"line\"><code class=\"plain\">\thyperloop: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tios: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tthirdparty: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t</code><code class=\"string\">'MyFramework'</code><code class=\"plain\">: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tsource: [</code><code class=\"string\">'src'</code><code class=\"plain\">],</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\theader: </code><code class=\"string\">'src'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tresource: </code><code class=\"string\">'src'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\n    </p>\n<ul class=\" \"><li class=\" \">    <p>\nThe <tt class=\" \">source</tt> property can be either an Array or String of source directories to include in the compile. This is optional.    </p>\n</li><li class=\" \">    <p>\nThe <tt class=\" \">header</tt> property can be either an Array or String of header directories to include in the compile. This is required.    </p>\n</li><li class=\" \">    <p>\nThe <tt class=\" \">resource</tt> property can be either an Array or String of resource directories to search for resources or files to compile (images, story boards, xibs, etc). These files will be flattened and copied directly into the root of the application and can be loaded with <tt class=\" \">NSBundle</tt>.    </p>\n</li></ul>    <p>\nTo provide additional compiler flags, you can add them in the <tt class=\" \">xcodebuild</tt> property of <tt class=\" \">ios</tt> such as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">module.exports = {</code></div>\n<div class=\"line\"><code class=\"plain\">\thyperloop: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tios: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\txcodebuild: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tflags: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tLIBRARY_SEARCH_PATHS: </code><code class=\"string\">'src'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tOTHER_LDFLAGS: </code><code class=\"string\">'-lMyLibrary'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t},</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tthirdparty: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t</code><code class=\"string\">'MyFramework'</code><code class=\"plain\">: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tsource: [</code><code class=\"string\">'src'</code><code class=\"plain\">],</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\theader: </code><code class=\"string\">'src'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tresource: </code><code class=\"string\">'src'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"46253491_iOSHyperloopProgrammingGuide-UsingSwift\">\n        <h3 class=\"heading \"><span>Using Swift</span></h3>\n    <p>\nIn addition to Objective-C, you can import third-party libraries written in Swift. Any <tt class=\" \">*.swift</tt> files found in your <tt class=\" \">source</tt> directories will automatically be compiled and available to use in your JavaScript just like Objective-C APIs.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"46253491_iOSHyperloopProgrammingGuide-CustomizingyourXcodebuild\">\n        <h3 class=\"heading \"><span>Customizing your Xcode build</span></h3>\n    <p>\nYou can further customize the Xcode build by defining an <tt class=\" \">appc.js</tt> file in the root of your project. This project will provide some additional configuration which the Hyperloop compiler will read when invoking Xcode.    </p>\n    <p>\nFor example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">module.exports = {</code></div>\n<div class=\"line\"><code class=\"plain\">\thyperloop: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tios: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\txcodebuild: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tflags: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tGCC_PREPROCESSOR_DEFINITIONS: </code><code class=\"string\">'foo=bar'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t},</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tframeworks: [</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\t</code><code class=\"string\">'StoreKit'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t]</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\nAny <tt class=\" \">flags</tt> added to the <tt class=\" \">xcodebuild</tt> property will be passed to <tt class=\" \">xcodebuild</tt> . Any <tt class=\" \">frameworks</tt> in the array provided will be automatically added to the xcode project. <i class=\" \">Note: any referenced frameworks in your Hyperloop code are automatically added for you. However, this gives you even more control to custom your compile environment.</i>    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"46253491_iOSHyperloopProgrammingGuide-Addingathird-partyframework\">\n        <h3 class=\"heading \"><span>Adding a third-party framework</span></h3>\n    <p>\nIf you&rsquo;d like to add a third-party framework which isn&rsquo;t distributed with source code or available in CocoaPods, you can use this example configuration:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">module.exports = {</code></div>\n<div class=\"line\"><code class=\"plain\">\thyperloop: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tios: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\txcodebuild: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tflags: {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\tFRAMEWORK_SEARCH_PATHS: </code><code class=\"string\">'/path/to/framework'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t},</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tframeworks: [</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t\t</code><code class=\"string\">'FrameworkName'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\t]</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\nIn the above example, <tt class=\" \">/path/to/framework</tt> should point the the location of the <tt class=\" \">.framework</tt> file and <tt class=\" \">FrameworkName</tt> should be the name of the Framework.    </p>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"46253491_iOSHyperloopProgrammingGuide-Resources\">\n        <h2 class=\"heading \"><span>Resources</span></h2>\n    <p>\nAny Xcode resources that are found in your <tt class=\" \">Resources</tt> or <tt class=\" \">app</tt> (for Alloy projects) will be automatically be compiled and/or copied to your application root directory. Any intermediate folders will be flattened automatically.    </p>\n    <p>\nThe following resources will be compiled automatically:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nStoryboard (*.storyboard)    </p>\n</li><li class=\" \">    <p>\nXC Data Model (*.xcdatamodel, *.xcdatamodeld, *.xcmappingmodel)    </p>\n</li><li class=\" \">    <p>\nInterface Builder (*.xib)    </p>\n</li></ul>    <p>\nThe other resources will be copied such as PNG files.    </p>\n    <p>\nIt is recommended a Best Practice that you place any platform specific files under <tt class=\" \">Resources/iphone</tt> (Titanium classic) or <tt class=\" \">app/assets/iphone</tt> (Alloy). Y<i class=\" \">ou can also use <tt class=\" \">ios</tt> instead</i>    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=46253491\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"iOS Hyperloop Programming Guide"});