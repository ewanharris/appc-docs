Ext.data.JsonP['Android_Hyperloop_Programming_Guide']({"guide":" <!doctype html> <html> <head> <title>Android Hyperloop Programming Guide</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-46253495\" class=\"content\"> <h1>Android Hyperloop Programming Guide</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Requirements\">Requirements</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Software\">Software</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Configuretiapp.xml\">Configure tiapp.xml</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Classes\">Classes</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Instantiation\">Instantiation</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Methodsandfields\">Methods and fields</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Methodresolution\">Method resolution</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Casting\">Casting</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Interfaces\">Interfaces</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses\">Creating your own classes</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-AccessingnativeXMLLayouts\">Accessing native XML Layouts</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-UsingThird-partylibraries\">Using Third-party libraries</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Manualdependencies\"> Manual dependencies</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-GradleDependencies\">Gradle Dependencies</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-src-46253495_AndroidHyperloopProgrammingGuide-Third-partyExamples\">Third-party Examples</a> </p> </li></ul></li></ul> <p>This document provides information on Android Hyperloop requirements, classes, instantiation, methods and fields, casting, interfaces, creating your own classes, and using 3rd party libraries. </p> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Requirements\"> <h2 class=\"heading\"><span>Requirements</span></h2> <div class=\"section section-3\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Software\"> <h3 class=\"heading\"><span>Software</span></h3> <p>See <a class=\"document-link\" href=\"#!/guide/Hyperloop_Requirements-section-src-53871456_HyperloopRequirements-Requirements\">Hyperloop Requirements</a> for software requirements for using Hyperloop with Android. </p> </div> <div class=\"section section-3\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Configuretiapp.xml\"> <h3 class=\"heading\"><span>Configure tiapp.xml</span></h3> <p>Make sure to add the Hyperloop module to the <tt class=\"\">&lt;modules&gt;</tt> section of the <tt>tiapp.xml</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">module</code><code class=\"plain\">&gt;hyperloop&lt;/</code><code class=\"keyword\">module</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Classes\"> <h2 class=\"heading\"><span>Classes</span></h2> <p>Classes in Hyperloop map to the underlying classes defined in Java. For example, if you have a class such as <tt>android.view.View</tt> defined, you would reference it using a standard require such as: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> View = require(</code><code class=\"string\">&apos;android.view.View&apos;</code><code class=\"plain\">);</code></div> </div> </div> <p>This will return the <tt class=\"\">View</tt> class object (it&#x2019;s not an instance of a <tt class=\"\">View</tt>, but the <tt>View</tt> class itself). </p> <p>Once you have the Class reference returned from <tt>require</tt>, you can call normal JavaScript property and functions against it. Remember, at this point calling functions or properties against the class object above will be accessing Class level (static) Java methods (not instance level). </p> <p>For example, you could get the generated view id of the <tt>View</tt> using the example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> generatedId = View.generateViewId();</code></div> </div> </div> <p>This is because <tt>generateViewId</tt> is defined as a static method. </p> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Instantiation\"> <h2 class=\"heading\"><span>Instantiation</span></h2> <p>Please refer to our <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples/tree/master/app\" target=\"_blank\">hyperloop-examples app</a> in those code-level examples. For example, to use a <tt>View</tt>, the activity needs to be set: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> activity = </code><code class=\"keyword\">new</code><code class=\"plain\"> Activity(Ti.Android.currentActivity);</code></div> </div> </div> <p>See <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples/blob/master/app/controllers/android/animateview.js#L10\" target=\"_blank\">animateview.js (Github)</a> for an working sample. </p> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Methodsandfields\"> <h2 class=\"heading\"><span>Methods and fields</span></h2> <p>Methods in Java are mapped to JavaScript functions. Fields in Java are mapped to JavaScript property accessors. Static methods or fields (such as constants) will be attached to the class type. For example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> Example {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> field;</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> String staticString = </code><code class=\"string\">&quot;&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> method(</code><code class=\"keyword\">int</code><code class=\"plain\"> argument);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">boolean</code><code class=\"plain\"> staticMethod();</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Would map to the following in JavaScript: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">example.field = 123;</code></div> <div class=\"line\"><code class=\"plain\">example.staticString;</code></div> <div class=\"line\"><code class=\"plain\">example.method(567);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> result = example.staticMethod();</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Methodresolution\"> <h2 class=\"heading\"><span>Method resolution</span></h2> <p>If a class has overloads for a method (multiple forms of the method with different signatures, but the same name), Hyperloop will attempt to match the correct method to invoke on the Java side by matching the passed in arguments to the closest match. Typically, this involves matching the name, number of arguments and the ability to convert the passed in arguments (in-order) to the method&#x2019;s parameter types. Hyperloop is slightly more liberal in accepting numeric primitives than typical method resolution due to the conversion of JavaScript Numbers. </p> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Casting\"> <h2 class=\"heading\"><span>Casting</span></h2> <p>Sometimes, interfaces define generic return types such as <tt class=\"\">Object</tt> and you will need to cast them to a different type to then reference methods and properties of the class. You can pass along the object you want to wrap to the constructor of the type you want to wrap it in. For example, suppose the result of the function returned an <tt class=\"\">Object</tt> but you know the implementation is actually a <tt>View</tt>. You could use the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = </code><code class=\"keyword\">new</code><code class=\"plain\"> View(object); </code><code class=\"comments\">// call View instance methods on view variable</code></div> </div> </div> <p><strong>Be careful with casting</strong>: If you cast an object which is actually something different, you will experience an error and likely a crash. </p> <p>You can also cast a Titanium UI Component into its equivalent. For example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> tiView = Ti.UI.createView({ backgroundColor : </code><code class=\"string\">&apos;red&apos;</code><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> nativeView = </code><code class=\"keyword\">new</code><code class=\"plain\"> View(tiView);</code></div> <div class=\"line\"><code class=\"plain\">console.log(</code><code class=\"string\">&apos;X (relative to parent): &apos;</code><code class=\"plain\">, nativeView.getLeft());</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Interfaces\"> <h2 class=\"heading\"><span>Interfaces</span></h2> <p>Interfaces may be implemented using a Javascript syntax similar to an anonymous Java class. Call the constructor of the interface type with a JavaScript object that contains properties that match the interface method names, and corresponding values as function that implement them. For example, to create an instance that implements <tt>android.view.View.OnTouchListener</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> OnTouchListener = require(</code><code class=\"string\">&apos;android.view.View.OnTouchListener&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> listener = </code><code class=\"keyword\">new</code><code class=\"plain\"> OnTouchListener({</code></div> <div class=\"line\"><code class=\"plain\">\tonTouch: </code><code class=\"keyword\">function</code><code class=\"plain\">(v, event) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Do some work here</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses\"> <h2 class=\"heading\"><span>Creating your own classes</span></h2> <p>Hyperloop provides you the ability to dynamically create your own Java classes at runtime. Once created, these classes can be used as normal in either Hyperloop or passed to native calls. Hyperloop generates the custom subclass using the &quot;extend&quot; function of the type we want to extend, which takes a single JavaScript Object as an argument containing the overriding method implementations (same as we did for interface implementations). The returned value is a new class type that subclasses the extended type. We can then use the constructor to generate instances of that subclass. </p> <p>Let&apos;s create a simple custom subclass of <tt>android.view.View</tt>, and instantiate an instance of it: </p> <p> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Activity = require(</code><code class=\"string\">&apos;android.app.Activity&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> activity = </code><code class=\"keyword\">new</code><code class=\"plain\"> Activity(Ti.Android.currentActivity),</code></div> <div class=\"line\"><code class=\"plain\"> View = require(</code><code class=\"string\">&apos;android.view.View&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> MyView = android.view.View.extend({</code></div> <div class=\"line\"><code class=\"plain\"> onDraw: </code><code class=\"keyword\">function</code><code class=\"plain\">(canvas) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.</code><code class=\"keyword\">super</code><code class=\"plain\">.onDraw(canvas);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// implementation here</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> customView = </code><code class=\"keyword\">new</code><code class=\"plain\"> MyView(activity); </code><code class=\"comments\">// Add your custom view to the content...</code></div> </div> </div> <p>This will create a new class in the Java runtime which will extend <tt class=\"\">android.view.View</tt> which is equivalent to the following code (though please note that we do <i>not</i> generate Java source, but instead generate Dalvik bytecode that gets loaded into the runtime as a class): </p> <p> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> MyView </code><code class=\"keyword\">extends</code><code class=\"plain\"> android.view.View {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">protected</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onDraw(Canvas canvas) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// implementation here</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-AccessingnativeXMLLayouts\"> <h2 class=\"heading\"><span>Accessing native XML Layouts</span></h2> <p>In native Android development, you have many situations where you are inflating native XML layouts in your source-code. In Hyperloop, you can do the same with just a few lines of code: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var Activity = require(</code><code class=\"string\">&apos;android.app.Activity&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> Context = require(</code><code class=\"string\">&apos;android.content.Context&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> Inflater = require(</code><code class=\"string\">&apos;android.view.LayoutInflater&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> activity = </code><code class=\"keyword\">new</code><code class=\"plain\"> Activity(Ti.Android.currentActivity);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Load the layout inflater</code></div> <div class=\"line\"><code class=\"plain\">var inflater = Inflater.cast(activity.getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE));</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"comments\">// Load the &quot;main_content.xml&quot; from [app]/platform/android/res/layout/</code></div> <div class=\"line\"><code class=\"comments\">// This can also be used for other kind of resources, like images, colors and values </code></div> <div class=\"line\"><code class=\"plain\">var resId = activity.getResources().getIdentifier(</code><code class=\"string\">&apos;main_content&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;layout&apos;</code><code class=\"plain\">, activity.getPackageName());</code></div> <div class=\"line\"><code class=\"plain\">var view = inflater.inflate(resId, </code><code class=\"keyword\">null</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Add &quot;view&quot; your Titanium view here ...</code></div> </div> </div> <p>Learn more about a native XML layouts in our <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples/blob/master/app/controllers/android/nativelayout.js\" target=\"_blank\">Native Layout Example</a> as part of the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples\" target=\"_blank\">Hyperloop Examples</a> app. </p> </div> <div class=\"section section-2\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-UsingThird-partylibraries\"> <h2 class=\"heading\"><span>Using Third-party libraries</span></h2> <div class=\"section section-3\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Manualdependencies\"> <h3 class=\"heading\"><span>Manual dependencies</span></h3> <p>You can use Third-party libraries in Hyperloop such as JARs and AARs. </p> <p>Place the <strong class=\"\">JAR </strong>and<strong class=\"\"> AAR files</strong> into the <tt class=\"\">platform/android</tt> (Classic) or <tt>app/platform/android</tt> (Alloy) folder of your app. Hyperloop will pick up the JAR files and will generate necessary bindings. For JARs, they will be included in your app. For AAR files, they will extract resources, extract and use the class.jar, *.so file, and so on. </p> </div> <div class=\"section section-3\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-GradleDependencies\"> <h3 class=\"heading\"><span>Gradle Dependencies</span></h3> <p>Instead of placing your Android archives into your project manually, you can also use Gradle to pull down any library and its dependencies. Here is a quick example of using the Mapbox Android SDK via Gradle: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">build.gradle</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"build.gradle\"> <div class=\"line\"><code class=\"plain\">apply plugin: </code><code class=\"string\">&apos;java&apos;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">repositories {</code></div> <div class=\"line\"><code class=\"plain\">\tgoogle()</code></div> <div class=\"line\"><code class=\"plain\">\tmavenCentral()</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">dependencies {</code></div> <div class=\"line\"><code class=\"plain\">\timplementation </code><code class=\"string\">&apos;com.mapbox.mapboxsdk:mapbox-android-sdk:5.5.0&apos;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">task getDeps(type: Copy) {</code></div> <div class=\"line\"><code class=\"plain\">\tfrom sourceSets.main.runtimeClasspath</code></div> <div class=\"line\"><code class=\"plain\">\texclude </code><code class=\"string\">&apos;support-*&apos;</code><code class=\"plain\"> </code><code class=\"comments\">// The support libraries are packaged with Titanium already</code></div> <div class=\"line\"><code class=\"plain\">\tinto </code><code class=\"string\">&apos;platform/android/&apos;</code><code class=\"plain\"> </code><code class=\"comments\">// Use &quot;app/platform/android&quot; for Alloy</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>In the above Gradle file, the Mapbox Android SDK is downloaded to <tt class=\"\">platform/android</tt> (Classic) and can be changed to <tt>app/platform/android</tt> if used in Alloy. You can see a full example of using Gradle, CocoaPods (iOS) and modern ES6+ in the <a class=\"external-link external-link\" href=\"https://github.com/hyperloop-modules/ti.mapbox\" target=\"_blank\">Ti.Mapbox module</a>. </p> </div> <div class=\"section section-3\" id=\"src-46253495_AndroidHyperloopProgrammingGuide-Third-partyExamples\"> <h3 class=\"heading\"><span>Third-party Examples</span></h3> <p>Make sure to check out more Android third-party libraries (like Localytics, SSDP, Shimmer) in our <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples/tree/master/app/controllers/android/libraries\" target=\"_blank\">Hyperloop Sample App</a>. </p> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=46253495\"><span>Edit</span></a> </div> </body> </html> ","title":"Android Hyperloop Programming Guide"});