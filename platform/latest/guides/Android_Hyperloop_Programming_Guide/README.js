Ext.data.JsonP['Android_Hyperloop_Programming_Guide']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Android Hyperloop Programming Guide</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"46253495\" class=\"content\">\n            <h1>Android Hyperloop Programming Guide</h1>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Requirements\">Requirements</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Classes\">Classes</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Instantiation\">Instantiation</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Methodsandfields\">Methods and fields</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Methodresolution\">Method resolution</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Casting\">Casting</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Interfaces\">Interfaces</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses\">Creating your own classes</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses.1\">Creating your own classes</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Android_Hyperloop_Programming_Guide-section-46253495_AndroidHyperloopProgrammingGuide-UsingThird-partylibraries\">Using Third-party libraries</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Requirements\">\n        <h2 class=\"heading \"><span>Requirements</span></h2>\n    <p>\nYou&rsquo;ll need to have the following minimum requirements to use Hyperloop for Android:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nTitanium 5.4.0+    </p>\n</li><li class=\" \">    <p>\nAndroid 2.3.3+ SDK    </p>\n</li></ul>    <p>\nConfigure the plugin in tiapp.xml:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;plugins&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;plugin&gt;hyperloop&lt;/plugin&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/plugins&gt;</code></div>\n</div>\n</div>    <p>\nConfigure the module in tiapp.xml:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;modules&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;module&gt;hyperloop&lt;/module&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/modules&gt;</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Classes\">\n        <h2 class=\"heading \"><span>Classes</span></h2>\n    <p>\nClasses in Hyperloop map to the underlying classes defined in Java. For example, if you have a class such as <tt class=\" \">android.view.View</tt> defined, you would reference it using a standard require such as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> View = require(</code><code class=\"string\">'android.view.View'</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\n    </p>\n    <p>\nThis will return the <tt class=\" \">View</tt> class object. Meaning, it&rsquo;s not an instance of a <tt class=\" \">View</tt>, but the <tt class=\" \">View</tt> class itself.    </p>\n    <p>\nOnce you have a the Class reference returned from <tt class=\" \">require</tt>, you can call normal JavaScript property and functions against it. Remember, at this point calling functions or properties against the class object above will be accessing Class level (static) Java methods (not instance level).    </p>\n    <p>\nFor example, you could get the generated view id of the View using the example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> generatedId = View.generateViewId();</code></div>\n</div>\n</div>    <p>\nThis is because <tt class=\" \">generateViewId</tt> is defined as a static method.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Instantiation\">\n        <h2 class=\"heading \"><span>Instantiation</span></h2>\n    <p>\nPlease refer to our hyperloop-examples app in those code-level examples. For example, to use a View, the activity needs to be set before (see <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/hyperloop-examples/blob/master/app/controllers/android/animateview.js#L10\" target=\"_blank\">here</a>)    </p>\n    <p>\n    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Methodsandfields\">\n        <h2 class=\"heading \"><span>Methods and fields</span></h2>\n    <p>\nMethods in Java are mapped to JavaScript functions. Fields in Java are mapped to JavaScript property accessors. static methods or fields (such as constants) will be attached to the class type. For example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> Example {</code></div>\n<div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> field;</code></div>\n<div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> String staticString = </code><code class=\"string\">\"\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> method(</code><code class=\"keyword\">int</code><code class=\"plain\"> argument);</code></div>\n<div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">boolean</code><code class=\"plain\"> staticMethod();</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nWould map to the following in JavaScript:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">example.field = 123;</code></div>\n<div class=\"line\"><code class=\"plain\">example.staticString;</code></div>\n<div class=\"line\"><code class=\"plain\">example.method(567);</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> result = example.staticMethod();</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Methodresolution\">\n        <h2 class=\"heading \"><span>Method resolution</span></h2>\n    <p>\nIf a class has overloads for a method (multiple forms of the method with different signatures, but the same name), we will attempt to match the correct method to invoke on the Java side by matching the passed in arguments to the closest match. Typically, this involves matching the name, number of arguments and the ability to convert the passed in arguments (in-order) to the method&rsquo;s parameter types. We are slightly more liberal in accepting numeric primitives than typical method resolution due to the conversion of JS Numbers.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Casting\">\n        <h2 class=\"heading \"><span>Casting</span></h2>\n    <p>\nSometimes interfaces define generic return types such as <tt class=\" \">Object</tt> and you will need to cast them to a different type to then reference methods and properties of the class. You can pass along the object you want to wrap to the constructor of the type you want to wrap it in. For example, suppose the result of the function returned an <tt class=\" \">Object</tt> but you know the implementation is actually a <tt class=\" \">View</tt>. You could use the following:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = </code><code class=\"keyword\">new</code><code class=\"plain\"> View(object);</code></div>\n<div class=\"line\"><code class=\"comments\">// call View instance methods on view variable</code></div>\n</div>\n</div>    <p>\n<strong class=\" \">Be careful with casting</strong>: If you cast an object which is actually something different, you will experience an error and likely a crash.    </p>\n    <p>\nYou can also cast a Titanium UI Component into its equivalent. For example, this would work:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> tiView = Ti.UI.createView( { backgroundColor : </code><code class=\"string\">\"red\"</code><code class=\"plain\"> } );</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> nativeView = </code><code class=\"keyword\">new</code><code class=\"plain\"> View(tiView);</code></div>\n<div class=\"line\"><code class=\"plain\">console.log(</code><code class=\"string\">'X (relative to parent): '</code><code class=\"plain\">, nativeView.getLeft());</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Interfaces\">\n        <h2 class=\"heading \"><span>Interfaces</span></h2>\n    <p>\nInterfaces may be implemented using a Javascript syntax similar to an anonymous Java class. Call the constructor of the interface type with a JS object that contains properties that match the interface method names, and corresponding values as function that implement them. For example, to create an instance that implements <tt class=\" \">android.view.View.OnTouchListener</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> OnTouchListener = require(</code><code class=\"string\">'android.view.View.OnTouchListener'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">\tlistener = </code><code class=\"keyword\">new</code><code class=\"plain\"> OnTouchListener({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tonTouch: </code><code class=\"keyword\">function</code><code class=\"plain\">(v, event) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t</code><code class=\"comments\">// Do some work here</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t</code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses\">\n        <h2 class=\"heading \"><span>Creating your own classes</span></h2>\n    <div class=\"section section-3 \" id=\"46253495_AndroidHyperloopProgrammingGuide-Creatingyourownclasses.1\">\n        <h3 class=\"heading \"><span>Creating your own classes</span></h3>\n    <p>\nHyperloop provides you the ability to dynamically create your own Java classes at runtime. Once created, these classes can be used as normal in either Hyperloop or passed to native calls. We generate the custom subclass using the &quot;extend&quot; function of the type we want to extend, which takes a single JS Object as an argument containing the overriding method implementations (same as we did for interface implementations). The returned value is a new class type that subclasses the extended type. We can then use the constructor to generate instances of that subclass.    </p>\n    <p>\nIt's easiest to understand with an example - let's create a simple custom subclass of <tt class=\" \">android.view.View</tt>, and instantiate an instance of it:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Activity = require(</code><code class=\"string\">'android.app.Activity'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    activity = </code><code class=\"keyword\">new</code><code class=\"plain\"> Activity(Ti.Android.currentActivity),</code></div>\n<div class=\"line\"><code class=\"plain\">    View = require(</code><code class=\"string\">'android.view.View'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> MyView = android.view.View.extend({</code></div>\n<div class=\"line\"><code class=\"plain\">    onDraw: </code><code class=\"keyword\">function</code><code class=\"plain\">(canvas) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"comments\">// implementation here</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> customView = </code><code class=\"keyword\">new</code><code class=\"plain\"> MyView(activity);</code></div>\n<div class=\"line\"><code class=\"comments\">// Add your custom view to the content...</code></div>\n</div>\n</div>    <p>\nThis will create a new class in the Java runtime which will extend <tt class=\" \">android.view.View</tt> which is equivalent to the following code (though please note that we do <i class=\" \">not</i> generate Java source, but instead generate Dalvik bytecode that gets loaded into the runtime as a class):    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> MyView </code><code class=\"keyword\">extends</code><code class=\"plain\"> android.view.View {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">protected</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onDraw(Canvas canvas) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"comments\">// implementation here</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"46253495_AndroidHyperloopProgrammingGuide-UsingThird-partylibraries\">\n        <h2 class=\"heading \"><span>Using Third-party libraries</span></h2>\n    <p>\nYou can use Third-party libraries in Hyperloop such as JARs and AARs.    </p>\n    <p>\n    <span style=\"color: #333333;\">\nPlace the <strong class=\" \">JAR files</strong> into the     </span>\n<tt class=\" \">platform/android</tt>    <span style=\"color: #333333;\">\n folder of your app. Hyperloop will pick up the JAR files and will generate necessary bindings and include the JARs in your app.    </span>\n    </p>\n    <p>\n    <span style=\"color: #333333;\">\nPlace the <strong class=\" \">AAR files</strong> into the     </span>\n<tt class=\" \">platform/android</tt>    <span style=\"color: #333333;\">\n folder of your app. Hyperloop will pick up the AAR files and will generate necessary bindings, extract resources, extract and use the classes.jar, *.so file, etc.    </span>\n    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=46253495\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"Android Hyperloop Programming Guide"});