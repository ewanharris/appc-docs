Ext.data.JsonP['Job_Class']({"guide":" <!doctype html> <html> <head> <title>Job Class</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-30083248\" class=\"content\"> <h1>Job Class</h1> <p>The Job class contains methods and properties for interacting with the Jobs inside Studio </p> <div class=\"section section-2\" id=\"src-30083248_JobClass-Usage\"> <h2 class=\"heading\"><span>Usage</span></h2> <p>Examples of how you might interact with methods of the Job class. </p> <div class=\"section section-3\" id=\"src-30083248_safe-id-Sm9iQ2xhc3MtU3RhdGljOg\"> <h3 class=\"heading\"><span>Static:</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">job = Ruble::Job.</code><code class=\"keyword\">new</code><code class=\"plain\">(</code><code class=\"string\">&quot;Speaking...&quot;</code><code class=\"plain\">){ `</code><code class=\"string\">&quot;#{say_command}&quot;</code><code class=\"plain\">` }</code></div> <div class=\"line\"><code class=\"plain\">job.schedule</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-30083248_JobClass-JobMethods\"> <h2 class=\"heading\"><span>Job Methods</span></h2> <p>Job objects have the following static method: </p> <div class=\"tablewrap\"> <table class=\"confluenceTable\"> <thead> <tr> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Property </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Description </p> </td> </tr> </thead><tfoot class=\"\"/><tbody> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p><tt>new(name)</tt> </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>The name of the job, followed by the items to run </p> </td> </tr> </tbody> </table> </div> </div> <div class=\"section section-2\" id=\"src-30083248_JobClass-Example\"> <h2 class=\"heading\"><span>Example</span></h2> <div class=\"section section-3\" id=\"src-30083248_JobClass-Performajobandwaitforresultstoreturn\"> <h3 class=\"heading\"><span>Perform a job and wait for results to return</span></h3> <p>Here we do something similar to the existing command, but instead, we perform the processing inside a job, and assign the results to a variable. We wait for the job to finish before returning. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">require </code><code class=\"string\">&apos;ruble&apos;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">command </code><code class=\"string\">&quot;Execute Selection/Line Inserting Results&quot;</code><code class=\"plain\"> </code><code class=\"keyword\">do</code><code class=\"plain\"> |cmd|</code></div> <div class=\"line\"><code class=\"plain\"> cmd.key_binding = </code><code class=\"string\">&quot;CTRL+R&quot;</code></div> <div class=\"line\"><code class=\"plain\"> cmd.output = :insert_as_text</code></div> <div class=\"line\"><code class=\"plain\"> cmd.input = [ :selection, :line ] </code></div> <div class=\"line\"><code class=\"plain\"> cmd.invoke </code><code class=\"keyword\">do</code><code class=\"plain\"> |context|</code></div> <div class=\"line\"><code class=\"plain\"> result = </code><code class=\"string\">&quot;&quot;</code></div> <div class=\"line\"><code class=\"plain\"> job = Ruble::Job.</code><code class=\"keyword\">new</code><code class=\"plain\">(</code><code class=\"string\">&quot;Running...&quot;</code><code class=\"plain\">) { result += IO.popen(STDIN.read, </code><code class=\"string\">&apos;r&apos;</code><code class=\"plain\">) {|io| io.read } }</code></div> <div class=\"line\"><code class=\"plain\"> job.schedule # start the job</code></div> <div class=\"line\"><code class=\"plain\"> job.join # wait </code><code class=\"keyword\">for</code><code class=\"plain\"> it to finish</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> result</code></div> <div class=\"line\"><code class=\"plain\"> end</code></div> <div class=\"line\"><code class=\"plain\">end</code></div> </div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083248\"><span>Edit</span></a> </div> </body> </html> ","title":"Job Class"});