Ext.data.JsonP['Journal']({"guide":" <!doctype html> <html> <head> <title>Journal</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-41845717\" class=\"content\"> <h1>Journal</h1> <p>Demonstrates how to create a simple personal journal application using models and collections. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro has-no-icon\"> <div class=\"title\">App Folder Location</div> <p>alloy/test/apps/<strong>models/journal</strong> </p> </div> <img src=\"images/download/attachments/41845717/add_entry.png\" alt=\"images/download/attachments/41845717/add_entry.png\" class=\"confluence-embedded-image\" width=\"400\"> <p>The application&apos;s model file (journal.js) defines the fields for each journal entry: title, text, mood (happy, angry, or neutral), and creation date. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/models/journal.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/models/journal.js\"> <div class=\"line\"><code class=\"plain\">exports.definition = {</code></div> <div class=\"line\"><code class=\"plain\"> config: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;columns&quot;</code><code class=\"plain\">: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;title&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;TEXT&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;text&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;TEXT&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;mood&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;TEXT&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;dateCreated&quot;</code><code class=\"plain\">:</code><code class=\"string\">&quot;TEXT&quot;</code></div> <div class=\"line\"><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;adapter&quot;</code><code class=\"plain\">: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;type&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;sql&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;collection_name&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;journal&quot;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <p>The samples uses the Alloy convention to define unique views for iOS, Android and MobileWeb. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Application view structure</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Application view structure\"> <div class=\"line\"><code class=\"plain\">app/views/</code></div> <div class=\"line\"><code class=\"plain\">&#x251C;&#x2500;&#x2500;android</code></div> <div class=\"line\"><code class=\"plain\">&#x2502; &#x2514;&#x2500;&#x2500;index.xml</code></div> <div class=\"line\"><code class=\"plain\">&#x251C;&#x2500;&#x2500;ios</code></div> <div class=\"line\"><code class=\"plain\">&#x2502; &#x2514;&#x2500;&#x2500;index.xml</code></div> <div class=\"line\"><code class=\"plain\">&#x2514;&#x2500;&#x2500;mobileweb</code></div> <div class=\"line\"><code class=\"plain\"> &#x2514;&#x2500;&#x2500;index.xml</code></div> </div> </div> <p>Each view, like app/views/android/index.xml shown below, creates a global reference to the <tt class=\"\">journal</tt> collection, which is assigned to a <tt class=\"\">ScrollView</tt> element&apos;s <tt>dataCollection</tt> attribute. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/android/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/android/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!-- create a global reference to the journal collection --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Collection src=</code><code class=\"string\">&quot;journal&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Window&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Menu&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;MenuItem onClick=</code><code class=\"string\">&quot;addEntry&quot;</code><code class=\"plain\"> title=</code><code class=\"string\">&quot;add entry&quot;</code><code class=\"plain\"> icon=</code><code class=\"string\">&quot;ic_menu_add.png&quot;</code><code class=\"plain\">&gt;&lt;/MenuItem&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/Menu&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Label </code><code class=\"keyword\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;titlebar&quot;</code><code class=\"plain\">&gt;Journal&lt;/Label&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;ScrollView id=</code><code class=\"string\">&quot;scroll&quot;</code><code class=\"plain\"> dataCollection=</code><code class=\"string\">&quot;journal&quot;</code><code class=\"plain\"> dataTransform=</code><code class=\"string\">&quot;doTransform&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Require src=</code><code class=\"string\">&quot;entry&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/ScrollView&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/Window&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div> </div> </div> <p>The <tt class=\"\">ScrollView</tt> element also specifies a <tt class=\"\">dataTransform</tt> function to transform each model in the collection for display. The specified function, <tt>doTransform()</tt>, does the following: </p> <ul class=\"\"><li class=\"\"> <p>Transforms the <tt class=\"\">mood</tt> value (&apos;mad&apos;, &apos;happy&apos;, &apos;neutral&apos;) into a corresponding <tt class=\"\">moodColor</tt>. This color is applied to the <tt>borderColor</tt> attribute of each View item in the ScrollView. </p> </li><li class=\"\"> <p>Uses the built-in moment.js library&apos;s <a class=\"external-link external-link\" href=\"http://momentjs.com/docs/#/displaying/fromnow/\" target=\"_blank\">fromNow()</a> method to transform the entry&apos;s <tt class=\"\">dateCreated</tt> value into <tt>dateSince</tt>. </p> </li></ul> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/controllers/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/controllers/index.js\"> <div class=\"line\"><code class=\"comments\">// Require built-in moment.js library for working with dates/times.</code></div> <div class=\"line\"><code class=\"plain\">var moment = require(</code><code class=\"string\">&apos;alloy/moment&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">function doTransform(model) {</code></div> <div class=\"line\"><code class=\"plain\"> var transform = model.toJSON();</code></div> <div class=\"line\"><code class=\"plain\"> transform.dateSince = moment(transform.dateCreated,</code><code class=\"string\">&apos;YYYYMMDDHHmmss&apos;</code><code class=\"plain\">).fromNow();</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">switch</code><code class=\"plain\">(transform.mood) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"string\">&apos;mad&apos;</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> transform.moodColor = </code><code class=\"string\">&apos;#a00&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"string\">&apos;happy&apos;</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> transform.moodColor = </code><code class=\"string\">&apos;#0a0&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"string\">&apos;neutral&apos;</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">default</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> transform.moodColor = </code><code class=\"string\">&apos;#88f&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> transform;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">function addEntry() {</code></div> <div class=\"line\"><code class=\"plain\"> Alloy.createController(</code><code class=\"string\">&apos;add&apos;</code><code class=\"plain\">).getView().open();</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">Alloy.Collections.journal.comparator = function(entry1, entry2) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> entry1.get(</code><code class=\"string\">&apos;dateCreated&apos;</code><code class=\"plain\">) &gt; entry2.get(</code><code class=\"string\">&apos;dateCreated&apos;</code><code class=\"plain\">) ? -</code><code class=\"value\">1</code><code class=\"plain\"> : </code><code class=\"value\">1</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"plain\">Alloy.Collections.journal.fetch();</code></div> </div> </div> <p>A Backbone <a class=\"external-link external-link\" href=\"http://backbonejs.org/#Collection-comparator\" target=\"_blank\">comparator</a> sorts the items according to their <tt class=\"\">dateCreated</tt> fields. Lastly, each entry displayed by the ScrollView is a View element that binds the transformed fields to the <tt class=\"\">text</tt> properties of Labels and the <tt>borderColor</tt> of the View. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">views/entry.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"views/entry.xml\"> <div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;View id=</code><code class=\"string\">&quot;container&quot;</code><code class=\"plain\"> borderColor=</code><code class=\"string\">&quot;{moodColor}&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Label id=</code><code class=\"string\">&quot;title&quot;</code><code class=\"plain\"> text=</code><code class=\"string\">&quot;{title}&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Label id=</code><code class=\"string\">&quot;text&quot;</code><code class=\"plain\"> text=</code><code class=\"string\">&quot;{text}&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Label id=</code><code class=\"string\">&quot;date&quot;</code><code class=\"plain\"> text=</code><code class=\"string\">&quot;{dateSince}&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/View&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div> </div> </div> <p>The addEntry() function, defined by the add.js controller shown below, creates a new Journal model object, adds it to the global <tt>journal</tt> collection object, and persists it to the SQL database. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">function addEntry() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// create a new model instance based on user input</code></div> <div class=\"line\"><code class=\"plain\"> var entry = Alloy.createModel(</code><code class=\"string\">&apos;journal&apos;</code><code class=\"plain\">, {</code></div> <div class=\"line\"><code class=\"plain\"> title : $.title.value,</code></div> <div class=\"line\"><code class=\"plain\"> text: $.text.value,</code></div> <div class=\"line\"><code class=\"plain\"> mood: getMood($.mood),</code></div> <div class=\"line\"><code class=\"plain\"> dateCreated: moment().format(</code><code class=\"string\">&apos;YYYYMMDDHHmmss&apos;</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Add new model to the collection, use silent=true</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// so that a &quot;change&quot; event is not fired and the</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// UI is re-rendered.</code></div> <div class=\"line\"><code class=\"plain\"> journal.add(entry, {silent:</code><code class=\"keyword\">true</code><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Save the entry to persistence, which will re-render</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// the UI based on the binding.</code></div> <div class=\"line\"><code class=\"plain\"> entry.save();</code></div> <div class=\"line\"><code class=\"plain\"> closeWindow();</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"section section-2\" id=\"src-41845717_Journal-SeeAlso\"> <h2 class=\"heading\"><span>See Also</span></h2> <ul class=\"\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Alloy_Collection_and_Model_Objects\">Alloy Collection and Model Objects</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Alloy_Data_Binding\">Alloy Data Binding</a> </p> </li></ul> </div> </img></div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=41845717\"><span>Edit</span></a> </div> </body> </html> ","title":"Journal"});