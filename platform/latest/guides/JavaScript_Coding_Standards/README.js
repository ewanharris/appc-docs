Ext.data.JsonP['JavaScript_Coding_Standards']({"guide":" <!doctype html> <html> <head> <title>JavaScript Coding Standards</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-30869180\" class=\"content\"> <h1>JavaScript Coding Standards</h1> <div class=\"confbox panel panel\"> <div class=\"title\">Contents</div> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-General\">General</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Files\">Files</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Variables\">Variables</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Functions\">Functions</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Objects\">Objects</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Modules\">Modules</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Whitespace\">Whitespace</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Braces\">Braces</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Semicolons\">Semicolons</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Loops\">Loops</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Conditionals\">Conditionals</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-DataTypes\">Data Types</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-AllowedConstructs\">Allowed Constructs</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-DisallowedConstructs\">Disallowed Constructs</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Comments\">Comments</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-Documentation\">Documentation</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/JavaScript_Coding_Standards-section-src-30869180_JavaScriptCodingStandards-ExceptionHandling\">Exception Handling</a> </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-General\"> <h2 class=\"heading\"><span>General</span></h2> <p>Any violation to these standards is allowed if it enhances readability. </p> <p>This guide serves as the coding standard for all Appcelerator JavaScript code including the Mobile Web platform, Titanium Mobile project templates, KitchenSink, and all other sample code. </p> <ol class=\"\"><li> <p>All variables, functions, methods, class names, and comments SHOULD be written in English. </p> </li><li> <p>Line length SHOULD be limited to a &quot;screen width&quot; which can vary between 100 and 200 characters. </p> </li><li> <p>BE CONSISTENT. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Files\"> <h2 class=\"heading\"><span>Files</span></h2> <ol class=\"\"><li> <p>Filenames SHOULD be all lower case if the file does not contain any instantiable objects (classes). </p> </li><li> <p>Filenames SHOULD be CamelCase if the file contains an instantiable object (class). </p> </li><li> <p>Directories SHOULD be all lower case and unless the directory serves as a part of a module path (i.e. /path/to/Ti/Filesystem). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Variables\"> <h2 class=\"heading\"><span>Variables</span></h2> <ol class=\"\"><li> <p>Public variables SHOULD be mixedCase (i.e. containerNode, firstItem, etc). </p> </li><li> <p>Private variables SHOULD be _underscoreMixedCase (i.e. _position, _layerIdx). </p> </li><li> <p>Constants SHOULD be UPPER_CASE. </p> </li><li> <p>All variables SHOULD be defined at the top of the function with a single &quot;var&quot; keyword. </p> </li><li> <p>Global variables SHOULD be kept to a minimum to avoid naming collisions and scope lookups. </p> </li><li> <p>Variables SHOULD be descriptive, but short names are acceptable in small functions. </p> </li><li> <p>Variable names MUST NOT be reserved words or web browser built-in objects: window, document, etc.. </p> </li><li> <p>Complementary names MUST be used for complementary entities (i.e. get/set, add/remove, create/destroy, start/stop, etc). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Functions\"> <h2 class=\"heading\"><span>Functions</span></h2> <ol class=\"\"><li> <p>Public functions and methods SHOULD be mixedCase (i.e. myFunction, doSomething, etc). </p> </li><li> <p>Private functions and methods SHOULD be _underscoreMixedCase (i.e. _init, _destroyUI, etc). </p> </li><li> <p>Anonymous functions SHOULD be named for easier debugging (names would be removed during minification). </p> </li><li> <p>Nested functions ARE permitted. </p> </li><li> <p>Closures ARE permitted, but caution is advised to avoid memory leaks. </p> </li><li> <p>Method names SHOULD be verbs or verb phrases (i.e. getValue(), isEnabled()). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Objects\"> <h2 class=\"heading\"><span>Objects</span></h2> <ol class=\"\"><li> <p>Methods SHOULD be defined on the object&apos;s prototype, not via &quot;this&quot; in the constructor. </p> </li><li> <p>Array and object properties SHOULD be initialized in the constructor, not in the prototype. </p> </li><li> <p>Array and object properties MUST NOT be added to the prototype. </p> </li><li> <p>Properties that are boolean-ish and default to falsey (false, null, undefined, 0) do not NEED to be defined before use. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Modules\"> <h2 class=\"heading\"><span>Modules</span></h2> <ol class=\"\"><li> <p>Modules MUST follow the CommonJS modules or AMD (asynchronous module definition) specification. </p> </li><li> <p>Module IDs MUST NOT start with a forward slash. </p> </li><li> <p>Module IDs MAY contain periods. </p> </li><li> <p>Module IDs MUST NOT be named &quot;require&quot;, &quot;exports&quot;, or &quot;module&quot;. </p> </li><li> <p>Module names SHOULD NOT begin with a number. </p> </li><li> <p>AMD modules SHOULD NOT provide a name to define() and let the loader automatically detect it. </p> </li><li> <p>AMD modules SHOULD NOT contain more than one module definition, though it is possible. </p> </li><li> <p>AMD modules MUST NOT contain more than one anonymous module definition. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Whitespace\"> <h2 class=\"heading\"><span>Whitespace</span></h2> <ol class=\"\"><li> <p>Tabs (set to 4 spaces) MUST be used for indentation rather than spaces. </p> </li><li> <p>Blank lines SHOULD NOT contain any tabs or spaces. </p> </li><li> <p>Blank lines SHOULD be used to separate blocks of logic. </p> </li><li> <p>Commas SHOULD be followed by a space. </p> </li><li> <p>Ternary operators (inline-ifs) SHOULD have spaces around both the ? and : operators. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">drink = (location == </code><code class=\"string\">&quot;scotland&quot;</code><code class=\"plain\">) ? </code><code class=\"string\">&quot;whisky&quot;</code><code class=\"plain\"> : </code><code class=\"string\">&quot;whiskey&quot;</code><code class=\"plain\">;</code></div> </div> </div> </li><li> <p>Semi-colons in for loops SHOULD be followed by a space. </p> </li><li> <p>There SHOULD be a space around the outside of the parentheses in if, switch, catch, while, and for constructs. </p> </li><li> <p>Operands and operators SHOULD be separated by spaces. </p> </li><li> <p>Statements MAY be aligned wherever it improves readability. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Braces\"> <h2 class=\"heading\"><span>Braces</span></h2> <ol class=\"\"><li> <p>All block structures including if, else, switch, try, catch, function, while, for, and so on MUST use braces around body. </p> </li><li> <p>Opening braces SHOULD be at the end of the first line of the block statement. </p> </li><li> <p>Closing braces SHOULD be on a separate line and indented to match indentation of the opening brace&apos;s line. </p> </li></ol> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (error) {</code></div> <div class=\"line\"><code class=\"plain\"> crashAndBurn();</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Semicolons\"> <h2 class=\"heading\"><span>Semicolons</span></h2> <ol class=\"\"><li> <p>All lines of code MUST end with one and only one semicolon. </p> <ol class=\"\"><li> <p>A compile-time JavaScript minifier may remove semicolons to reduce file size. </p> </li></ol></li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Loops\"> <h2 class=\"heading\"><span>Loops</span></h2> <ol class=\"\"><li> <p>Generally, index variables SHOULD be defined with all other variables at the top of the function. </p> </li><li> <p>Empty for and while loops SHOULD have empty braces or a semicolon at the end of the line. </p> </li><li> <p>When looping over arrays, for loops SHOULD pre-determine the length (i.e. for (var i = 0, len = arr.length; i &lt; len; i++) {}). </p> </li><li> <p>for loops SHOULD be used instead of for-in loops when looping over arrays. </p> <ol class=\"\"><li> <p>for-in is acceptable for looping over objects, though it is preferred to use the ECMAScript 5 Object.keys() method. </p> </li></ol></li><li> <p>You SHOULD use a for loop instead of Array.forEach(). </p> <ol class=\"\"><li> <p>The overhead of calling a function for each items is significant. </p> </li></ol></li><li> <p>Iterator variables SHOULD be named i, j, k, etc. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Conditionals\"> <h2 class=\"heading\"><span>Conditionals</span></h2> <ol class=\"\"><li> <p>Short circuiting conditionals are acceptable (i.e. hasX &amp;&amp; doSomething()). </p> </li><li> <p>The last statements in a switch SHOULD NOT end with a break statement. </p> </li><li> <p>switch cases MAY be broken with either a break or return. </p> </li><li> <p>Ternary operators should be used for simple code conditions (i.e. var y = x ? 1 : 2; isEnabled() ? doSomething() : doSomethingElse();). </p> </li><li> <p>Use !~ with an indexOf() to check if it contains a value. </p> </li><li> <p>Use !(a&lt;b || b&lt;a) to check if two dates or arrays are equal. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-DataTypes\"> <h2 class=\"heading\"><span>Data Types</span></h2> <ol class=\"\"><li> <p>Non-boolean variables SHOULD be cast to boolean using !! or ! operators. </p> </li><li> <p>Non-integer variables SHOULD be cast to integer using |0 (i.e. &quot;123.4&quot;|0 outputs 123). </p> </li><li> <p>Non-string variables SHOULD be cast to strings using &apos;&apos;+ (i.e. &apos;&apos;+123 outputs &quot;123&quot;). </p> </li><li> <p>Multiline strings SHOULD be broken up into separate concatenated strings instead of using backslashes at the end of lines. </p> </li><li> <p>Strings SHOULD generally use single quotes, though double quotes are acceptable unless the string contains zero or one characters or contains HTML/XML/JSON codes. </p> </li><li> <p>Literals SHOULD be used instead of constructors (i.e. use [] instead of Array(), {} instead of Object(), &apos;&apos; instead of String()). </p> </li><li> <p>Object literal keys SHOULD only use quotes if the key is a reserved word or contains a space. </p> </li><li> <p>Custom object MAY have toString() methods as long as they return a string without error. </p> </li><li> <p>Arrays and objects SHOULD NOT have hanging commas. </p> </li><li> <p>Floating point constants SHOULD be written with a digit, followed by a decimal point, and at least one decimal (i.e. 1.0). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-AllowedConstructs\"> <h2 class=\"heading\"><span>Allowed Constructs</span></h2> <ol class=\"\"><li> <p>Use built-in standard functions (i.e. string.charAt(3) instead of string[pe:3]). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-DisallowedConstructs\"> <h2 class=\"heading\"><span>Disallowed Constructs</span></h2> <ol class=\"\"><li> <p>with statements ARE NOT permitted. </p> </li><li> <p>You SHOULD NOT modify prototypes of internal objects. </p> <ol class=\"\"><li> <p>Possible exception when trying to shim a standardized function that is missing in the given implementation. </p> </li></ol></li><li> <p>You SHOULD NOT use parenthesis when using delete, typeof, void or calling return, throw, case, in, or new. </p> </li><li> <p>You SHOULD NOT use commas at the beginning of a line; they should be at the end of the line. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Comments\"> <h2 class=\"heading\"><span>Comments</span></h2> <ol class=\"\"><li> <p>Single line comments MUST use C++ style single-line comments, introduced by two slashes: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// my comment</code></div> </div> </div> </li></ol><ol class=\"\"><li> <p>Multi-line comments MUST use C-style comments, beginning with /* and ending with */: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">/* my multi-</code></div> <div class=\"line\"><code class=\"comments\">line comment */</code></div> </div> </div> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-Documentation\"> <h2 class=\"heading\"><span>Documentation</span></h2> <ol class=\"\"><li> <p>Code SHOULD be documented using JSDoc annotations (<a class=\"external-link external-link\" href=\"https://github.com/jsdoc3/jsdoc\" target=\"_blank\">https://github.com/jsdoc3/jsdoc</a>). </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-30869180_JavaScriptCodingStandards-ExceptionHandling\"> <h2 class=\"heading\"><span>Exception Handling</span></h2> <ol class=\"\"><li> <p>try/catch SHOULD be used instead of return codes for complex routines. </p> </li><li> <p>Thrown exceptions SHOULD use built-in exception types: a string, Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError. </p> <ol class=\"\"><li> <p>Custom exceptions are acceptable as long as they define their own toString() function. </p> </li></ol></li></ol> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30869180\"><span>Edit</span></a> </div> </body> </html> ","title":"JavaScript Coding Standards"});