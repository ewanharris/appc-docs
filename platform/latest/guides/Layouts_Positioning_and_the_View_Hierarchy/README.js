Ext.data.JsonP['Layouts_Positioning_and_the_View_Hierarchy']({"guide":" <!doctype html> <html> <head> <title>Layouts Positioning and the View Hierarchy</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004895\" class=\"content\"> <h1>Layouts Positioning and the View Hierarchy</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Objective\">Objective</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Contents\">Contents</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Units\">Units</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Settingdefaultunitsintiapp.xml\">Setting default units in tiapp.xml</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Thecoordinatesgrid\">The coordinates grid</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Positioninganddimensionsofelements\">Positioning and dimensions of elements</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Layoutmodes\">Layout modes</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Auto-sizebehaviors\">Auto-size behaviors</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-ScrollViewcontentsizes\">ScrollView content sizes</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_safe-id-TGF5b3V0c1Bvc2l0aW9uaW5nYW5kdGhlVmlld0hpZXJhcmNoeS16SW5kZXgmZGVmYXVsdHN0YWNraW5n\">zIndex &amp; default stacking</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Hands-onpractice\">Hands-on practice</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Goal\">Goal</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Resources\">Resources</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Steps\">Steps</a> </p> </li></ul></li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Summary\">Summary</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Layouts_Positioning_and_the_View_Hierarchy-section-src-29004895_LayoutsPositioningandtheViewHierarchy-Referencesandfurtherreading\">References and further reading</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Objective\"> <h2 class=\"heading\"><span>Objective</span></h2> <p>In this chapter, you will learn how to lay out your user interface components using Titanium&apos;s various positioning properties. You will examine the coordinates system used by Titanium, its view hierarchy, and the layering and positioning rules that it follows when rendering your UI. </p> </div> <div class=\"section section-2\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Contents\"> <h2 class=\"heading\"><span>Contents</span></h2> <p>The current layout system was introduced in Titanium SDK 2.0 with the release of the &quot;<a class=\"document-link\" href=\"#!/guide/UI_Composite_Layout_Behavior_Spec\">Composite UI Layout Specification</a>&quot;, which defined a consistent layout behavior between platforms and added the ability to set up the UI declaratively via <a class=\"document-link\" href=\"#!/guide/Alloy_Framework\">Alloy</a>. </p> <p>In this guide, we&apos;re going to explore the following factors that affect how you position elements within your app&apos;s UI: </p> <ul class=\"\"><li> <p>Units </p> </li><li> <p>The coordinates grid </p> </li><li> <p>Positioning and the view hierarchy </p> </li><li> <p>Layout modes </p> </li><li> <p>zIndex &amp; default stacking order </p> </li></ul> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Units\"> <h3 class=\"heading\"><span>Units</span></h3> <p>Placement and dimensions of UI elements are specified using a numeric value plus an implicit or explicit unit of measurement. If you don&apos;t specify a unit of measurement, the &quot;system&quot; unit is assumed. You can also set a default unit of measurement to use in your app by setting a tiapp.xml property. </p> <p>First, a couple of definitions we&apos;ll use in the rest of this guide: </p> <ul class=\"\"><li class=\"\"> <p><strong>dip</strong>: Density-independent pixels. A measurement which is translated natively to a corresponding pixel measure using a scale factor based on a platform-specific &quot;default&quot; density, and the device&apos;s physical density. </p> </li><li class=\"\"> <p><strong>System unit</strong>: A platform-dependent unit which is the default for how the system presents its view information to the native layout system. On Android this is pixels; on iOS it is dip. </p> </li></ul> <p>Supported units are: </p> <ul class=\"\"><li> <p>Absolute measurements </p> <ul class=\"\"><li class=\"\"> <p><strong>px</strong>: pixels </p> </li><li class=\"\"> <p><strong>mm</strong>: millimeters </p> </li><li class=\"\"> <p><strong>cm</strong>: centimeters </p> </li><li class=\"\"> <p><strong>in</strong>: inches </p> </li><li class=\"\"> <p><strong>dp/dip</strong>: Density-independent pixels (we sometimes call these &quot;points&quot;) </p> <ul class=\"\"><li> <p>Android: actual pixels = dip * (screen density) / 160 </p> </li><li> <p>iOS: actual pixels = dip * (screen density) / 163 (effectively 1dip=1px on standard, 1dip=2px on retina) </p> </li><li> <p>Windows: actual pixels = dip * (screen density) / 96 </p> </li></ul></li></ul></li><li> <p>Relative measurements </p> <ul class=\"\"><li class=\"\"> <p><strong>%</strong>: Percentage of the size of the parent. </p> <ul class=\"\"><li> <p>For x-axis values (width, left, right, center.x) this is relative to the parent&apos;s width </p> </li><li> <p>For y-axis values (height, top, bottom, center.y) this is relative to the parent&apos;s height. </p> </li></ul></li></ul></li></ul> <p>You would use these units of measurement like this: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"comments\">/* You would not normally mix units like this */</code></div> <div class=\"line\"><code class=\"plain\">\ttop: </code><code class=\"string\">&apos;10mm&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\tleft: </code><code class=\"string\">&apos;5px&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">&apos;30%&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\theight: 50 </code><code class=\"comments\">/* default units are used here */</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <div class=\"section section-4\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Settingdefaultunitsintiapp.xml\"> <h4 class=\"heading\"><span>Setting default units in tiapp.xml</span></h4> <p>You can specify the default unit type to use with untyped values. In the tiapp.xml file, you would add: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;property name=</code><code class=\"string\">&quot;ti.ui.defaultunit&quot;</code><code class=\"plain\"> type=</code><code class=\"string\">&quot;string&quot;</code><code class=\"plain\">&gt;value&lt;/property&gt;</code></div> </div> </div> <p>Where <tt class=\"\">value</tt> can be set to <tt class=\"\">px</tt>, <tt class=\"\">mm</tt>, <tt class=\"\">cm</tt>, <tt class=\"\">in</tt>, <tt class=\"\">dp</tt>, <tt class=\"\">dip</tt>, or <tt>system</tt>. The &quot;system&quot; value corresponds to the platform-dependent system unit as described above. If you do not specify this property in the tiapp.xml, then the units default to &quot;system&quot;. </p> </div> </div> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Thecoordinatesgrid\"> <h3 class=\"heading\"><span>The coordinates grid</span></h3> <p>Titanium uses a grid coordinate system for layout. Grid locations are based on the system unit (platform-dependent unit). This means that by default on iOS, elements are positioned on a density-independent grid and on Android on a density-dependent grid. The net result is that on iOS, elements are positioned in visually the same locations regardless of the actual density of the screen. On Android, elements are positioned at the same absolute pixel locations and might lay out differently depending on the device. </p> <ul class=\"\"><li> <p>iPhone with either original or retina display is based on a 320 x 480 dip grid. </p> </li><li> <p>iPad is based on a 1024 x 768 dip grid. </p> </li><li> <p>Android device screen sizes vary. Considering these emulator examples: </p> <ul class=\"\"><li> <p>HVGA emulator is 320 x 480 px </p> </li><li> <p>WVGA800 emulator is 480 x 800 px </p> </li><li> <p>WVGA854 emulator is 480 x 854 px </p> </li></ul></li></ul> <p>Remember that you can specify <tt class=\"\">dp</tt> or <tt>dip</tt> units on Android (and even set an app-level default in tiapp.xml) to achieve the same density-independent grid as offered by default on iOS. </p> </div> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Positioninganddimensionsofelements\"> <h3 class=\"heading\"><span>Positioning and dimensions of elements</span></h3> <p>Elements in Titanium are positioned relative to their parent container, such as a window or view. The positional options are: </p> <ul class=\"\"><li class=\"\"> <p><tt>top</tt> property which is relative to the parent&apos;s top edge. </p> </li><li class=\"\"> <p><tt>left</tt> property which is relative to the parent&apos;s left edge. </p> </li><li class=\"\"> <p><tt>bottom</tt> property which is relative to the parent&apos;s bottom edge. (Zero is located at the parent&apos;s bottom edge and higher numbers are above the bottom edge.) </p> </li><li class=\"\"> <p><tt>right</tt> property which is relative to the parent&apos;s right edge. (Zero is located at the parent&apos;s right edge and higher numbers are to the left of the right edge.) </p> </li><li class=\"\"> <p><tt>center</tt> property specifying the position of the view&apos;s center point relative to the parent&apos;s top/left corner. </p> </li></ul> <p>(A read-only <tt class=\"\">size</tt> property is available, which provides the <tt class=\"\">width</tt> and <tt>height</tt> of a view after it has been laid out by the window. This property won&apos;t provide the actual size of the view until a postlayout event has been received.) </p> <p>You specify a view&apos;s dimensions by setting the <tt class=\"\">width</tt> and <tt class=\"\">height</tt> properties. If you omit the <tt class=\"\">height</tt> property, but set the <tt class=\"\">top</tt> and <tt class=\"\">bottom</tt> properties, then the view&apos;s height will be calculated dynamically relative to the parent&apos;s top and bottom edges. The same is true when you omit the <tt class=\"\">width</tt> property, but set <tt class=\"\">left</tt> and <tt>right</tt>. </p> <p>Each of these attributes accept values with or without units, including percentage-based relative measurements as described above. </p> <p>In the following example, the red view is positioned at the 20,20 point relative to the window&apos;s top/left corner. The yellow view&apos;s bottom/right corner is 100 points/pixels from the bottom/right corner of the display. The blue view&apos;s center is at 160,240 and given its width of 50, this means its top-left corner would be at 135,215. The green view has a sufficiently negative <tt>top</tt> value given its width that it is positioned off the top of the screen. </p> <p> <img src=\"images/download/attachments/29004895/layout.png\" alt=\"images/download/attachments/29004895/layout.png\" class=\"confluence-embedded-image\" height=\"500\"> </img></p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Positioning</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Positioning\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({</code></div> <div class=\"line\"><code class=\"plain\">\tbackgroundColor: </code><code class=\"string\">&apos;#fff&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> redview = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\"> top: 20,</code></div> <div class=\"line\"><code class=\"plain\">\tleft: 20,</code></div> <div class=\"line\"><code class=\"plain\"> width: 10,</code></div> <div class=\"line\"><code class=\"plain\"> height: 10,</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&quot;red&quot;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(redview);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> yellowview = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\"> bottom: 100,</code></div> <div class=\"line\"><code class=\"plain\">\tright: 100,</code></div> <div class=\"line\"><code class=\"plain\"> width: 10,</code></div> <div class=\"line\"><code class=\"plain\"> height: 10,</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&quot;yellow&quot;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(yellowview);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> blueview = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\">\tcenter: {x: 160, y: 240},</code></div> <div class=\"line\"><code class=\"plain\">\twidth: 50,</code></div> <div class=\"line\"><code class=\"plain\">\theight: 50,</code></div> <div class=\"line\"><code class=\"plain\">\tbackgroundColor: </code><code class=\"string\">&quot;blue&quot;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(blueview);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> greenview = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\"> top: -20,</code></div> <div class=\"line\"><code class=\"plain\"> width: 10,</code></div> <div class=\"line\"><code class=\"plain\"> height: 10,</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&quot;green&quot;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(greenview);</code></div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Layoutmodes\"> <h3 class=\"heading\"><span>Layout modes</span></h3> <p>Titanium Windows and Views can employ one of three layout modes by setting its <tt>layout</tt> property to one of the following values: </p> <ul class=\"\"><li class=\"\"> <p><tt>composite</tt> - This is the default mode. Views are stacked on top of each other, where the last view added will be on top (unless zIndex is specified). Positional properties are relative to the parent container. </p> </li><li class=\"\"> <p><tt class=\"\">vertical</tt> - This layout mode stacks child views vertically and are horizontally centered. The child&apos;s <tt>top</tt> property becomes an offset value. It describes the number of units below the previously added view&apos;s bottom edge and can be used as padding. </p> </li><li class=\"\"> <p><tt class=\"\">horizontal</tt> - This layout mode lines up child views horizontally from left to right, starting from the parent&apos;s top/left corner. If horizontalWrap is set true, will wrap views to the next row if they don&apos;t fit on the current row. The child&apos;s <tt>left</tt> property becomes an offset. It&apos;s the position from the previous sibling&apos;s right edge and can be used as padding. </p> </li></ul> <p>Here&apos;s an exmaple of these layouts in action:<br> <img src=\"images/download/attachments/29004895/vert_and_horiz.png\" alt=\"images/download/attachments/29004895/vert_and_horiz.png\" class=\"confluence-embedded-image\" height=\"500\"> </img></br></p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Layout modes</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Layout modes\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({</code></div> <div class=\"line\"><code class=\"plain\">\tbackgroundColor:</code><code class=\"string\">&apos;#fff&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"comments\">// uses grid-drawing module from https://gist.github.com/1187384</code></div> <div class=\"line\"><code class=\"comments\">// to draw grid lines every 20 points</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> grid = require(</code><code class=\"string\">&apos;gridlines&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">grid.drawgrid(20,win);</code></div> <div class=\"line\"><code class=\"comments\">// draw a view that fills the window and set its layout property</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\">\tbackgroundColor: </code><code class=\"string\">&apos;transparent&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\ttop: 0,</code></div> <div class=\"line\"><code class=\"plain\">\tleft: 0,</code></div> <div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">&apos;100%&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\theight: </code><code class=\"string\">&apos;100%&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\">\tlayout: </code><code class=\"string\">&apos;vertical&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"comments\">// simple function for making colored boxes</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> makeView(color) {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">return</code><code class=\"plain\"> Ti.UI.createView({</code></div> <div class=\"line\"><code class=\"plain\"> top: 20,</code></div> <div class=\"line\"><code class=\"plain\"> left: 20,</code></div> <div class=\"line\"><code class=\"plain\"> width: 20,</code></div> <div class=\"line\"><code class=\"plain\"> height: 20,</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: color</code></div> <div class=\"line\"><code class=\"plain\">\t});</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">&apos;red&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">&apos;yellow&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">&apos;blue&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">&apos;green&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.add(view);</code></div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Auto-sizebehaviors\"> <h3 class=\"heading\"><span>Auto-size behaviors</span></h3> <p>You can auto-size a UI element by setting its <tt class=\"\">width</tt> and <tt>height</tt> properties to one of the following constants: </p> <ul class=\"\"><li class=\"\"> <p><tt>Ti.UI.SIZE</tt> will set the width or height to just-fit the view&apos;s contents </p> </li><li class=\"\"> <p><tt>Ti.UI.FILL</tt> will set the width or height to fill the parent. For a composite layout , this will be equal to the parent&apos;s width or height and will disregard previously added child views. For horizontal and vertical layouts, this takes into account previously added child views and will fill the remaining width or height available within the parent </p> </li></ul> <p>UI components exhibit default SIZE or FILL behaviors, as listed in this table: </p> <div class=\"tablewrap\"> <table class=\"confluenceTable\"> <thead> <tr> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>SIZE views </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>FILL views </p> </td> <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\"> <p>Mixed behavior </p> </td> </tr> </thead><tfoot class=\"\"/><tbody> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Button </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Window </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Toolbar: FILL for width, SIZE for height </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Label </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>View </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TableViewRow: FILL for width, SIZE for height </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>ImageView </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TabGroup </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Slider: FILL for width, SIZE for height </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>ProgressBar </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TableView </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Switch </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>WebView </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TextArea </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>ScrollView </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TextField </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>ScrollableView </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>Picker </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>SearchBar </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>ButtonBar </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> <tr> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>TableViewSection </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\"> <p>&#xA0; </p> </td> </tr> </tbody> </table> </div> <div class=\"section section-4\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-ScrollViewcontentsizes\"> <h4 class=\"heading\"><span>ScrollView content sizes</span></h4> <p>In the case of ScrollView, <tt class=\"\">contentWidth</tt> and <tt>contentHeight</tt> may also be set to &quot;auto&quot; or Ti.UI.SIZE, and in those cases, this is the expected behavior: </p> <ul class=\"\"><li> <p>When all children views have FILL behavior, the content area of the scroll view will be clipped to the physical size of the scroll view </p> </li><li> <p>Otherwise, the content area will grow according to the bottom offset of the bottom-most View and the right offset of right-most View. In some cases the bottom-most and right-most View may be the same View. </p> </li></ul> </div> </div> <div class=\"section section-3\" id=\"src-29004895_safe-id-TGF5b3V0c1Bvc2l0aW9uaW5nYW5kdGhlVmlld0hpZXJhcmNoeS16SW5kZXgmZGVmYXVsdHN0YWNraW5n\"> <h3 class=\"heading\"><span>zIndex &amp; default stacking</span></h3> <p>You can position elements atop one another. By default, as you add views to a parent container, they will overlay any views you previously added (assuming their boundaries overlap). You can control the stacking order by either changing the order you add elements to the container (not always convenient) or by setting the <tt class=\"\">zIndex</tt> property. As with HTML elements, <tt class=\"\">zIndex</tt> accepts an integer value of zero or greater. The higher the <tt>zIndex</tt> value, the closer to the top of the stack a view will become. </p> <p>On Android, <tt class=\"\">zIndex</tt> is only supported by <tt class=\"\">composite</tt> layouts. This property is ignored by <tt class=\"\">horizontal</tt> and <tt>vertical</tt> layouts. </p> </div> <div class=\"section section-3\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Hands-onpractice\"> <h3 class=\"heading\"><span>Hands-on practice</span></h3> <div class=\"section section-4\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Goal\"> <h4 class=\"heading\"><span>Goal</span></h4> <p>In this activity, you will test the position behavior of elements by implementing some of the code examples in this chapter. </p> </div> <div class=\"section section-4\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Resources\"> <h4 class=\"heading\"><span>Resources</span></h4> <p>To perform the steps in this activity, you will need the gridlines module from <a class=\"external-link external-link\" href=\"https://gist.github.com/1187384\" target=\"_blank\">https://gist.github.com/1187384</a>. </p> </div> <div class=\"section section-4\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Steps\"> <h4 class=\"heading\"><span>Steps</span></h4> <ol class=\"\"><li> <p>Create a new Titanium Mobile project. </p> </li><li> <p>Create a gridlines.js file containing the code shown at the Gist linked to above. </p> </li><li> <p>In app.js, remove all of the existing code. Declare a window, require the grid line module, and draw gridlines every 20 points, following the example code as shown in the Gist. </p> </li><li> <p>Implement the positioning code shown in the example labeled &quot;Positioning&quot; above. This will draw red, blue, yellow, and green boxes at various positions on the screen. </p> </li><li> <p>Build and run the project. Count the gridlines to confirm that elements were placed as described in this chapter. </p> </li><li> <p>Adjust the positioning properties of the various boxes to test positioning rules. </p> </li><li class=\"\"> <p>Try setting the window&apos;s <tt class=\"\">layout</tt> property to <tt class=\"\">vertical</tt> or <tt>horizontal</tt> to see the effect on the lines and boxes. Adjust the code so that the boxes are visible. </p> </li></ol> </div> </div> </div> <div class=\"section section-2\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Summary\"> <h2 class=\"heading\"><span>Summary</span></h2> <p>In this section, you learned how to lay out your user interface components using the various positioning properties. You examined the coordinates system used by Titanium, the view hierarchy, and the layering and positioning rules that Titanium follows when rendering your UI. Next we&apos;ll discuss how you can handle user interaction via events. </p> </div> <div class=\"section section-2\" id=\"src-29004895_LayoutsPositioningandtheViewHierarchy-Referencesandfurtherreading\"> <h2 class=\"heading\"><span>References and further reading</span></h2> <ul class=\"\"><li> <p><a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/3.2_positioning.zip\" target=\"_blank\">Finished code</a> </p> </li><li class=\"\"> <p>Titanium <a class=\"document-link\" href=\"#!/guide/UI_Composite_Layout_Behavior_Spec\">UI Composite Layout Behavior Spec</a> </p> </li><li> <p><a class=\"external-link external-link\" href=\"http://blog.krawaller.se/posts/titanium-app-for-explaining-layout-mechanisms/\" target=\"_blank\">Titanium app for explaining layout mechanisms</a> </p> </li></ul> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004895\"><span>Edit</span></a> </div> </body> </html> ","title":"Layouts Positioning and the View Hierarchy"});