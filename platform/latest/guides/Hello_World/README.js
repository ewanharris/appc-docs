Ext.data.JsonP['Hello_World']({"guide":" <!doctype html> <html> <head> <title>Hello World</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004884\" class=\"content\"> <h1>Hello World</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-Objective\">Objective</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-CreatingaNewMobileProject\">Creating a New Mobile Project</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-AppIDNamingGuidelines\">App ID Naming Guidelines</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-RunningYourApp\">Running Your App</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_safe-id-SGVsbG9Xb3JsZC1TaW11bGF0b3IvRW11bGF0b3I\">Simulator/Emulator</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-UndertheCovers\">Under the Covers</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-Hands-onPractice\">Hands-on Practice</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-Summary\">Summary</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-Objective\"> <h2 class=\"heading\"><span>Objective</span></h2> <p>In this document, we will take a focused look at creating mobile app using Studio and Titanium SDK. </p> <p>Before we can build our first app, we need to create a mobile project in Studio. During this process, we&apos;ll discuss the following critical aspects of mobile projects: </p> <ul class=\"\"><li> <p>The meta-information necessary for project creation </p> </li><li> <p>The default project structure </p> </li><li> <p>Launching projects in the simulator/emulator </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-CreatingaNewMobileProject\"> <h2 class=\"heading\"><span>Creating a New Mobile Project</span></h2> <p>You can create a new project in Studio one fo two ways: </p> <ul class=\"\"><li class=\"\"> <p>From the menu, select <strong class=\"\">File </strong>&gt;<strong class=\"\"> New </strong>&gt;<strong> Mobile App Project</strong> </p> </li><li class=\"\"> <p>Project Explorer, right-click in a open area and select <strong class=\"\">New </strong>&gt;<strong> Mobile App Project</strong> </p> </li></ul> <p>The <strong class=\"\">New Mobile Project</strong> wizard appears. The first step is to select a project template (in the <strong>Project Template</strong> window). You can choose between: </p> <ul class=\"\"><li class=\"\"> <p><strong>Alloy</strong> - create a project utilizing the Titanium MVC framework called Alloy </p> </li><li class=\"\"> <p><strong>Classic</strong> - create a classic Titanium project with no defined framework </p> </li></ul> <p>In the <strong>Project Location</strong> window, you&apos;ll need to fill in the following fields: </p> <ul class=\"\"><li class=\"\"> <p><strong>Project name</strong>: Your app&apos;s name as seen by users. </p> </li><li class=\"\"> <p><strong class=\"\">App Id</strong>: Titanium SDK&apos;s version of the Android Application Package Name or CF Bundle Identifier. <a class=\"document-link\" href=\"#!/guide/Hello_World-section-src-29004884_HelloWorld-AppIDNamingGuidelines\">See below</a> for guidelines and rules for App ID names. </p> </li><li class=\"\"> <p><strong>Company/Personal URL</strong>: URL of any website you wish to associate with the app. </p> </li><li class=\"\"> <p><strong>Titanium SDK Version</strong>: select the Titanium SDK to use for your project. </p> </li><li class=\"\"> <p><strong>Deployment Targets</strong>: you can create a single project to target. </p> </li><li class=\"\"> <p><strong class=\"\">Enable Axway Appcelerator Platform Services</strong>: Toggle to enable or disable app features such as <a class=\"document-link\" href=\"#!/guide/AMPLIFY_Appcelerator_Services\">Cloud</a>, <a class=\"document-link\" href=\"#!/guide/Appcelerator_Analytics\">Analytics</a>, and <a class=\"document-link\" href=\"#!/guide/Hyperloop\">Hyperloop</a>. </p> </li></ul> <p>Once filling in these fields, Studio will create a default project structure for you based on the given meta-information. </p> <p> <img src=\"images/download/attachments/29004884/App_explorer.png\" alt=\"images/download/attachments/29004884/App_explorer.png\" class=\"confluence-embedded-image\" width=\"300\"> </img></p> <ul class=\"\"><li class=\"\"> <p><strong>Resources</strong> folder: your project&apos;s code files and graphics are stored in this folder </p> </li><li class=\"\"> <p><strong>app.js</strong>: your project&apos;s bootstrap file. Every project has one; it&apos;s the file loaded first when your app is launched </p> </li><li class=\"\"> <p><strong class=\"\">tiapp.xml</strong>: The details you enter in the new project wizard are used to populate the <tt>tiapp.xml</tt> file and the manifest file. </p> </li></ul> <p>Those are basically the only required files, but you can augment the project with others. For example, you don&apos;t have to put all of your code into <tt class=\"\">app.js</tt>. You could put all your graphics in the <tt class=\"\">Resources/assets/images</tt> folder, or you could put them into subfolders. We&apos;ll dig more deeply into cross-platform development later, but the <tt class=\"\">android</tt> and <tt>iphone</tt> directories within Resources are locations for your platform-specific assets. </p> <div class=\"section section-3\" id=\"src-29004884_HelloWorld-AppIDNamingGuidelines\"> <h3 class=\"heading\"><span>App ID Naming Guidelines</span></h3> <p>An App ID must be unique across all apps installed on a device. For published apps, the name must be unique across the entire App Store/Market. Therefore, we recommend you use the Java Package Name style when assigning your App ID. Following this format, you enter a name in reverse domain name format with your app&apos;s name at the end (i.e., com.yourdomain.yourappname). While technically valid, a one-word App ID (such as &quot;testapp&quot;) will cause build errors. </p> <p>Some additional points: </p> <ul class=\"\"><li> <p>You cannot include spaces or special characters in your App ID. </p> </li><li> <p>Use all lowercase, as uppercase or mixed case could cause errors on Android. </p> </li><li> <p>You cannot use any Java keywords in the App ID &#x2013; words like &apos;case&apos; or &apos;package&apos; will cause an error that will prevent Titanium from building your app. </p> </li><li> <p>You cannot change the App ID once you publish an app because the App Store/Market would consider the change to mean you&apos;re publishing a new app, not an upgrade. </p> </li><li class=\"\"> <p>The App ID is related to the Bundle Identifier you define in the iOS Provisioning Portal or iTunes Connect, see <a class=\"document-link\" href=\"#!/guide/Distributing_iOS_apps\">Distributing iOS apps</a> for more info. </p> </li></ul> <p>(On Android, the App ID is technically an Application Package Name, not a Java Package Name. See <a class=\"external-link external-link\" href=\"http://blog.javia.org/android-package-name/\" target=\"_blank\">http://blog.javia.org/android-package-name/</a> for further info on the distinction.) </p> </div> </div> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-RunningYourApp\"> <h2 class=\"heading\"><span>Running Your App</span></h2> <p>To build and run your app, select an iOS simulator or Android emulator of your choice and click the green Run button. </p> <p> <img src=\"images/download/attachments/29004884/run_and_select.png\" alt=\"images/download/attachments/29004884/run_and_select.png\" class=\"confluence-embedded-image\"> </img></p> </div> <div class=\"section section-2\" id=\"src-29004884_safe-id-SGVsbG9Xb3JsZC1TaW11bGF0b3IvRW11bGF0b3I\"> <h2 class=\"heading\"><span>Simulator/Emulator</span></h2> <p>It&apos;s more than simple semantics, but with iOS the desktop software that runs your app is called a simulator; on Android, it&apos;s an emulator. Whether writing a native Objective-C app or a Mobile app, your iPhone/iPad code is cross-compiled and turned into an OS X executable. It&apos;s then run by OS X, simulating the environment within an iOS device. With Android, the emulator provides a virtual hardware environment that runs the actual Android operating system, platform components, and your app&apos;s code. </p> <p>With both platforms, the test environment isn&apos;t a perfect representation of the actual mobile device. Some subtle (and not-so-subtle) differences will present themselves. You should always test your app on a physical device before publishing it. </p> <p>We&apos;ll try to be generic in this guide by saying simulator/emulator when referring to the virtual software device thingie. But, forgive us if we say simulator or emulator alone. </p> </div> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-UndertheCovers\"> <h2 class=\"heading\"><span>Under the Covers</span></h2> <p>Let&apos;s take a high-level look at how your source code is turned into a native app. Titanium&apos;s tools include a pre-compiler, front-end compiler, and a set of Node.js build scripts that interact with the native SDK tools. </p> <p>To start, Titanium precompiles your JavaScript to minify it. Titanium&apos;s pre-compiler statically analyzes your code and builds a dependency hierarchy of all the Titanium APIs used by your application. The front-end compiler&apos;s job is to create native stub files. These stubs include appropriate platform-specific native code, a native project file (if necessary), and any specific code that is necessary to compile Titanium code for a given platform compiler. Finally, Titanium calls out to the platform-specific compiler tools (for example, xcodebuild for iOS) to compile the final native application. </p> <p>On the iOS side, your JavaScript is Base64 encoded, inlined as a variable in a C file, and is then compiled. Your JavaScript is not converted to Objective-C. It remains Javascript and is interpreted at runtime using the JavaScriptCore interpreter. On Android, your JavaScript is precompiled to bytecode. At runtime, your code is interpreted by the Rhino/V8 JavaScript interpreter. In both cases, your original code is not retrievable in any sort of human-readable form. </p> </div> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-Hands-onPractice\"> <h2 class=\"heading\"><span>Hands-on Practice</span></h2> <p><strong>Goal</strong>: create a default project and examine the resulting files. </p> <ol class=\"\"><li class=\"\"> <p>In Studio, use the <strong class=\"\">New Mobile Project</strong> wizard to create a new <strong>Classic</strong> project. For this exercise, we&apos;ll fill in the following: </p> <ul class=\"\"><li> <p>Project name: hello_world </p> </li><li> <p>App Id: com.test.helloworld </p> </li><li> <p>Titanium SDK Version: Select the latest version installed </p> </li><li> <p>Deployment Targets: have at least one target enabled </p> </li><li> <p>Enable Axway Appcelerator Platform Services: disable this option </p> </li></ul></li><li class=\"\"> <p>If the App Explore view isn&apos;t open, go to <strong class=\"\">Window</strong> &gt; <strong class=\"\">Show View</strong> &gt; <strong>App Explorer</strong>. </p> </li><li> <p>Once the project is created, close the tiapp.xml file. </p> </li><li class=\"\"> <p>Examine the code of the app.js file. The default project creates a simple two-tab application. Each tab contains a window. Each window contains a label (<tt>tabGroup.addTab</tt>). </p> </li><li class=\"\"> <p><strong class=\"\">Update the label</strong> on &quot;<tt class=\"\">Tab 1</tt>&quot; to read &quot;<tt>Hello World!</tt>&quot; and save your changes. </p> </li><li class=\"\"> <p>Select an iOS <strong class=\"\">simulator</strong> or Android <strong class=\"\">emulator</strong> and click the green <strong>Run</strong> button. </p> </li><li class=\"\"> <p><strong>Test the application</strong> in the simulator/emulator. Close the simulator when you&apos;re done. </p> </li><li> <p>Using Project or app Explorer, examine the project files created by Studio. </p> </li></ol> </div> <div class=\"section section-2\" id=\"src-29004884_HelloWorld-Summary\"> <h2 class=\"heading\"><span>Summary</span></h2> <p>In this chapter, you took a brief look at creating Mobile applications. In the remainder of this course, we&apos;ll dig deep into the various aspects of creating mobile applications with the Titanium SDK, such as user interface construction, networking, localization, and much more. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004884\"><span>Edit</span></a> </div> </body> </html> ","title":"Hello World"});