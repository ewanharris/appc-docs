Ext.data.JsonP['iOS_Module_Quick_Start']({"guide":" <!doctype html> <html> <head> <title>iOS Module Quick Start</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-43288582\" class=\"content\"> <h1>iOS Module Quick Start</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Introduction\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-iOSmoduleprerequisites\">iOS module prerequisites</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Createanewmodule\">Create a new module</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-ValidatetheSDKversion\">Validate the SDK version</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Buildandpackagethemodule\">Build and package the module</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Testthemodule\">Test the module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Createatestapplication\">Create a test application</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Addthemoduleasadependencytotheproject\">Add the module as a dependency to the project</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-LoadthemoduleandmakemoduleAPIcalls\">Load the module and make module API calls</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_safe-id-aU9TTW9kdWxlUXVpY2tTdGFydC1Vc2VyZXF1aXJlKCl0b2ltcG9ydHlvdXJtb2R1bGU\">Use require() to import your module</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Runtheapplication\">Run the application</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Modifythemodule\">Modify the module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-OpenthemoduleinXcode\">Open the module in Xcode</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Addaviewproxyandview\">Add a view proxy and view</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Addaproperty\">Add a property</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Testthemodule.1\">Test the module</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start-section-src-43288582_iOSModuleQuickStart-Nextsteps\">Next steps</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>This guide walks through the steps to create, build and test an iOS module using Studio. The equivalent CLI instructions are given in the information boxes near the top of each section. </p> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-iOSmoduleprerequisites\"> <h2 class=\"heading\"><span>iOS module prerequisites</span></h2> <p>To develop an iOS-based Module, you&apos;ll need all of the software required to build a Titanium application for iOS: </p> <ul class=\"\"><li> <p>Titanium SDK </p> </li><li class=\"\"> <p>Supported versions of Xcode and the iOS SDK, as described in <a class=\"document-link\" href=\"#!/guide/Installing_the_iOS_SDK\">Installing the iOS SDK</a> </p> </li><li> <p>Studio or the Appcelerator Command-Line Interface (CLI) for creating modules, and building and running test applications </p> </li></ul> <p>ComExampleTestModuleIn addition, Python, Python setuptools and the Python markdown (or markdown2) module are both required by the module build scripts. For Mac OS X, Python and the Python setuptools should already be installed. For the markdown module, see <a class=\"document-link\" href=\"#!/guide/Installing_Required_Python_Packages\">Installing Required Python Packages</a>. </p> <p>Like iOS application development, iOS module development is only supported on OS X. </p> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Createanewmodule\"> <h2 class=\"heading\"><span>Create a new module</span></h2> <p>First, create a new module project. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal, change the current working directory to your workspace and run: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">cd</code><code class=\"plain\"> </code><code class=\"plain\">/PATH/TO/WORKSPACE</code></div> <div class=\"line\"><code class=\"plain\">appc new -n </code><code class=\"functions\">test</code><code class=\"plain\"> --</code><code class=\"functions\">id</code><code class=\"plain\"> com.example.</code><code class=\"functions\">test</code></div> <div class=\"line\"><code class=\"comments\">### when prompted for the project type, select &quot;Titanium Module&quot; </code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>From the menu, select <strong class=\"\">File</strong> &gt; <strong class=\"\">New</strong> &gt; <strong class=\"\">Mobile Module Project</strong> to open the <strong>New Mobile Module Project</strong> dialog. </p> </li><li class=\"\"> <p>In the <strong class=\"\">Project name</strong> field, enter <strong>test</strong>. </p> </li><li class=\"\"> <p>In the <strong class=\"\">Module Id</strong> field, enter <strong>com.example.test</strong>. </p> </li><li class=\"\"> <p>In <strong class=\"\">Deployment Targets</strong>, select <strong>iOS</strong>. </p> </li><li class=\"\"> <p>Click <strong class=\"\">Next</strong>, then click <strong>Finish</strong>. </p> </li></ol> <p>Studio sets up a new folder called <tt>test</tt> that contains your module project. </p> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-ValidatetheSDKversion\"> <h2 class=\"heading\"><span>Validate the SDK version</span></h2> <p>You should validate the used Titanium SDK version inside the <tt>titanium.xcconfig</tt> to point to a version that is installed on your machine. This is especially important to validate when using existing module projects that may have been created with a different SDK version. </p> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Buildandpackagethemodule\"> <h2 class=\"heading\"><span>Build and package the module</span></h2> <p>Next, build the module and package it. This process produces a ZIP file containing a binary library with unprocessed module assets, example code and documentation. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal, go to the module&apos;s <tt class=\"\">ios</tt> directory and run the <tt>appc run</tt> command: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">cd</code><code class=\"plain\"> </code><code class=\"functions\">test</code><code class=\"plain\">/ios</code></div> <div class=\"line\"><code class=\"plain\">appc run -p ios --build-only</code></div> </div> </div> <p>Optional: After the build completes, either unzip the built module in the Titanium SDK home path or in your local project: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">unzip -o com.example.</code><code class=\"functions\">test</code><code class=\"plain\">-iphone-1.0.0.zip -d ~</code><code class=\"plain\">/Library/Application</code><code class=\"plain\">\\ Support</code><code class=\"plain\">/Titanium/</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>Select your module folder in the <strong>Project Explorer</strong> view. </p> </li><li class=\"\"> <p>Verify <strong class=\"\">Package</strong> and <strong class=\"\">iOS Module</strong> are displayed in <strong class=\"\">Launch Mode</strong> and <strong>Launch Target</strong>, respectively. </p> </li><li class=\"\"> <p>Click the Package icon to open the <strong>Package iOS Module</strong> dialog. </p> </li><li class=\"\"> <p>In <strong class=\"\">Output Location</strong>, choose the <strong>Titanium SDK</strong> to install the module in the Titanium SDK home path to be accessed by any Titanium application. </p> </li><li class=\"\"> <p>Click <strong>Finish</strong>. </p> </li></ol> <p>Studio builds and installs the module to the Titanium SDK home path. </p> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Testthemodule\"> <h2 class=\"heading\"><span>Test the module</span></h2> <p>To test the module, create a test application and add the module as a dependency of the project. Then, load the module and make module API calls to the module reference. </p> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Createatestapplication\"> <h3 class=\"heading\"><span>Create a test application</span></h3> <p> </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a new terminal window, change the current working directory to your workspace and run the following commands: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">cd</code><code class=\"plain\"> </code><code class=\"plain\">/PATH/TO/WORKSPACE</code></div> <div class=\"line\"><code class=\"plain\">appc new -t titanium -p ios -n Hello -u http:</code><code class=\"plain\">//</code><code class=\"plain\"> --</code><code class=\"functions\">id</code><code class=\"plain\"> com.example.hello</code></div> <div class=\"line\"><code class=\"functions\">cd</code><code class=\"plain\"> Hello/</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>From the menu, select <strong class=\"\">File</strong> &gt; <strong class=\"\">New</strong> &gt; <strong class=\"\">Mobile App Project</strong> to open the <strong>New Mobile App Project</strong> dialog. </p> </li><li class=\"\"> <p>On the <strong class=\"\">Project Template</strong> page, select <strong class=\"\">Default Alloy Project</strong> as the template type, then click <strong>Next</strong>. </p> </li><li class=\"\"> <p>On the <strong>Project Location</strong> page, enter the following information: </p> <ul class=\"\"><li class=\"\"> <p>In the <strong class=\"\">Project Name</strong> field, enter <strong>Hello</strong>. </p> </li><li class=\"\"> <p>In the <strong class=\"\">App ID</strong> field, enter <strong>com.example.hello</strong>. </p> </li><li class=\"\"> <p>In <strong class=\"\">Deployment Targets</strong>, select <strong class=\"\">iPhone</strong> and <strong>iPad</strong>. </p> </li></ul></li><li class=\"\"> <p>Click <strong>Finish</strong> to create the project. </p> </li></ol> <p>Studio sets up a new folder called <tt>Hello</tt> that contains the test application you will be using to test the module. </p> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Addthemoduleasadependencytotheproject\"> <h3 class=\"heading\"><span>Add the module as a dependency to the project</span></h3> <p>To load the module in the application, you need to add it as a dependency to the project. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>Open the <tt class=\"\">tiapp.xml</tt> and update the <tt>&lt;modules/&gt;</tt> element to include the module as a dependency to the project: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">ti</code><code class=\"plain\">:app&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">module</code><code class=\"plain\"> </code><code class=\"color1\">platform</code><code class=\"plain\">=</code><code class=\"string\">&quot;iphone&quot;</code><code class=\"plain\">&gt;com.example.test&lt;/</code><code class=\"keyword\">module</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">ti</code><code class=\"plain\">:app&gt;</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>Open the <tt>tiapp.xml</tt> file located in the root directory of the project. </p> </li><li class=\"\"> <p>Under the <strong class=\"\">Modules</strong> section, click the <strong>Add</strong> button. </p> </li><li class=\"\"> <p>Select <strong>com.example.test</strong>. </p> </li><li class=\"\"> <p>Click <strong>OK</strong>. </p> </li></ol> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-LoadthemoduleandmakemoduleAPIcalls\"> <h3 class=\"heading\"><span>Load the module and make module API calls</span></h3> <p> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>The module can be loaded by passing the module ID to the <tt class=\"\">require()</tt> method, which returns a reference to the module that API calls can be made on.<br>Since Titanium SDK 7.1.0 and later, you can also import it using the ES6+ <tt>import</tt> statements. </br></p> </div> <p>Open the <tt>app/alloy.js</tt> file and replace the code with the following, which invokes API calls to the module: </p> <div class=\"section section-4\" id=\"src-43288582_safe-id-aU9TTW9kdWxlUXVpY2tTdGFydC1Vc2VyZXF1aXJlKCl0b2ltcG9ydHlvdXJtb2R1bGU\"> <h4 class=\"heading\"><span>Use require() to import your module</span></h4> <p>Before SDK 7.1.0, modules are imported as the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/alloy.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/alloy.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> test = require(</code><code class=\"string\">&apos;com.example.test&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;module is =&gt; &apos;</code><code class=\"plain\"> + test);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;module example() method returns =&gt; &apos;</code><code class=\"plain\"> + test.example());</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;module exampleProp is =&gt; &apos;</code><code class=\"plain\"> + test.exampleProp);</code></div> <div class=\"line\"><code class=\"plain\">test.exampleProp = </code><code class=\"string\">&apos;This is a test value&apos;</code><code class=\"plain\">;</code></div> </div> </div> <p>Since SDK 7.1.0, you can use import statements and template strings, see the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/alloy.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/alloy.js\"> <div class=\"line\"><code class=\"plain\">import test from </code><code class=\"string\">&apos;com.example.test&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(`module is =&gt; ${test}`);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(`module example() method returns =&gt; ${test.example()}`);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(`module exampleProp is =&gt; ${test.exampleProp}`);</code></div> <div class=\"line\"><code class=\"plain\">test.exampleProp = </code><code class=\"string\">&quot;This is a test value&quot;</code><code class=\"plain\">;</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Runtheapplication\"> <h3 class=\"heading\"><span>Run the application</span></h3> <p> </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal that has the test app as its current working directory, run: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">appc run -p ios</code></div> </div> </div> </div> <p>In the Studio toolbar, select <strong class=\"\">Run</strong> in <strong class=\"\">Launch Modes</strong> and select an iOS simulator in <strong>Launch Targets</strong>. </p> <p>Studio builds and launches the application on the select iOS simulator. Monitor the <strong>Console</strong> view for log output. </p> <p>The console lines seen below show us that the module is working as expected. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Console</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Console\"> <div class=\"line\"><code class=\"plain\">[INFO] module is =&gt; [object ComExampleTestModule]</code></div> <div class=\"line\"><code class=\"plain\">[INFO] module example() method returns =&gt; hello world</code></div> <div class=\"line\"><code class=\"plain\">[INFO] module exampleProp is =&gt; hello world</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Modifythemodule\"> <h2 class=\"heading\"><span>Modify the module</span></h2> <p>Let&apos;s modify the module code to create a view object and access a string property. </p> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-OpenthemoduleinXcode\"> <h3 class=\"heading\"><span>Open the module in Xcode</span></h3> <p>Titanium creates a basic Xcode project, which is used to build the module. You can open this project in Xcode, the IDE used to develop iOS applications and used by the Titanium toolchain to build your iOS applications and modules. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal, run: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">open</code><code class=\"plain\"> </code><code class=\"functions\">test</code><code class=\"plain\">/ios/test</code><code class=\"plain\">.xcodeproj</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>Right-click the <tt class=\"\">test.xcodeproj</tt> folder and select <strong class=\"\">Show In</strong> &gt; <strong>Terminal</strong>. </p> </li><li> <p>In the Terminal, run the following command: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"functions\">open</code><code class=\"plain\"> .</code></div> </div> </div> </li></ol> <p>Your module project is now open in Xcode. Expand the <tt>Classes</tt> folder and take a look at the default files created by the Titanium SDK: </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">ComExampleTestModule.h</tt> and <tt>ComExampleTestModule.m</tt>: These are the header and source file for the module class. Every module requires a module class (and only one module class), which acts as the base API for the module, such as providing the module ID, GUID, etc. </p> </li><li class=\"\"> <p><tt class=\"\">ComExampleTestModuleAssets.h</tt> and <tt>ComExampleTestModuleAssets.m</tt>: These are the header and source files to manage module assets. These files are auto-generated. You can ignore these for now in this tutorial. </p> </li></ul> <p>Notice that all the files start with the module ID in camel case notation. Every file and class you add to the module project must start with name and every file and class you add must end with <tt class=\"\">Proxy</tt>, <tt class=\"\">ViewProxy</tt> or <tt>View</tt>, which determines how Titanium uses the files. Titanium uses a strict naming convention and directory structure to manage the module classes and resources. If a file or class is added to the project and does not conform to these conventions, it will be treated as a normal non-Titanium class. It will be accessible from Objective-C code but not from JavaScript. </p> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Addaviewproxyandview\"> <h3 class=\"heading\"><span>Add a view proxy and view</span></h3> <p>To display any UI with a module, create a view proxy and view in pairs. Create the four files below for your Xcode project and save them in the module&apos;s <tt>iphone/Classes</tt> directory. </p> <p>In Xcode, for each file: </p> <ol class=\"\"><li class=\"\"> <p>Right-click the project and select <strong>New File...</strong> </p> </li><li class=\"\"> <p>For the header files, select <strong class=\"\">Header File</strong>, and for the source files, select <strong class=\"\">Objective-C </strong> <strong class=\"\">File</strong>, then click <strong>Next</strong>. </p> </li><li class=\"\"> <p>For the Objective-C files, enter the name of the file and click <strong>Next</strong> to proceed to the last dialog. </p> </li><li class=\"\"> <p>For the header files, enter the name of the file in the <strong>Save As</strong> field. </p> </li><li class=\"\"> <p>For both files, select the module&apos;s <tt>Classes</tt> folder. </p> </li><li class=\"\"> <p>Ensure that the <strong class=\"\">Target</strong> <tt>test</tt> is selected. </p> </li><li class=\"\"> <p>Click <strong>Create</strong>. </p> </li></ol> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTestViewProxy.h</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTestViewProxy.h\"> <div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">&quot;TiViewProxy.h&quot;</code></div> <div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestViewProxy: TiViewProxy {</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTestViewProxy.m</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTestViewProxy.m\"> <div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">&quot;ComExampleTestViewProxy.h&quot;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@implementation</code><code class=\"plain\"> ComExampleTestViewProxy</code></div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTestView.h</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTestView.h\"> <div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">&quot;TiUIView.h&quot;</code></div> <div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestView: TiUIView {</code></div> <div class=\"line\"><code class=\"plain\"> UIView *square;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ComExampleTestView.m</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ComExampleTestView.m\"> <div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">&quot;ComExampleTestView.h&quot;</code></div> <div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">&quot;TiUtils.h&quot;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@implementation</code><code class=\"plain\"> ComExampleTestView</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"plain\">- (</code><code class=\"keyword\">void</code><code class=\"plain\">)initializeState</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Creates and keeps a reference to the view upon initialization</code></div> <div class=\"line\"><code class=\"plain\"> square = [[UIView alloc] initWithFrame:[self frame]];</code></div> <div class=\"line\"><code class=\"plain\"> [self addSubview:square];</code></div> <div class=\"line\"><code class=\"plain\"> [</code><code class=\"keyword\">super</code><code class=\"plain\"> initializeState];</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">- (</code><code class=\"keyword\">void</code><code class=\"plain\">)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Sets the size and position of the view</code></div> <div class=\"line\"><code class=\"plain\"> [TiUtils setView:square positionRect:bounds];</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"plain\">- (</code><code class=\"keyword\">void</code><code class=\"plain\">)setColor_:(id)color</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Assigns the view&apos;s background color</code></div> <div class=\"line\"><code class=\"plain\"> square.backgroundColor = [[TiUtils colorValue:color] _color];</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> <p>The <tt class=\"\">ComExampleTestViewProxy</tt> class extends the <tt>TiViewProxy</tt> class. This class exposes the view to the JavaScript and acts as an intermediary between the JavaScript and the native view. Normally, you do not need to implement any APIs in this class, but you can hook into the View&apos;s lifecycle events. </p> <p>The <tt class=\"\">ComExampleTestView</tt> class extends the <tt class=\"\">TiUIView</tt> class. The TiUIView can be added to other Titanium views and windows, which makes it the perfect place for a UIView to be added so that it can be displayed in a Titanium app. This class creates the native view to display. The class implements three methods of the <tt>TiUIView</tt> class and a custom setter method: </p> <ul class=\"\"><li class=\"\"> <p><strong class=\"\"> <tt>initializeState</tt> </strong>: This method is called when the view is initialized. In this example, we are using this method as a place to create a native UIView which is called square. </p> </li><li class=\"\"> <p><strong class=\"\"> <tt class=\"\">frameSizeChanged</tt> </strong>: This method is called when the view&apos;s dimensions change. The method calls a TiUtils helper function to update the dimensions of square. In JavaScript, this occurs when the <tt class=\"\">width</tt>, <tt class=\"\">height</tt>, <tt class=\"\">top</tt>, <tt class=\"\">bottom</tt>, <tt class=\"\">left</tt> or <tt>right</tt> properties are invoked. </p> </li><li class=\"\"> <p><strong class=\"\"> <tt class=\"\">setColor_</tt> </strong>: All setter methods in a View class must end with an underscore (_), which exposes the property to the JavaScript application. When <tt>color</tt> property is invoked, the method updates the background color of the square. </p> </li></ul> <p>Notice that there is no code tying <tt class=\"\">ComExampleTestView</tt> to <tt>ComExampleTestViewProxy</tt>. The naming convention is what causes the View to be connected to its ViewProxy. </p> <p>To call the method to create the view from JavaScript, call the module&apos;s <tt class=\"\">createView</tt> <tt class=\"\">()</tt> method. The name of the method is the name of the view class without the module ID, then prefixed with <tt class=\"\">create</tt>. For example, if the class was called <tt class=\"\">ComExampleTestMyView</tt> (rather than <tt class=\"\">ComExampleTestView</tt>), the method would be called <tt class=\"\">createMyView()</tt> (rather than <tt>createView()</tt>). </p> <p>Below is an example of calling <tt>createView()</tt>, and passing dimensions and color properties to the method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Example</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Example\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = test.createView({</code></div> <div class=\"line\"><code class=\"plain\"> color: </code><code class=\"string\">&apos;blue&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> height: 50,</code></div> <div class=\"line\"><code class=\"plain\"> width: 50</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(view);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Addaproperty\"> <h3 class=\"heading\"><span>Add a property</span></h3> <p>A Proxy is a key/value store like an NSDictionary (Objective-C) or an Object (JavaScript). Without any modification, you can set properties on a Module, Proxy, or ViewProxy and then read them back at will as if they were properties. You can also override the getters and setters and do some custom logic. </p> <p>Modify the default module class files to store and retrieve a string value. </p> <p>First, modify the <tt>ComExampleTestModule.h</tt> file to declare a variable to hold the string: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestModule : TiModule {</code></div> <div class=\"line\"><code class=\"plain\"> NSString *foo;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> <p>Next, modify the example setter and getter to actually set and get the variable you just declared. These methods are already declared in the <tt class=\"\">ComExampleTestModule.m</tt> file but not implemented. Titanium requires that all setter methods be declared with the method name starting with <tt class=\"\">set</tt> and being passed an <tt>id</tt> datatype. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// More methods here ...</code></div> <div class=\"line\"><code class=\"plain\">- (NSString *)exampleProp</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> NSLog(@</code><code class=\"string\">&quot;[INFO] In Module - the stored value for exampleProp: %@&quot;</code><code class=\"plain\">, foo);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> foo;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">- (</code><code class=\"keyword\">void</code><code class=\"plain\">)setExampleProp:(id)value</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Macro from TiBase.h to type check the data</code></div> <div class=\"line\"><code class=\"plain\"> ENSURE_STRING(value);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Pass the new value to our existing property</code></div> <div class=\"line\"><code class=\"plain\"> foo = value;</code></div> <div class=\"line\"><code class=\"plain\"> NSLog(@</code><code class=\"string\">&quot;[INFO] In Module - the new value for exampleProp: %@&quot;</code><code class=\"plain\">, value);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>In the JavaScript code, the <tt class=\"\">foo</tt> string can be accessed using the <tt class=\"\">exampleProp</tt> property, and <tt class=\"\">getExampleProp()</tt> and <tt class=\"\">setExampleProp</tt> <tt>()</tt> methods. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>If you do not need a custom getter or setter, you can use the <tt class=\"\">@property</tt> notation with the <tt>copy</tt> attribute to create a property. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestModule : TiModule</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@property</code><code class=\"plain\">(copy) NSString *foo;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@end</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43288582_iOSModuleQuickStart-Testthemodule.1\"> <h3 class=\"heading\"><span>Test the module</span></h3> <p>Open the <tt>app/views/index.xml</tt> file and replace the code with the following, which loads the module and displays a red square: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!-- Invokes the createView method and provides a reference to the module in the controller --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;test&quot;</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;com.example.test&quot;</code><code class=\"plain\"> </code><code class=\"color1\">method</code><code class=\"plain\">=</code><code class=\"string\">&quot;createView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">height</code><code class=\"plain\">=</code><code class=\"string\">&quot;50&quot;</code><code class=\"plain\"> </code><code class=\"color1\">width</code><code class=\"plain\">=</code><code class=\"string\">&quot;50&quot;</code><code class=\"plain\"> </code><code class=\"color1\">color</code><code class=\"plain\">=</code><code class=\"string\">&quot;red&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <p>Open the <tt>app/controllers/index.js</tt> file and replace the code with the following, which invokes API calls to the module: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/controllers/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/controllers/index.js\"> <div class=\"line\"><code class=\"plain\">$.index.open();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;module -&gt;&apos;</code><code class=\"plain\"> + $.test);</code></div> <div class=\"line\"><code class=\"plain\">$.test.exampleProp = </code><code class=\"string\">&apos;foobar&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;exampleProp: &apos;</code><code class=\"plain\"> + $.test.getExampleProp());&#xA0;</code></div> </div> </div> <p>Build and install your module, then run the example app. </p> <p>When the application starts running, you see should a red square in the middle of the screen and see the log output below, which means the application successfully loaded the module and called its APIs. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Console</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Console\"> <div class=\"line\"><code class=\"plain\">[INFO] In Module - the new value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp =&gt; foobar</code></div> <div class=\"line\"><code class=\"plain\">[INFO] In Module - the stored value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp =&gt; foobar</code></div> <div class=\"line\"><code class=\"plain\">[INFO] exampleProp: foobar</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43288582_iOSModuleQuickStart-Nextsteps\"> <h2 class=\"heading\"><span>Next steps</span></h2> <ul class=\"\"><li class=\"\"> <p>For information about how to structure your module project, add assets or third-party frameworks to your module project or more details on how to use the CLI or Studio, see <a class=\"document-link\" href=\"#!/guide/iOS_Module_Project\">iOS Module Project</a>. </p> </li><li class=\"\"> <p>For information about how to construct the class components for your project, see <a class=\"document-link\" href=\"#!/guide/iOS_Module_Quick_Start\">iOS Module Quick Start</a>. </p> </li><li> <p>For more examples of using the module API, see the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-modules/ti.moddevguide\" target=\"_blank\">ti.moddevguide Github project</a>. </p> </li></ul> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43288582\"><span>Edit</span></a> </div> </body> </html> ","title":"iOS Module Quick Start"});