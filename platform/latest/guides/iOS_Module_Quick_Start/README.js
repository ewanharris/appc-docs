Ext.data.JsonP['iOS_Module_Quick_Start']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>iOS Module Quick Start</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"43288582\" class=\"content\">\n            <h1>iOS Module Quick Start</h1>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-iOSModulePrerequisites\">iOS Module Prerequisites</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-CreateaNewModule\">Create a New Module</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-BuildandPackagetheModule\">Build and Package the Module</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-TesttheModule\">Test the Module</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-CreateaTestApplication\">Create a Test Application</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-AddtheModuleasaDependencytotheProject\">Add the Module as a Dependency to the Project</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-LoadtheModuleandMakeModuleAPICalls\">Load the Module and Make Module API Calls</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-RuntheApplication\">Run the Application</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-ModifytheModule\">Modify the Module</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-OpentheModuleinXcode\">Open the Module in Xcode</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-AddaViewProxyandView\">Add a View Proxy and View</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-AddaProperty\">Add a Property</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-TesttheModule.1\">Test the Module</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start-section-43288582_iOSModuleQuickStart-NextSteps\">Next Steps</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>\nThis guide walks through the steps to create, build and test an iOS module using Studio.  The equivalent CLI instructions are given in the information boxes near the top of each section.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-iOSModulePrerequisites\">\n        <h2 class=\"heading \"><span>iOS Module Prerequisites</span></h2>\n    <p>\nTo develop an iOS-based Module, you'll need all of the software required to build a Titanium application for iOS:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nTitanium SDK    </p>\n</li><li class=\" \">    <p>\nSupported versions of Xcode and the iOS SDK, as described in <a class=\"document-link \" href=\"#!/guide/Installing_the_iOS_SDK\">Installing the iOS SDK</a>    </p>\n</li><li class=\" \">    <p>\nStudio or the Appcelerator Command-Line Interface (CLI) for creating modules, and building and running test applications    </p>\n</li></ul>    <p>\nIn addition, Python, Python setuptools and the Python markdown (or markdown2) module are both required by the module build scripts. For Mac OS X, Python and the Python setuptools should already be installed.  For the markdown module, see <a class=\"document-link \" href=\"#!/guide/Installing_Required_Python_Packages\">Installing Required Python Packages</a>.    </p>\n    <p>\nLike iOS application development, iOS module development is only supported on OS X.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-CreateaNewModule\">\n        <h2 class=\"heading \"><span>Create a New Module</span></h2>\n    <p>\nFirst, create a new module project.    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nFrom a terminal, change the current working directory to your workspace and run:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">cd /PATH/TO/WORKSPACE</code></div>\n<div class=\"line\"><code class=\"plain\">appc </code><code class=\"keyword\">new</code><code class=\"plain\"> -n test --id com.example.test</code></div>\n<div class=\"line\"><code class=\"plain\">### when prompted </code><code class=\"keyword\">for</code><code class=\"plain\"> the project type, select </code><code class=\"string\">\"Titanium Module\"</code><code class=\"plain\"> </code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn Studio:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nFrom the menu, select <strong class=\" \">File</strong> &gt; <strong class=\" \">New</strong> &gt; <strong class=\" \">Mobile Module Project</strong> to open the <strong class=\" \">New Mobile Module Project</strong> dialog.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Project hame</strong> field, enter <strong class=\" \">test</strong>.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Module Id</strong> field, enter <strong class=\" \">com.example.test</strong>.    </p>\n</li><li class=\" \">    <p>\nIn <strong class=\" \">Deployment Targets</strong>, select <strong class=\" \">iOS</strong>.    </p>\n</li><li class=\" \">    <p>\nClick <strong class=\" \">Next</strong>, then click <strong class=\" \">Finish</strong>.    </p>\n</li></ol>    <p>\nStudio sets up a new folder called <tt class=\" \">test</tt> that contains your module project.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-BuildandPackagetheModule\">\n        <h2 class=\"heading \"><span>Build and Package the Module</span></h2>\n    <p>\nNext, build the module and package it.  This process produces a ZIP file containing a binary library with unprocessed module assets, example code and documentation.    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nFrom a terminal, go to the module's <tt class=\" \">iphone</tt> directory and run the <tt class=\" \">build.py</tt> script:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">cd test/iphone</code></div>\n<div class=\"line\"><code class=\"plain\">python build.py</code></div>\n</div>\n</div>    <p>\nAfter the build completes, unzip the built module in the Titanium SDK home path:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">unzip -o com.example.test-iphone-</code><code class=\"value\">1.0</code><code class=\"plain\">.</code><code class=\"value\">0</code><code class=\"plain\">.zip -d ~/Library/Application\\ Support/Titanium/</code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn Studio:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nSelect your module folder in the <strong class=\" \">Project Explorer</strong> view.    </p>\n</li><li class=\" \">    <p>\nVerify <strong class=\" \">Package</strong> and <strong class=\" \">iOS Module</strong> are displayed in <strong class=\" \">Launch Mode</strong> and <strong class=\" \">Launch Target</strong>, respectively.    </p>\n</li><li class=\" \">    <p>\nClick the Package icon to open the <strong class=\" \">Package iOS Module</strong> dialog.    </p>\n</li><li class=\" \">    <p>\nIn <strong class=\" \">Output Location</strong>, choose the <strong class=\" \">Titanium SDK</strong> to install the module in the Titanium SDK home path to be accessed by any Titanium application.    </p>\n</li><li class=\" \">    <p>\nClick <strong class=\" \">Finish</strong>.    </p>\n</li></ol>    <p>\nStudio builds and installs the module to the Titanium SDK home path.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-TesttheModule\">\n        <h2 class=\"heading \"><span>Test the Module</span></h2>\n    <p>\nTo test the module, create a test application and add the module as a dependency of the project.  Then, load the module and make module API calls to the module reference.    </p>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-CreateaTestApplication\">\n        <h3 class=\"heading \"><span>Create a Test Application</span></h3>\n    <p>\n    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nFrom a new terminal window, change the current working directory to your workspace and run the following commands:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">cd /PATH/TO/WORKSPACE</code></div>\n<div class=\"line\"><code class=\"plain\">appc </code><code class=\"keyword\">new</code><code class=\"plain\"> -t titanium -p iphone,ipad -n Hello -u http:</code><code class=\"comments\">// --id com.example.hello</code></div>\n<div class=\"line\"><code class=\"plain\">cd Hello/</code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn Studio:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nFrom the menu, select <strong class=\" \">File</strong> &gt; <strong class=\" \">New</strong> &gt; <strong class=\" \">Mobile App Project</strong> to open the <strong class=\" \">New Mobile App Project</strong> dialog.    </p>\n</li><li class=\" \">    <p>\nOn the <strong class=\" \">Project Template</strong> page, select <strong class=\" \">Default Alloy Project</strong> as the template type, then click <strong class=\" \">Next</strong>.    </p>\n</li><li class=\" \">    <p>\nOn the <strong class=\" \">Project Location</strong> page, enter the following information:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nIn the <strong class=\" \">Project Name</strong> field, enter <strong class=\" \">Hello</strong>.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">App ID</strong> field, enter <strong class=\" \">com.example.hello</strong>.    </p>\n</li><li class=\" \">    <p>\nIn <strong class=\" \">Deployment Targets</strong>, select <strong class=\" \">iPhone</strong> and <strong class=\" \">iPad</strong>.    </p>\n</li></ul></li><li class=\" \">    <p>\nClick <strong class=\" \">Finish</strong> to create the project.    </p>\n</li></ol>    <p>\nStudio sets up a new folder called <tt class=\" \">Hello</tt> that contains the test application you will be using to test the module.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-AddtheModuleasaDependencytotheProject\">\n        <h3 class=\"heading \"><span>Add the Module as a Dependency to the Project</span></h3>\n    <p>\nTo load the module in the application, you need to add it as a dependency to the project.    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nOpen the <tt class=\" \">tiapp.xml</tt> and update the <tt class=\" \">&lt;modules/&gt;</tt> element to include the module as a dependency to the project:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;modules&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;module platform=</code><code class=\"string\">\"iphone\"</code><code class=\"plain\">&gt;com.example.test&lt;/module&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/modules&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn Studio:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nOpen the <tt class=\" \">tiapp.xml</tt> file located in the root directory of the project.    </p>\n</li><li class=\" \">    <p>\nUnder the <strong class=\" \">Modules</strong> section, click the <strong class=\" \">Add</strong> button.    </p>\n</li><li class=\" \">    <p>\nSelect <strong class=\" \">com.example.test</strong>.    </p>\n</li><li class=\" \">    <p>\nClick <strong class=\" \">OK</strong>.    </p>\n</li></ol>    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-LoadtheModuleandMakeModuleAPICalls\">\n        <h3 class=\"heading \"><span>Load the Module and Make Module API Calls</span></h3>\n    <p>\n    </p>\n    <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n        \n    <p>\nThe module can be loaded by passing the module ID to the <tt class=\" \">require()</tt> method, which returns a reference to the module that API calls can be made on.    </p>\n    </div>\n    \n    <p>\nOpen the <tt class=\" \">app/alloy.js</tt> file and replace the code with the following, which invokes API calls to the module:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/alloy.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var test = require(</code><code class=\"string\">'com.example.test'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"module is =&gt; \"</code><code class=\"plain\"> + test);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"module example() method returns =&gt; \"</code><code class=\"plain\"> + test.example());</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"module exampleProp is =&gt; \"</code><code class=\"plain\"> + test.exampleProp);</code></div>\n<div class=\"line\"><code class=\"plain\">test.exampleProp = </code><code class=\"string\">\"This is a test value\"</code><code class=\"plain\">;</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-RuntheApplication\">\n        <h3 class=\"heading \"><span>Run the Application</span></h3>\n    <p>\n    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nFrom a terminal that has the test app as its current working directory, run:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">appc run -p ios</code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn the Studio toolbar, select <strong class=\" \">Run</strong> in <strong class=\" \">Launch Modes</strong> and select an iOS simulator in <strong class=\" \">Launch Targets</strong>.    </p>\n    <p>\nStudio builds and launches the application on the select iOS simulator.  Monitor the <strong class=\" \">Console</strong> view for log output.    </p>\n    <p>\nThe console lines seen below show us that the module is working as expected.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Console</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">[INFO]  module is =&gt; [object ComExampleTestModule]</code></div>\n<div class=\"line\"><code class=\"plain\">[INFO]  module example() method returns =&gt; hello world</code></div>\n<div class=\"line\"><code class=\"plain\">[INFO]  module exampleProp is =&gt; hello world</code></div>\n</div>\n</div>    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-ModifytheModule\">\n        <h2 class=\"heading \"><span>Modify the Module</span></h2>\n    <p>\nLet's modify the module code to create a view object and access a string property.    </p>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-OpentheModuleinXcode\">\n        <h3 class=\"heading \"><span>Open the Module in Xcode</span></h3>\n    <p>\nTitanium creates a basic Xcode project, which is used to build the module.  You can open this project in Xcode, the IDE used to develop iOS applications and used by the Titanium toolchain to build your iOS applications and modules.    </p>\n    <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n            <div class=\"title\">CLI Instructions</div>\n        \n    <p>\nFrom a terminal, run:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">open test/iphone/test.xcodeproj</code></div>\n</div>\n</div>    </div>\n    \n    <p>\nIn Studio:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nRight-click the <tt class=\" \">test.xcodeproj</tt> folder and select <strong class=\" \">Show In</strong> &gt; <strong class=\" \">Terminal</strong>.    </p>\n</li><li class=\" \">    <p>\nIn the Terminal, run the following command:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">open .</code></div>\n</div>\n</div></li></ol>    <p>\nYour module project is now open in Xcode.  Expand the <tt class=\" \">Classes</tt> folder and take a look at the default files created by the Titanium SDK:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<tt class=\" \">ComExampleTestModule.h</tt> and <tt class=\" \">ComExampleTestModule.m</tt>: These are the header and source file for the module class.  Every module requires a module class (and only one module class), which acts as the base API for the module, such as providing the module ID, GUID, etc.    </p>\n</li><li class=\" \">    <p>\n<tt class=\" \">ComExampleTestModuleAssets.h</tt> and <tt class=\" \">ComExampleTestModuleAssets.m</tt>: These are the header and source files to manage module assets.  These files are auto-generated.  You can ignore these for now in this tutorial.    </p>\n</li></ul>    <p>\nNotice that all the files start with the module ID in camel case notation.  Every file and class you add to the module project must start with name and every file and class you add must end with <tt class=\" \">Proxy</tt>, <tt class=\" \">ViewProxy</tt> or <tt class=\" \">View</tt>, which determines how Titanium uses the files.  Titanium uses a strict naming convention and directory structure to manage the module classes and resources. If a file or class is added to the project and does not conform to these conventions, it will be treated as a normal non-Titanium class. It will be accessible from Objective-C code but not from JavaScript.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-AddaViewProxyandView\">\n        <h3 class=\"heading \"><span>Add a View Proxy and View</span></h3>\n    <p>\nTo display any UI with a module, create a view proxy and view in pairs.  Create the four files below for your Xcode project and save them in the module's <tt class=\" \">iphone/Classes</tt> directory.    </p>\n    <p>\nIn Xcode, for each file:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nRight-click the project and select <strong class=\" \">New File...</strong>    </p>\n</li><li class=\" \">    <p>\nFor the header files, select <strong class=\" \">Header File</strong>, and for the source files, select <strong class=\" \">Objective-C </strong><strong class=\" \">File</strong>, then click <strong class=\" \">Next</strong>.    </p>\n</li><li class=\" \">    <p>\nFor the Objective-C files, enter the name of the file and click <strong class=\" \">Next</strong> to proceed to the last dialog.    </p>\n</li><li class=\" \">    <p>\nFor the header files, enter the name of the file in the <strong class=\" \">Save As</strong> field.    </p>\n</li><li class=\" \">    <p>\nFor both files, select the module's <tt class=\" \">Classes</tt> folder.    </p>\n</li><li class=\" \">    <p>\nEnsure that the <strong class=\" \">Target</strong> <tt class=\" \">test</tt> is selected.    </p>\n</li><li class=\" \">    <p>\nClick <strong class=\" \">Create</strong>.    </p>\n</li></ol>    <p>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTestViewProxy.h</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">\"TiViewProxy.h\"</code></div>\n<div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestViewProxy: TiViewProxy</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTestViewProxy.m</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">\"ComExampleTestViewProxy.h\"</code></div>\n<div class=\"line\"><code class=\"color1\">@implementation</code><code class=\"plain\"> ComExampleTestViewProxy</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTestView.h</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">\"TiUIView.h\"</code></div>\n<div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComExampleTestView: TiUIView {</code></div>\n<div class=\"line\"><code class=\"plain\">    UIView *square;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTestView.m</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">\"ComExampleTestView.h\"</code></div>\n<div class=\"line\"><code class=\"plain\">#</code><code class=\"keyword\">import</code><code class=\"plain\"> </code><code class=\"string\">\"TiUtils.h\"</code></div>\n<div class=\"line\"><code class=\"color1\">@implementation</code><code class=\"plain\"> ComExampleTestView</code></div>\n<div class=\"line\"><code class=\"plain\">- (</code><code class=\"keyword\">void</code><code class=\"plain\">)initializeState</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Creates and keeps a reference to the view upon initialization</code></div>\n<div class=\"line\"><code class=\"plain\">    square = [[UIView alloc] initWithFrame:[self frame]];</code></div>\n<div class=\"line\"><code class=\"plain\">    [self addSubview:square];</code></div>\n<div class=\"line\"><code class=\"plain\">    [</code><code class=\"keyword\">super</code><code class=\"plain\"> initializeState];</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)dealloc</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Deallocates the view</code></div>\n<div class=\"line\"><code class=\"plain\">    RELEASE_TO_NIL(square);</code></div>\n<div class=\"line\"><code class=\"plain\">    [</code><code class=\"keyword\">super</code><code class=\"plain\"> dealloc];</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Sets the size and position of the view</code></div>\n<div class=\"line\"><code class=\"plain\">    [TiUtils setView:square positionRect:bounds];</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)setColor_:(id)color</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Assigns the view's background color</code></div>\n<div class=\"line\"><code class=\"plain\">    square.backgroundColor = [[TiUtils colorValue:color] _color];</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div>    <p>\n    </p>\n    <p>\nThe <tt class=\" \">ComExampleTestViewProxy</tt> class extends the <tt class=\" \">TiViewProxy</tt> class.  This class exposes the view to the JavaScript and acts as an intermediary between the JavaScript and the native view.  Normally, you do not need to implement any APIs in this class, but you can hook into the View's lifecycle events.    </p>\n    <p>\nThe <tt class=\" \">ComExampleTestView</tt> class extends the <tt class=\" \">TiUIView</tt> class. The TiUIView can be added to other Titanium views and windows, which makes it the perfect place for a UIView to be added so that it can be displayed in a Titanium app. This class creates the native view to display.  The class implements three methods of the <tt class=\" \">TiUIView</tt> class and a custom setter method:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<strong class=\" \"><tt class=\" \">initializeState</tt></strong>: This method is called when the view is initialized. In this example, we are using this method as a place to create a native UIView which is called square.    </p>\n</li><li class=\" \">    <p>\n<strong class=\" \"><tt class=\" \">dealloc</tt></strong>: This method is called to release the view. We use this method to release square.    </p>\n</li><li class=\" \">    <p>\n<strong class=\" \"><tt class=\" \">frameSizeChanged</tt></strong>:  This method is called when the view's dimensions change. The method calls a TiUtils helper function to update the dimensions of square. In JavaScript, this occurs when the <tt class=\" \">width</tt>, <tt class=\" \">height</tt>, <tt class=\" \">top</tt>, <tt class=\" \">bottom</tt>, <tt class=\" \">left</tt> or <tt class=\" \">right</tt> properties are invoked.    </p>\n</li><li class=\" \">    <p>\n<strong class=\" \"><tt class=\" \">setColor_</tt></strong>: All setter methods in a View class must end with an underscore (_), which exposes the property to the JavaScript application.  When <tt class=\" \">color</tt> property is invoked, the method updates the background color of the square.    </p>\n</li></ul>    <p>\nNotice that there is no code tying <tt class=\" \">ComExampleTestView</tt> to <tt class=\" \">ComExampleTestViewProxy</tt>. The naming convention is what causes the View to be connected to its ViewProxy.    </p>\n    <p>\nTo call the method to create the view from JavaScript, call the module's <tt class=\" \">createView</tt><tt class=\" \">()</tt> method.  The name of the method is the name of the view class without the module ID, then prefixed with <tt class=\" \">create</tt>.  For example, if the class was called <tt class=\" \">ComExampleTestMyView</tt> (rather than <tt class=\" \">ComExampleTestView</tt>), the method would be called <tt class=\" \">createMyView()</tt> (rather than <tt class=\" \">createView()</tt>).    </p>\n    <p>\nBelow is an example of calling <tt class=\" \">createView()</tt>, and passing dimensions and color properties to the method.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Example</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = test.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'blue'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height: 50,</code></div>\n<div class=\"line\"><code class=\"plain\">    width: 50</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(view);</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-AddaProperty\">\n        <h3 class=\"heading \"><span>Add a Property</span></h3>\n    <p>\nA Proxy is a key/value store like an NSDictionary (Objective-C) or an Object (JavaScript). Without any modification, you can set properties on a Module, Proxy, or ViewProxy and then read them back at will as if they were properties. You can also override the getters and setters and do some custom logic.    </p>\n    <p>\nModify the default module class files to store and retrieve a string value.    </p>\n    <p>\nFirst, modify the <tt class=\" \">ComExampleTestModule.h</tt> file to declare a variable to hold the string:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComAppcNewmoduleModule : TiModule</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    NSString *foo;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div>    <p>\nNext, modify the example setter and getter to actually set and get the variable you just declared. These methods are already declared in the <tt class=\" \">ComExampleTestModule.m</tt> file but not implemented. Titanium requires that all setter methods be declared with the method name starting with <tt class=\" \">set</tt> and being passed an <tt class=\" \">id</tt> datatype.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)dealloc</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// release any resources that have been retained by the module</code></div>\n<div class=\"line\"><code class=\"plain\">    RELEASE_TO_NIL(foo);</code></div>\n<div class=\"line\"><code class=\"plain\">    [</code><code class=\"keyword\">super</code><code class=\"plain\"> dealloc];</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">...</code></div>\n<div class=\"line\"><code class=\"plain\">-(id)exampleProp</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    NSLog(@</code><code class=\"string\">\"[INFO] In Module - the stored value for exampleProp: %@\"</code><code class=\"plain\">, foo);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> foo;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">-(</code><code class=\"keyword\">void</code><code class=\"plain\">)setExampleProp:(id)value</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Macro from TiBase.h to type check the data</code></div>\n<div class=\"line\"><code class=\"plain\">    ENSURE_STRING(value);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Call the retain method to keep a reference to the passed value</code></div>\n<div class=\"line\"><code class=\"plain\">    foo = [value retain];</code></div>\n<div class=\"line\"><code class=\"plain\">    NSLog(@</code><code class=\"string\">\"[INFO] In Module - the new value for exampleProp: %@\"</code><code class=\"plain\">, value);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nIn the JavaScript code, the <tt class=\" \">foo</tt> string can be accessed using the <tt class=\" \">exampleProp</tt> property, and <tt class=\" \">getExampleProp()</tt> and <tt class=\" \">setExampleProp</tt><tt class=\" \">()</tt> methods.    </p>\n    <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n        \n    <p>\nIf you do not need a custom getter or setter, you can use the <tt class=\" \">@property</tt> notation with the <tt class=\" \">copy</tt> attribute to create a property.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color2\">@interface</code><code class=\"plain\"> ComAppcNewmoduleModule : TiModule</code></div>\n<div class=\"line\"><code class=\"color1\">@property</code><code class=\"plain\">(copy) NSString *foo;</code></div>\n<div class=\"line\"><code class=\"color1\">@end</code></div>\n</div>\n</div>    </div>\n    \n    </div>\n    <div class=\"section section-3 \" id=\"43288582_iOSModuleQuickStart-TesttheModule.1\">\n        <h3 class=\"heading \"><span>Test the Module</span></h3>\n    <p>\nOpen the <tt class=\" \">app/views/index.xml</tt> file and replace the code with the following, which loads the module and displays a red square:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/views/index.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;Window&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;!-- Invokes the createView method and provides a reference to the module in the controller --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;Module id=</code><code class=\"string\">\"test\"</code><code class=\"plain\"> module=</code><code class=\"string\">\"com.example.test\"</code><code class=\"plain\"> method=</code><code class=\"string\">\"createView\"</code><code class=\"plain\"> height=</code><code class=\"string\">\"50\"</code><code class=\"plain\"> width=</code><code class=\"string\">\"50\"</code><code class=\"plain\"> color=</code><code class=\"string\">\"red\"</code><code class=\"plain\">/&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;/Window&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div>\n</div>\n</div>    <p>\nOpen the <tt class=\" \">app/controllers/index.js</tt> file and replace the code with the following, which invokes API calls to the module:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">$.index.open();</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">'module -&gt;'</code><code class=\"plain\"> + $.test);</code></div>\n<div class=\"line\"><code class=\"plain\">$.test.exampleProp = </code><code class=\"string\">'foobar'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">'exampleProp: '</code><code class=\"plain\"> + $.test.getExampleProp()); </code></div>\n</div>\n</div>    <p>\nBuild and install your module, then run the example app.    </p>\n    <p>\nWhen the application starts running, you see should a red square in the middle of the screen and see the log output below, which means the application successfully loaded the module and called its APIs.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Console</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">[INFO]  In Module - the new value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp =&gt; foobar</code></div>\n<div class=\"line\"><code class=\"plain\">[INFO]  In Module - the stored value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp =&gt; foobar</code></div>\n<div class=\"line\"><code class=\"plain\">[INFO]  exampleProp: foobar</code></div>\n</div>\n</div>    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43288582_iOSModuleQuickStart-NextSteps\">\n        <h2 class=\"heading \"><span>Next Steps</span></h2>\n<ul class=\" \"><li class=\" \">    <p>\nFor information about how to structure your module project, add assets or third-party frameworks to your module project or more details on how to use the CLI or Studio, see <a class=\"document-link \" href=\"#!/guide/iOS_Module_Project\">iOS Module Project</a>.    </p>\n</li><li class=\" \">    <p>\nFor information about how to construct the class components for your project, see <a class=\"document-link \" href=\"#!/guide/iOS_Module_Quick_Start\">iOS Module Quick Start</a>.    </p>\n</li><li class=\" \">    <p>\nFor more examples of using the module API, see the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-modules/ti.moddevguide\" target=\"_blank\">ti.moddevguide Github project</a>.    </p>\n</li></ul>    <p>\n    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43288582\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"iOS Module Quick Start"});