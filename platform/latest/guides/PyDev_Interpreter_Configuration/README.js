Ext.data.JsonP['PyDev_Interpreter_Configuration']({"guide":" <!doctype html> <html> <head> <title>PyDev Interpreter Configuration</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-30083047\" class=\"content\"> <h1>PyDev Interpreter Configuration</h1> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-ConfigureInterpreter\"> <h2 class=\"heading\"><span>Configure Interpreter</span></h2> <p>After installing it, the first thing you must do is configure the <strong>Python and/or Jython and/or IronPython</strong> interpreter.<br>To configure the interpreter: </br></p> <p>1. Go to: <strong>window &gt; preferences &gt; PyDev &gt; Interpreter - (Python/Jython/IronPython)</strong>. </p> <p>2. Choose the interpreter you have installed in your computer (such as python.exe, jython.jar or ipy.exe). </p> <p>Note that the <strong>Auto Config</strong> will try to find it in your PATH, but it can fail if it&apos;s not there (or if you<br>want to configure a different interpreter). </br></p> <p>On <strong>Windows</strong> it&apos;ll also search the registry and provide a choice based on the multiple interpreters available<br>in your computer (searching in the registry). </br></p> <p>On <strong>Mac</strong>, usually you can do a &apos;which python&apos; to know where the python executable is located. </p> <p>On <strong>Mac</strong> it&apos;s usually at some place resembling the image below (so, if you want to configure a different version<br>of the interpreter manually, that&apos;s where you&apos;d want to search): </br></p> <p> <img src=\"images/pydev.org/images/interpreter_mac.png\" alt=\"images/pydev.org/images/interpreter_mac.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\"> <br>3. Select the paths that will be in your <strong>SYSTEM PYTHONPATH</strong>. </br></img></p> <p><strong class=\"\">IMPORTANT</strong>: Select only folders that will <strong>NOT be used as source folders for any project</strong> of yours<br>(those should be later configured as source folders in the project). </br></p> <p><strong>IMPORTANT for Mac users</strong>: The Python version that usually ships with Mac doesn&apos;t seem to have the .py source files<br>available, which are required for PyDev, so, using a different interpreter is recommended (i.e.: Download it from <a class=\"external-link external-link\" href=\"http://python.org\" target=\"_blank\">http://python.org</a>). If you don&apos;t want to use a different interpreter, get the source files for the Python &apos;/Lib&apos; folder<br>and add those to the system installation. </br></br></p> <p>After those steps, you should have a screen as presented below: </p> <p> <img src=\"images/pydev.org/images/interpreter.png\" alt=\"images/pydev.org/images/interpreter.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\"> </img></p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-Howtocheckiftheinformationwascorrectlygotten\"> <h2 class=\"heading\"><span>How to check if the information was correctly gotten</span></h2> <p>The <strong>System libs</strong> must contain at least the Lib and the Lib/site-packages directory. </p> <p>The <strong class=\"\">Forced builtin libs</strong> must contain the modules built into the interpreter (and others whose<br>analysis should be done dynamically. See: <a class=\"document-link\" href=\"#!/guide/PyDev_Interpreter_Configuration-section-src-30083047_PyDevInterpreterConfiguration-ForcedBuiltins\">#Forced Builtins</a>). </br></p> </div> <div class=\"section section-2\" id=\"src-30083047_safe-id-UHlEZXZJbnRlcnByZXRlckNvbmZpZ3VyYXRpb24tV2hhdGlmaXRpc25vdGNvcnJlY3Q_\"> <h2 class=\"heading\"><span>What if it is not correct?</span></h2> <p>The most common error is having a problem in the environment variables used from the shell that spawned Eclipse,<br>in a way that for some reason when getting the variables of one interpreter, it gathers the info from another<br>interpreter (thus mixing the interpreter and the actual libraries). </br></br></p> <p>Usually running (from the command prompt) the file that gives that info for PyDev can help you discovering the<br>problem in your configuration (interpreterInfo.py): </br></p> <p>That file is usually located at: eclipse\\plugins\\org.python.pydev_$version$\\PySrc\\interpreterInfo.py,<br>but it can be at other location depending on how you installed it ) </br></p> <p>python.exe interpreterInfo.py </p> <p>java.exe -cp c:\\path\\to\\jython.jar org.python.util.jython interpreterInfo.py </p> <p>ipy.exe interpreterInfo.py </p> <p>If you&apos;re unable to find out what&apos;s going on, please ask in the users forum (giving the output obtained from<br>executing interpreterInfo.py in your machine). </br></p> </div> <div class=\"section section-2\" id=\"src-30083047_safe-id-UHlEZXZJbnRlcnByZXRlckNvbmZpZ3VyYXRpb24tV2hhdGlmSWFkZHNvbWV0aGluZ25ld2lubXlTeXN0ZW1QWVRIT05QQVRIYWZ0ZXJjb25maWd1cmluZ2l0Pw\"> <h2 class=\"heading\"><span>What if I add something new in my System PYTHONPATH after configuring it?</span></h2> <p>If you add something to your python installation, you need to either<br>add it manually as a &apos;new folder&apos; in the System PYTHONPATH (if it&apos;s still not under a folder in the PYTHONPATH)<br>or <strong>(recommended) remove your interpreter and add it again</strong>, then, press apply. </br></br></p> <p>Note that if you added a library that&apos;s already under a folder in the PYTHONPATH, you have to at least go to<br>the interpreter preferences and press apply so that it clears its internal caches (after the configuration<br>is done, things are set in stone for PyDev) </br></br></p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-Libraries\"> <h2 class=\"heading\"><span>Libraries</span></h2> <p>The <strong>System libs</strong> are the libraries that will be added to the PYTHONPATH of any project that is using this interpreter. </p> <p>For <strong class=\"\">Python and IronPython</strong>, it&apos;s composed of <strong class=\"\">folders, zip files and egg files</strong>. Note that if dlls should be added to<br>the PYTHONPATH, the folders actually containing those dlls should be added, and they must have the same name to be<br>imported in the code (the case is important). I.e.: if you want to import iTextDll, it <strong>must</strong> be called iTextDll.dll<br>(note that .pyd and .so extensions are also accepted). </br></br></br></p> <p>For <strong class=\"\">Jython</strong>, it&apos;s composed of <strong>folders and jars</strong>. </p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-ForcedBuiltinsForcedBuiltins\"> <h2 class=\"heading\"><span id=\"src-30083047_PyDevInterpreterConfiguration-ForcedBuiltins\" class=\"confluence-anchor-link\"/><span>Forced Builtins</span></h2> <p>The Forced builtin libs are the libraries that are built-in the interpreter, such as <strong class=\"\">_<i class=\"\">builtin</i>_, sha, etc</strong> or<br>libraries that should forcefully analyzed through a shell (i.e.: to analyze modules in this list, PyDev will spawn<br>a shell and do a dir() on the module to get the available tokens for completions and code-analysis) &#x2013; still,<br>sometimes even that is not always possible, in which case, <a class=\"document-link\" href=\"#!/guide/PyDev_Interpreter_Configuration-section-src-30083047_PyDevInterpreterConfiguration-PredefinedCompletions\">#Predefined Completions</a> may be used to let PyDev know<br>about the structure of the code. </br></br></br></br></p> <p>For <strong class=\"\">Python</strong>, you should have around <strong>50</strong> entries </p> <p>For <strong class=\"\">Jython</strong> around <strong>30</strong> entries. </p> <p>For <strong class=\"\">IronPython</strong> more than <strong>100</strong> entries. All the packages built into .NET should be included here &#x2013; e.g.:<br>Microsoft, Microsoft.Windows.Themes, System, System.IO, etc. </br></p> <p>Additionally, you may add other libraries that you want to treat as<br>builtins, such as <strong class=\"\">os, wxPython, OpenGL, etc</strong>. This is very important, because PyDev works<br>on the java side only with static information, but some modules don&apos;t have much information when analyzed<br>statically, so, PyDev creates a shell to get information on those. Another important<br>thing is that they <strong>must</strong> be on your system pythonpath (otherwise, the shell will be unable to get that information). </br></br></br></br></p> <p> <img src=\"images/pydev.org/images/interpreter_forced_builtins.png\" alt=\"images/pydev.org/images/interpreter_forced_builtins.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\"> </img></p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-PredefinedCompletionsPredefinedCompletions\"> <h2 class=\"heading\"><span id=\"src-30083047_PyDevInterpreterConfiguration-PredefinedCompletions\" class=\"confluence-anchor-link\"/><span>Predefined Completions</span></h2> <p>Predefined completions are completions acquired from sources that provide only the interfaces for<br>a given Python module (with Python 3.0 syntax). </br></p> <p>A predefined completion module may be created by having a module with the extension &quot;.pypredef&quot;<br>with regular Python 3.0 contents, but with attributes having assigns to its type and methods having<br>as the body a sole return statement &#x2013; and the docstring may have anything. </br></br></p> <p>Example for a <strong class=\"\">my.source.module</strong> (must be declared in a <strong>my.source.module.pypredef</strong> file): </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">MyConstantA </code><code class=\"keyword\">=</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div> <div class=\"line\"><code class=\"plain\">MyConstantB </code><code class=\"keyword\">=</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> MyClass:</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> instanceAttribute </code><code class=\"keyword\">=</code><code class=\"plain\"> QObject</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">def</code><code class=\"plain\"> __init__(</code><code class=\"color1\">self</code><code class=\"plain\">, parent</code><code class=\"keyword\">=</code><code class=\"color1\">None</code><code class=\"plain\">):</code></div> <div class=\"line\"><code class=\"plain\"> &apos;&apos;&apos;</code></div> <div class=\"line\"><code class=\"color2\"> </code></div> <div class=\"line\"><code class=\"color2\"> @type</code><code class=\"plain\"> parent: QObject</code></div> <div class=\"line\"><code class=\"plain\"> &apos;&apos;&apos;</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">def</code><code class=\"plain\"> registerTimer(interval, </code><code class=\"functions\">object</code><code class=\"plain\">):</code></div> <div class=\"line\"><code class=\"plain\"> &apos;&apos;&apos;</code></div> <div class=\"line\"><code class=\"color2\"> </code></div> <div class=\"line\"><code class=\"color2\"> @type</code><code class=\"plain\"> interval: </code><code class=\"functions\">int</code></div> <div class=\"line\"><code class=\"color2\"> @type</code><code class=\"plain\"> </code><code class=\"functions\">object</code><code class=\"plain\">: QObject</code></div> <div class=\"line\"><code class=\"plain\"> &apos;&apos;&apos;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code></div> </div> </div> <p><strong>Note 1</strong>: the name of the file is the exact name of the module </p> <p><strong>Note 2</strong>: .pypredef files are not searched in subfolders </p> <p><strong>Optionally a QScintilla .api file may be added</strong>. When this is done, PyDev will try to create<br>.pypredef files from that .api file and will add the folder containing those to the PYTHONPATH.<br>Note that this conversion is still in beta and the file may not be correctly generated, so,<br>keep an eye for errors logged when a code-completion that would use those modules (while it<br>will not fail, those completions won&apos;t be shown using the .pypredef files).<br>In those situations, please create a bug-report with the .api file that generated incorrect code. </br></br></br></br></br></p> <p> <img src=\"images/pydev.org/images/interpreter_predefined.png\" alt=\"images/pydev.org/images/interpreter_predefined.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\"> </img></p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-Environment\"> <h2 class=\"heading\"><span>Environment</span></h2> <p>The variables defined at the environment will be set as environment variables when running a script that uses the<br>given interpreter (note that it can still be overridden in the run configuration) </br></p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-Stringsubstitutionvariables\"> <h2 class=\"heading\"><span>String substitution variables</span></h2> <p>Strings defined here may be used in: </p> <ul class=\"\"><li> <p>project configuration for source folders and external libraries </p> </li><li> <p>launch configuration for the main module </p> </li></ul> <p>They can be used in those places in the format: ${DECLARED_VARIABLE} </p> </div> <div class=\"section section-2\" id=\"src-30083047_PyDevInterpreterConfiguration-Cygwinusers\"> <h2 class=\"heading\"><span>Cygwin users</span></h2> <p>PyDev currently has no support for cygwin. Currently you&apos;ll be able to configure the interpreter<br>with cygwin, but there are still other related problems (mostly on converting between windows and cygwin paths as needed). </br></p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083047\"><span>Edit</span></a> </div> </body> </html> ","title":"PyDev Interpreter Configuration"});