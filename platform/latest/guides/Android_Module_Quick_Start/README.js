Ext.data.JsonP['Android_Module_Quick_Start']({"guide":" <!doctype html> <html> <head> <title>Android Module Quick Start</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-43289022\" class=\"content\"> <h1>Android Module Quick Start</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Introduction\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Androidmoduleprerequisites\">Android module prerequisites</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Createanewmodule\">Create a new module</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Buildandpackagethemodule\">Build and package the module</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Testthemodule\">Test the module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Createatestapplication\">Create a test application</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Addthemoduleasadependencytotheproject\">Add the module as a dependency to the project</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-LoadthemoduleandmakemoduleAPIcalls\">Load the module and make module API calls</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Runtheapplication\">Run the application</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Modifythemodule\">Modify the module</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-AddaViewProxyandView\">Add a View Proxy and View</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Addaproperty\">Add a property</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Testthemodule.1\">Test the module</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-Nextsteps\">Next steps</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Android_Module_Quick_Start-section-src-43289022_AndroidModuleQuickStart-AIDLsupport\">AIDL support</a> </p> </li></ul> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>This guide walks through the steps to create, build and test an Android module using Studio. The equivalent CLI instructions are given in the information boxes near the top of each section. </p> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Androidmoduleprerequisites\"> <h2 class=\"heading\"><span>Android module prerequisites</span></h2> <p>To develop an Android-based Module, you need to install the following tools and setup a few additional environment variables: </p> <ul class=\"\"><li> <p>Titanium SDK </p> </li><li> <p>Android SDK API 26+ </p> </li><li> <p>Studio or the Appcelerator Command-Line Interface (CLI) for creating modules, and building and running test applications </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Installing_the_Android_NDK\">Android NDK</a> and add an ANDROID_NDK environment variable pointing to the NDK directory. See <a class=\"document-link\" href=\"#!/guide/Installing_the_Android_NDK\">Installing the Android NDK</a>. </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Installing_gperf\">gperf</a> must be installed and in your system PATH. See <a class=\"document-link\" href=\"#!/guide/Installing_gperf\">Installing gperf</a>. </p> </li><li class=\"\"> <p>Python, Python setuptools and the markdown module, and Python in your system PATH. See <a class=\"document-link\" href=\"#!/guide/Installing_Python\">Installing Python</a> and <a class=\"document-link\" href=\"#!/guide/Installing_Required_Python_Packages\">Installing Required Python Packages</a>. </p> </li></ul> <p>If you want to use Studio, install: </p> <ul class=\"\"><li class=\"\"> <p><a class=\"external-link external-link\" href=\"https://eclipse.org/jdt/\" target=\"_blank\">Eclipse Java Development Tools plugin</a>. See <a class=\"document-link\" href=\"#!/guide/Installing_the_Java_Development_Tools\">Installing the Java Development Tools</a>. </p> </li><li class=\"\"> <p><a class=\"external-link external-link\" href=\"http://developer.android.com/tools/sdk/eclipse-adt.html\" target=\"_blank\">Android Development Tools plugin</a>. See <a class=\"document-link\" href=\"#!/guide/Installing_the_Android_Development_Tools\">Installing the Android Development Tools</a>. </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Createanewmodule\"> <h2 class=\"heading\"><span>Create a new module</span></h2> <p>First, create a new module project. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal, change the current working directory to your workspace and run: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">cd /PATH/TO/WORKSPACE</code></div> <div class=\"line\"><code class=\"plain\">appc </code><code class=\"keyword\">new</code><code class=\"plain\"> --n test --id com.example.test -p Android</code></div> <div class=\"line\"><code class=\"plain\">## when prompted, select </code><code class=\"string\">&quot;Titanium Module&quot;</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>From the menu, select <strong class=\"\">File</strong> &gt; <strong class=\"\">New</strong> &gt; <strong class=\"\">Mobile Module Project</strong> to open the <strong>New Mobile Module Project</strong> dialog. </p> </li><li class=\"\"> <p>In the <strong class=\"\">Project name</strong> field, enter <strong>test</strong>. </p> </li><li class=\"\"> <p>In the <strong class=\"\">Module Id</strong> field, enter <strong>com.example.test</strong>. </p> </li><li class=\"\"> <p>In <strong class=\"\">Deployment Targets</strong>, select <strong>Android</strong>. </p> </li><li class=\"\"> <p>Click <strong class=\"\">Next</strong>, then click <strong>Finish</strong>. </p> </li></ol> <p>Studio sets up a new folder called <tt>test</tt> that contains your module project. </p> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Buildandpackagethemodule\"> <h2 class=\"heading\"><span>Build and package the module</span></h2> <p>Next, build the module and package it. This process produces a ZIP file in the <tt class=\"\">android</tt> <tt>/dist</tt> directory containing a binary library with unprocessed module assets, example code and documentation. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal, go to the module&apos;s <tt class=\"\">android</tt> directory and run <tt>appc run -p android --build-only</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">cd test/android</code></div> <div class=\"line\"><code class=\"plain\">appc run -p android --build-only</code></div> </div> </div> <p>After the build completes, unzip the built module in the Titanium SDK home path: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">unzip -o com.example.test-android-</code><code class=\"value\">1.0</code><code class=\"plain\">.</code><code class=\"value\">0</code><code class=\"plain\">.zip -d ~/Library/Application\\ Support/Titanium/</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>Select your module folder in the <strong>Project Explorer</strong> view. </p> </li><li class=\"\"> <p>Verify <strong class=\"\">Package</strong> and <strong class=\"\">Android Module</strong> are displayed in <strong class=\"\">Launch Mode</strong> and <strong>Launch Target</strong>, respectively. </p> </li><li class=\"\"> <p>Click the Package icon to open the <strong>Package Android Module</strong> dialog. </p> </li><li class=\"\"> <p>In <strong class=\"\">Output Location</strong>, choose the <strong>Titanium SDK</strong> to install the module in the Titanium SDK home path to be accessed by any Titanium application. </p> </li><li class=\"\"> <p>Click <strong>Finish</strong>. </p> </li></ol> <p>Studio builds and installs the module to the Titanium SDK home path. </p> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Testthemodule\"> <h2 class=\"heading\"><span>Test the module</span></h2> <p>To test the module, create a test application and add the module as a dependency of the project. Then, load the module and make module API calls to the module reference. </p> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-Createatestapplication\"> <h3 class=\"heading\"><span>Create a test application</span></h3> <p> </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a new terminal window, change the current working directory to your workspace and run the following commands: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">cd /PATH/TO/WORKSPACE</code></div> <div class=\"line\"><code class=\"plain\">appc </code><code class=\"keyword\">new</code><code class=\"plain\"> -t titanium -p android -d . -n Hello -u http:</code><code class=\"comments\">// --id com.example.hello</code></div> <div class=\"line\"><code class=\"plain\">cd Hello/</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>From the menu, select <strong class=\"\">File</strong> &gt; <strong class=\"\">New</strong> &gt; <strong class=\"\">Mobile App Project</strong> to open the <strong>New Mobile App Project</strong> dialog. </p> </li><li class=\"\"> <p>On the <strong class=\"\">Project Template</strong> page, select <strong class=\"\">Default Alloy Project</strong> as the template type, then click <strong>Next</strong>. </p> </li><li class=\"\"> <p>On the <strong>Project Location</strong> page, enter the following information: </p> <ul class=\"\"><li class=\"\"> <p>In the <strong class=\"\">Project Name</strong> field, enter <strong>Hello</strong>. </p> </li><li class=\"\"> <p>In the <strong class=\"\">App ID</strong> field, enter <strong>com.example.hello</strong>. </p> </li><li class=\"\"> <p>In <strong class=\"\">Deployment Targets</strong>, select <strong>Android</strong>. </p> </li></ul></li><li class=\"\"> <p>Click <strong>Finish</strong> to create the project. </p> </li></ol> <p>Studio sets up a new folder called <tt>Hello</tt> that contains the test application you will be using to test the module. </p> </div> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-Addthemoduleasadependencytotheproject\"> <h3 class=\"heading\"><span>Add the module as a dependency to the project</span></h3> <p>To load the module in the application, you need to add it as a dependency to the project. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>Open the <tt class=\"\">tiapp.xml</tt> and update the <tt>&lt;modules/&gt;</tt> element to include the module as a dependency to the project: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;modules&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;module platform=</code><code class=\"string\">&quot;android&quot;</code><code class=\"plain\">&gt;com.example.test&lt;/module&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/modules&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div> </div> </div> </div> <p>In Studio: </p> <ol class=\"\"><li class=\"\"> <p>Open the <tt>tiapp.xml</tt> file located in the root directory of the project. </p> </li><li class=\"\"> <p>Under the <strong class=\"\">Modules</strong> section, click the <strong>Add</strong> button. </p> </li><li class=\"\"> <p>Select <strong>com.example.test</strong>. </p> </li><li class=\"\"> <p>Click <strong>OK</strong>. </p> </li></ol> </div> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-LoadthemoduleandmakemoduleAPIcalls\"> <h3 class=\"heading\"><span>Load the module and make module API calls</span></h3> <p> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>The module can be loaded by passing the module ID to the <tt>require()</tt>method, which returns a reference to the module that API calls can be made on. </p> </div> <p>Open the <tt>app/alloy.js</tt> file and replace the code with the following, which invokes API calls to the module: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/alloy.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/alloy.js\"> <div class=\"line\"><code class=\"plain\">var test = require(</code><code class=\"string\">&apos;com.example.test&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&quot;module is =&gt; &quot;</code><code class=\"plain\"> + test);</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&quot;module example() method returns =&gt; &quot;</code><code class=\"plain\"> + test.example());</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&quot;module exampleProp is =&gt; &quot;</code><code class=\"plain\"> + test.exampleProp);</code></div> <div class=\"line\"><code class=\"plain\">test.exampleProp = </code><code class=\"string\">&quot;This is a test value&quot;</code><code class=\"plain\">;</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-Runtheapplication\"> <h3 class=\"heading\"><span>Run the application</span></h3> <p> </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">CLI Instructions</div> <p>From a terminal that has the test app as its current working directory, run: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">appc run -p android</code></div> </div> </div> </div> <p>In the Studio toolbar, select <strong class=\"\">Run</strong> in <strong class=\"\">Launch Modes</strong> and select an Android emulator in <strong>Launch Targets</strong>. </p> <p>Studio builds and launches the application on the selected Android simulator. Monitor the <strong>Console</strong> view for log output. </p> <p>The console lines seen below show us that the module is working as expected. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Console</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Console\"> <div class=\"line\"><code class=\"plain\">[INFO] module is =&gt; [object Object]</code></div> <div class=\"line\"><code class=\"plain\">[INFO] module example() method returns =&gt; hello world</code></div> <div class=\"line\"><code class=\"plain\">[INFO] module exampleProp is =&gt; hello world</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Modifythemodule\"> <h2 class=\"heading\"><span>Modify the module</span></h2> <p>Let&apos;s modify the module code to create a view object and access a string property. </p> <p>First, look at some of the default files created by the Titanium SDK. Expand the <tt>android/src/com/example/test</tt> folder. Inside this folder are two files: </p> <ul class=\"\"><li class=\"\"> <p><tt>TestModule.java</tt>: This is a boiler plate Module class. Every module requires a module class, which acts as the base API for the module, such as providing the module ID, GUID, etc. </p> </li><li class=\"\"> <p>ExampleProxy.java: This is a boiler plate Proxy class that you can model your module Proxy and View components on. All Proxy classes must end with <tt>Proxy</tt> in the name of the class and file. </p> </li></ul> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-AddaViewProxyandView\"> <h3 class=\"heading\"><span>Add a View Proxy and View</span></h3> <p>To display any UI with a module, create a view proxy and view class in pairs. Open the <tt>ExampleProxy.java</tt> file and replace its contents with the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ExampleProxy.java</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ExampleProxy.java\"> <div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.test;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.KrollDict;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.common.AsyncResult;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.common.TiMessenger;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.TiApplication;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.TiC;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.util.TiConvert;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.proxy.TiViewProxy;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiCompositeLayout;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.view.TiUIView;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> android.app.Activity;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> android.os.Handler;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> android.os.Message;</code></div> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> android.view.View;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy(creatableInModule=TestModule.</code><code class=\"keyword\">class</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ExampleProxy </code><code class=\"keyword\">extends</code><code class=\"plain\"> TiViewProxy</code></div> <div class=\"line\"><code class=\"plain\">{ </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">private</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> MSG_SET_COLOR = </code><code class=\"value\">70000</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">private</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> String PROPERTY_COLOR = </code><code class=\"string\">&quot;color&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">private</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ExampleView </code><code class=\"keyword\">extends</code><code class=\"plain\"> TiUIView</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> ExampleView(TiViewProxy proxy) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">super</code><code class=\"plain\">(proxy);</code></div> <div class=\"line\"><code class=\"plain\"> LayoutArrangement arrangement = LayoutArrangement.DEFAULT;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {</code></div> <div class=\"line\"><code class=\"plain\"> String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {</code></div> <div class=\"line\"><code class=\"plain\"> arrangement = LayoutArrangement.HORIZONTAL;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {</code></div> <div class=\"line\"><code class=\"plain\"> arrangement = LayoutArrangement.VERTICAL;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> setNativeView(</code><code class=\"keyword\">new</code><code class=\"plain\"> TiCompositeLayout(proxy.getActivity(), arrangement));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> processProperties(KrollDict props) </code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">super</code><code class=\"plain\">.processProperties(props);</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Check if the color is specified when the view was created</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (props.containsKey(PROPERTY_COLOR)) {</code></div> <div class=\"line\"><code class=\"plain\"> View square = (View)getNativeView();</code></div> <div class=\"line\"><code class=\"plain\"> square.setBackgroundColor(TiConvert.toColor(props, PROPERTY_COLOR)); </code></div> <div class=\"line\"><code class=\"plain\"> square.invalidate();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> } </code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Setter method called by the proxy when the &apos;color&apos; property is set.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setColor(String color) </code></div> <div class=\"line\"><code class=\"plain\"> { </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Use the TiConvert method to get the values from the arguments</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> newColor = TiConvert.toColor(color);</code></div> <div class=\"line\"><code class=\"plain\"> View square = (View)getNativeView();</code></div> <div class=\"line\"><code class=\"plain\"> square.setBackgroundColor(newColor);</code></div> <div class=\"line\"><code class=\"plain\"> } </code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Override</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> TiUIView createView(Activity activity)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> TiUIView view = </code><code class=\"keyword\">new</code><code class=\"plain\"> ExampleView(</code><code class=\"keyword\">this</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> view.getLayoutParams().autoFillsHeight = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> view.getLayoutParams().autoFillsWidth = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> view;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty(retain=</code><code class=\"keyword\">false</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setColor(</code><code class=\"keyword\">final</code><code class=\"plain\"> String color) </code></div> <div class=\"line\"><code class=\"plain\"> { </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Get the view object from the proxy and set the color</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (view != </code><code class=\"keyword\">null</code><code class=\"plain\">) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!TiApplication.isUIThread()) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// If we are not on the UI thread, need to use a message to set the color</code></div> <div class=\"line\"><code class=\"plain\"> TiMessenger.sendBlockingMainMessage(</code><code class=\"keyword\">new</code><code class=\"plain\"> Handler(TiMessenger.getMainMessenger().getLooper(), </code><code class=\"keyword\">new</code><code class=\"plain\"> Handler.Callback() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">boolean</code><code class=\"plain\"> handleMessage(Message msg) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">switch</code><code class=\"plain\"> (msg.what) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> MSG_SET_COLOR: {</code></div> <div class=\"line\"><code class=\"plain\"> AsyncResult result = (AsyncResult) msg.obj;</code></div> <div class=\"line\"><code class=\"plain\"> ExampleView fooView = (ExampleView)view;</code></div> <div class=\"line\"><code class=\"plain\"> fooView.setColor(color);</code></div> <div class=\"line\"><code class=\"plain\"> result.setResult(</code><code class=\"keyword\">null</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }).obtainMessage(MSG_SET_COLOR), color);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> ExampleView fooView = (ExampleView)view;</code></div> <div class=\"line\"><code class=\"plain\"> fooView.setColor(color);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Updates the property on the JavaScript proxy object</code></div> <div class=\"line\"><code class=\"plain\"> setProperty(</code><code class=\"string\">&quot;color&quot;</code><code class=\"plain\">, color, </code><code class=\"keyword\">true</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>The <tt class=\"\">ExampleProxy</tt> class extends the <tt class=\"\">TiViewProxy</tt> class. This class exposes the view to the JavaScript and acts as an intermediary between the JavaScript and the native view. The class implements one method of the <tt>TiViewProxy</tt> class and a custom setter method: </p> <ul class=\"\"><li class=\"\"> <p><strong class=\"\"> <tt class=\"\">createView</tt> </strong>: This method must be implemented in every class that extends a <tt>TiViewProxy</tt>. The method should create and return the View. </p> </li><li class=\"\"> <p><strong class=\"\"> <tt class=\"\">setColor</tt> </strong>: Calls the <tt class=\"\">setColor</tt> method of the view and sets the color property on the JavaScript proxy object. Note the <tt>@Kroll.setProperty</tt> annotation before the method. This annotation exposes the property and setter to JavaScript. </p> </li></ul> <p>The <tt class=\"\">ExampleView</tt> class extends the <tt class=\"\">TiUIView</tt> class. The TiUIView can be added to other Titanium views and windows, which makes it the perfect place for a UIView to be added so that it can be displayed in a Titanium app. This class creates the native view to display. The class implements the the constructor and one method of the <tt>TiUIView</tt> class, and a custom setter method: </p> <ul class=\"\"><li class=\"\"> <p><strong class=\"\">constructor</strong>: The constructor must be implemented in every class that extends a <tt>TiUIView</tt>. </p> </li><li class=\"\"> <p><strong class=\"\"> <tt>processProperties</tt> </strong>: This method allows the application to processes properties passed in when the view is created. In this example, the application intercepts the color property to set the native view&apos;s background color. </p> </li><li class=\"\"> <p><strong class=\"\"> <tt class=\"\">setColor</tt> </strong>: Sets the background color of the native view. This method is called by the View Proxy&apos;s <tt>setColor</tt> method. </p> </li></ul> <p>Notice the <tt class=\"\">@Kroll.proxy(creatableInModule=TestModule.class)</tt> annotation before the View Proxy class declaration. This annotation exposes the <tt class=\"\">createExample()</tt> method to JavaScript to create the view from a Titanium application. The name of the method is the name of the View Proxy class without the <tt class=\"\">Proxy</tt> suffix, then prefixed with <tt class=\"\">create</tt>. For example, if the class was called<tt class=\"\">TestViewProxy</tt> (rather than <tt class=\"\">ExampleProxy</tt>), the method would be called <tt class=\"\">createTestView()</tt> (rather than <tt>createExample()</tt>). </p> <p>Below is an example of calling <tt>createExample()</tt>, and passing dimensions and color properties to the method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Example</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Example\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> view = test.createExample({</code></div> <div class=\"line\"><code class=\"plain\"> color: </code><code class=\"string\">&apos;blue&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> height: 50,</code></div> <div class=\"line\"><code class=\"plain\"> width: 50</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(view);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-Addaproperty\"> <h3 class=\"heading\"><span>Add a property</span></h3> <p>A Proxy is a key/value store like an Object. Without any modification, you can set properties on a Module, Proxy or ViewProxy and then read them back at will as if they were properties. You can also override the getters and setters to add some custom logic. </p> <p>Modify the default module class file to store and retrieve a string value. Add a private variable to store the string value, then modify the example setter and getter to actually set and get the variable you just declared. These methods are already declared in the <tt class=\"\">ComExampleTestModule.m</tt> file but not implemented. Titanium requires that all setter methods be declared with the method name starting with <tt class=\"\">set</tt> and being passed an <tt>id</tt> datatype. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">TestModule.java</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"TestModule.java\"> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">private</code><code class=\"plain\"> String foo;</code></div> <div class=\"line\"><code class=\"plain\">...</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.getProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> String getExampleProp()</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Log.i(LCAT, </code><code class=\"string\">&quot;In Module - the stored value for exampleProp:&quot;</code><code class=\"plain\"> + foo);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> foo;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setExampleProp(String value) {</code></div> <div class=\"line\"><code class=\"plain\"> Log.i(LCAT, </code><code class=\"string\">&quot;In Module - the new value for exampleProp:&quot;</code><code class=\"plain\"> + foo);</code></div> <div class=\"line\"><code class=\"plain\"> foo = value;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> </div> </div> <p>In the JavaScript code, the <tt class=\"\">foo</tt> string can be accessed using the <tt class=\"\">exampleProp</tt> property, and <tt class=\"\">getExampleProp()</tt> and <tt class=\"\">setExampleProp</tt> <tt>()</tt> methods. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>To create a property without a custom getter or setter, add the property name in the <tt class=\"\">propertyAccessors</tt> element list of the <tt class=\"\">@Kroll.proxy</tt> or <tt>@Kroll.module</tt> annotation type: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// package...</code></div> <div class=\"line\"><code class=\"comments\">// import(s)...</code></div> <div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.module(name=</code><code class=\"string\">&quot;Test&quot;</code><code class=\"plain\">, id=</code><code class=\"string\">&quot;com.example.test&quot;</code><code class=\"plain\">, propertyAccessors = {</code><code class=\"string\">&quot;exampleProp&quot;</code><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> TestModule </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollModule {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Class stuff...</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43289022_AndroidModuleQuickStart-Testthemodule.1\"> <h3 class=\"heading\"><span>Test the module</span></h3> <p>Open the <tt>app/views/index.xml</tt> file and replace the code with the following, which loads the module and displays a red square: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;!-- Invokes the createView method and provides a reference to the module in the controller --&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Module</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;test&quot;</code><code class=\"plain\"> </code><code class=\"color1\">module</code><code class=\"plain\">=</code><code class=\"string\">&quot;com.example.test&quot;</code><code class=\"plain\"> </code><code class=\"color1\">method</code><code class=\"plain\">=</code><code class=\"string\">&quot;createView&quot;</code><code class=\"plain\"> </code><code class=\"color1\">height</code><code class=\"plain\">=</code><code class=\"string\">&quot;50&quot;</code><code class=\"plain\"> </code><code class=\"color1\">width</code><code class=\"plain\">=</code><code class=\"string\">&quot;50&quot;</code><code class=\"plain\"> </code><code class=\"color1\">color</code><code class=\"plain\">=</code><code class=\"string\">&quot;red&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\">\t&lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <p>Open the <tt>app/controllers/index.js</tt> file and replace the code with the following, which invokes API calls to the module: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/controllers/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/controllers/index.js\"> <div class=\"line\"><code class=\"plain\">$.index.open();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">$.test.exampleProp = </code><code class=\"string\">&apos;foobar&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">&apos;exampleProp: &apos;</code><code class=\"plain\"> + $.test.getExampleProp());&#xA0;</code></div> </div> </div> <p>Build and install your module, then run the example app. </p> <p>When the application starts running, you see should a red square in the middle of the screen and see the log output below, which means the application successfully loaded the module and called its APIs. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Console</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Console\"> <div class=\"line\"><code class=\"plain\">[INFO] : TestModule: (KrollRuntimeThread) [1,165] In Module - the new value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp:foobar</code></div> <div class=\"line\"><code class=\"plain\">[INFO] : TestModule: (KrollRuntimeThread) [2,167] In Module - the stored value </code><code class=\"keyword\">for</code><code class=\"plain\"> exampleProp:foobar</code></div> <div class=\"line\"><code class=\"plain\">[INFO] exampleProp: foobar</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-Nextsteps\"> <h2 class=\"heading\"><span>Next steps</span></h2> <ul class=\"\"><li class=\"\"> <p>For information about how to structure your module project, add assets or third-party frameworks to your module project or more details on how to use the CLI or Studio, see <a class=\"document-link\" href=\"#!/guide/Android_Module_Project\">Android Module Project</a>. </p> </li><li class=\"\"> <p>For information about how to construct the class components for your project, see <a class=\"document-link\" href=\"#!/guide/Android_Module_Architecture\">Android Module Architecture</a>. </p> </li><li> <p>For more examples of using the module API, see the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-modules/ti.moddevguide/tree/master/android\" target=\"_blank\">ti.moddevguide Github project</a>. </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-43289022_AndroidModuleQuickStart-AIDLsupport\"> <h2 class=\"heading\"><span>AIDL support</span></h2> <p>As of 5.2.0, building Android modules now supports AIDL files. To use AIDL files in your app, apply the following steps: </p> <ol class=\"\"><li> <p>Using Studio, you can generate the AIDL .java file. The AIDL file is only used to generate the Java interface code. Once that file is available, it isn&apos;t required anymore. See Android Developer&apos;s page called Preparing Your In-app Billing Application for more details. </p> </li><li> <p>Copy over the AIDL file into the correct namespace package folder into the src directory of the Appcelerator Studio module. </p> </li></ol> <p>See <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-modules/ti.inappbilling/blob/stable/android/src/com/android/vending/billing/IInAppBillingService.java\" target=\"_blank\">IInAppBillingService.java</a> for reference information. </p> <p>Note: Prior to Studio 5.2.0, you will need to use either Eclipse or Android Studio to generate the AIDL file. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43289022\"><span>Edit</span></a> </div> </body> </html> ","title":"Android Module Quick Start"});