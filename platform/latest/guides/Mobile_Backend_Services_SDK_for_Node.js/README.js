Ext.data.JsonP['Mobile_Backend_Services_SDK_for_Node.js']({"guide":" <!doctype html> <html> <head> <title>Mobile Backend Services SDK for Node.js</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-49153772\" class=\"content\"> <h1>Mobile Backend Services SDK for Node.js</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Installation\">Installation</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-APIusage\">API usage</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Setup\">Setup</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-StandardMobileBackServicesAPIs\">Standard Mobile Back Services APIs</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Userloginexample\">User login example</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Photoorfileuploadexample\">Photo or file upload example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-GenericMobileBackServicesAPIs\">Generic Mobile Back Services APIs</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-UserloginsessionmanagementUserloginsessionmanagement\">User login session management</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Cookie-basedsessionmanagement\">Cookie-based session management</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Manualsessionmanagement\">Manual session management</a> </p> </li></ul></li></ul> <p>The Mobile Back Services (MBS) Node SDK lets you easily integrate MBS services with your Node.js application. The SDK provides two APIs: </p> <ul class=\"\"><li> <p>An API for each class and method. </p> </li><li> <p>A set of generic REST APIs. </p> </li></ul> <p>Your Node application can optionally handle session data itself. For more information, see the <a class=\"document-link\" href=\"#!/guide/Mobile_Backend_Services_SDK_for_Node.js-section-src-49153772_MobileBackendServicesSDKforNode.js-Userloginsessionmanagement\">User login session management</a> section. </p> <div class=\"section section-2\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Installation\"> <h2 class=\"heading\"><span>Installation</span></h2> <p>To use the module within your Node application, add the <tt class=\"\">arrowdb</tt> module to the <tt class=\"\">dependencies</tt> section of your <tt>package.json</tt> file, as follows: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"string\">&quot;dependencies&quot;</code><code class=\"plain\">: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;arrowdb&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;&gt;=1.0.6&quot;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>You can then run <tt>npm install</tt> from your application folder to install the module and its dependencies. </p> <p>You can also install the module directly using <tt>npm</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">[sudo] npm install arrowdb</code></div> </div> </div> <p>As of this writing, the latest version is <strong>1.0.6</strong>. </p> </div> <div class=\"section section-2\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-APIusage\"> <h2 class=\"heading\"><span>API usage</span></h2> <div class=\"section section-3\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Setup\"> <h3 class=\"heading\"><span>Setup</span></h3> <p>To use the MBS APIs, load the <tt class=\"\">arrowdb</tt> module, then create an instance with the <tt>new</tt> constructor, passing it your MBS application key. Invoke API calls on the instance. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">arrowDBApp.usersLogin(params, callback);</code></div> </div> </div> <p>This only needs to be done once, typically in the main <tt>app.js</tt> script file. </p> <p>You may optionally pass the constructor an object as the second argument. You may set the following properties on the object: </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">apiEntryPoint</tt>: Base URL of the MBS server. By default, it is <tt>https://api.cloud.appcelerator.com</tt>. </p> </li><li class=\"\"> <p><tt class=\"\">autoSessionManagement</tt>: Set to <tt class=\"\">false</tt> to manually manage the session cookie or session ID. By default, it is <tt>true</tt> and the SDK automatically handles the sessions. </p> </li><li class=\"\"> <p><tt class=\"\">responseJsonDepth</tt>: Sets the <tt class=\"\">response_json_depth</tt> parameter for all API calls. By default, the value is <tt>1</tt>. You may set the value from 1 to 8. </p> </li></ul> <p>For example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">, {</code></div> <div class=\"line\"><code class=\"plain\"> apiEntryPoint: </code><code class=\"string\">&apos;https://api.cloud.appcelerator.com&apos;</code></div> <div class=\"line\"><code class=\"plain\"> autoSessionManagement: </code><code class=\"keyword\">false</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> responseJsonDepth: 3</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-StandardMobileBackServicesAPIs\"> <h3 class=\"heading\"><span>Standard Mobile Back Services APIs</span></h3> <p>The standard MBS APIs provide a standardized API name for each REST object and method. Invoke the method on the MBS SDK instance. </p> <p>The API name of most of the standard MBS Node API calls is the concatenation of the REST class name and method in lower camel case notation. For example, the Users object login method will be <tt>usersLogin</tt>. Check the Node example of the method to see its exact name. </p> <p>Pass each method an optional parameters object and a required callback. </p> <p>Set any method parameters on the parameters object. The parameters object may be omitted. For middleware calls, such as Express, you may optionally pass the request and response objects to the parameters object using the <tt class=\"\">req</tt> and <tt>res</tt> keys, respectively. </p> <p>The callback is passed an Error object (or null if successful) and the results of the method call. The results object contains the following properties: </p> <ul class=\"\"><li class=\"\"> <p><tt>body</tt>: HTTP response body as a JSON object. </p> </li><li class=\"\"> <p><tt>cookieString</tt>: Session cookie string if the API returns a session ID else it will be an empty string. </p> </li><li class=\"\"> <p><tt>reason</tt>: HTTP error message. </p> </li><li class=\"\"> <p><tt>response</tt>: <a class=\"external-link external-link\" href=\"https://nodejs.org/docs/latest/api/http.html#http_class_http_serverresponse\" target=\"_blank\">Node.js http.ServerResponse object</a>. </p> </li><li class=\"\"> <p><tt>statusCode</tt>: HTTP status code. </p> </li></ul> <p>To access the results from the returned object, use the object&apos;s <tt class=\"\">body</tt> property to access the HTTP response body. The body object will contain a <tt class=\"\">meta</tt> object, which contains the metadata of the response, and a <tt>response</tt> object, which contains the results of the method call. </p> <div class=\"section section-4\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Userloginexample\"> <h4 class=\"heading\"><span>User login example</span></h4> <p>The following example uses the standard MBS APIs to log in a user. It defines a custom <tt class=\"\">login()</tt> function that takes the <tt class=\"\">username</tt> and <tt class=\"\">password</tt> properties from the HTTP request body, and in turn, passes those values as input to the <tt>User.login()</tt> method. On successful login, the user&apos;s information is displayed in the console or, in case of an error, the error response is displayed. </p> <div class=\"tablewrap\"> <table> <thead class=\"\"/><tfoot class=\"\"/><tbody> <tr> <td rowspan=\"1\" colspan=\"1\"> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> login(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> data = {</code></div> <div class=\"line\"><code class=\"plain\"> login: req.body.username,</code></div> <div class=\"line\"><code class=\"plain\"> password: req.body.password,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// the req and res parameters are optional</code></div> <div class=\"line\"><code class=\"plain\"> req: req,</code></div> <div class=\"line\"><code class=\"plain\"> res: res</code></div> <div class=\"line\"><code class=\"plain\"> };</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.usersLogin(data, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> console.error(</code><code class=\"string\">&quot;Login error:&quot;</code><code class=\"plain\"> + (err.message || result.reason));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&quot;Login successful!&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&quot;UserInfo: &quot;</code><code class=\"plain\"> + JSON.stringify(result.body.response.users[0]));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </td> </tr> </tbody> </table> </div> </div> <div class=\"section section-4\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Photoorfileuploadexample\"> <h4 class=\"heading\"><span>Photo or file upload example</span></h4> <p> <span style=\"color: #000000;\"> The following example uses the standard MBS APIs to upload a photo or a file. It defines a custom <tt class=\"\">upload()</tt> function that captures the <tt class=\"\">fileName</tt> and <tt>fileObject</tt>, creates a file buffer for string and readable stream, and logs in the user. If the login is successful, the file is uploaded. If a login error occurs, the login error response is displayed. If a file upload error occurs, the upload error response is displayed. </span> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>For increased file security, it is recommended that files be encrypted prior to uploading them. </p> </div> <p> <span style=\"color: #000000;\"> <br> </br></span> </p> <div class=\"tablewrap\"> <table> <thead class=\"\"/><tfoot class=\"\"/><tbody> <tr> <td rowspan=\"1\" colspan=\"1\"> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&#xA0;</code><code class=\"keyword\">function</code><code class=\"plain\"> upload(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(req.body.fileName);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//console.log(req.body.fileObject);</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create buffer for string and readable stream</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> buffer = </code><code class=\"keyword\">new</code><code class=\"plain\"> Buffer(req.body.fileObject); </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> base64String = buffer.toString(</code><code class=\"string\">&quot;base64&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> bufferStream = </code><code class=\"keyword\">new</code><code class=\"plain\"> stream.PassThrough();</code></div> <div class=\"line\"><code class=\"plain\"> bufferStream.end(buffer);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Setup and login to ArrowDB</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.usersLogin({</code></div> <div class=\"line\"><code class=\"plain\"> login: </code><code class=\"string\">&apos;&lt;login&gt;&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> password: </code><code class=\"string\">&apos;&lt;password&gt;&apos;</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> console.error(err.message);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.sessionCookieString = result.cookieString;</code></div> <div class=\"line\"><code class=\"plain\"> sessionID = result.body.meta.session_id;</code></div> <div class=\"line\"><code class=\"plain\"> bufferStream.end(base64String);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> fileInfo = {</code></div> <div class=\"line\"><code class=\"plain\"> value: bufferStream,</code></div> <div class=\"line\"><code class=\"plain\"> options: {</code></div> <div class=\"line\"><code class=\"plain\"> filename: req.body.fileName,</code></div> <div class=\"line\"><code class=\"plain\"> knownLength: req.body.fileObject.length</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// On login success create the file</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.filesCreate({</code></div> <div class=\"line\"><code class=\"plain\"> name: req.body.fileName,</code></div> <div class=\"line\"><code class=\"plain\"> file: fileInfo</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> console.error(JSON.stringify(err, </code><code class=\"keyword\">null</code><code class=\"plain\">, </code><code class=\"string\">&quot;\\t&quot;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(result.body.response.files[0]);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </td> </tr> </tbody> </table> </div> </div> </div> <div class=\"section section-3\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-GenericMobileBackServicesAPIs\"> <h3 class=\"heading\"><span>Generic Mobile Back Services APIs</span></h3> <p>The MBS Node SDK provides the following four methods for making generic calls to MBS: </p> <ul class=\"\"><li class=\"\"> <p><tt>sdkObject.post(path, parameters, callback)</tt> </p> </li><li class=\"\"> <p><tt>sdkObject.put(path, parameters, callback)</tt> </p> </li><li class=\"\"> <p><tt>sdkObject.get(path, parameters, callback)</tt> </p> </li><li class=\"\"> <p><tt>sdkObject.delete(path, parameters, callback)</tt> </p> </li></ul> <p>Each method is passed the following parameters: </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">path</tt>: The path of the REST resource to call relative to the base URL (by default, it is <tt>https://api.cloud.appcelerator.com</tt>). </p> </li><li class=\"\"> <p><tt>parameters</tt>: The parameters to pass to the method. May be omitted. </p> </li><li class=\"\"> <p><tt>callback</tt>: The function to call when the request completes. The callback is passed an Error object (or null if successful) and the results of the method call. </p> </li></ul> <p>Below is a complete REST example that is functionally equivalent to the previous version that used the standard MBS APIs. </p> <div class=\"tablewrap\"> <table> <thead class=\"\"/><tfoot class=\"\"/><tbody> <tr> <td rowspan=\"1\" colspan=\"1\"> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> login(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> data = {</code></div> <div class=\"line\"><code class=\"plain\"> login: req.body.username,</code></div> <div class=\"line\"><code class=\"plain\"> password: req.body.password</code></div> <div class=\"line\"><code class=\"plain\"> };</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.post(</code><code class=\"string\">&apos;/v1/users/login.json&apos;</code><code class=\"plain\">, data, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> console.error(</code><code class=\"string\">&quot;Login error:&quot;</code><code class=\"plain\"> + (err.message || result.reason));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&quot;Login successful!&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&quot;UserInfo: &quot;</code><code class=\"plain\"> + JSON.stringify(result.body.response.users[0]));</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </td> </tr> </tbody> </table> </div> </div> </div> <div class=\"section section-2\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-UserloginsessionmanagementUserloginsessionmanagement\"> <h2 class=\"heading\"><span id=\"src-49153772_MobileBackendServicesSDKforNode.js-Userloginsessionmanagement\" class=\"confluence-anchor-link\"/><span>User login session management</span></h2> <p>Most of the MBS APIs require a user to be logged in, so it is important to have a way to manage user sessions in your Node.js application. The MBS Node SDK provides two ways of managing MBS login sessions in a Node.js application: </p> <ul class=\"\"><li class=\"\"> <p><strong>Cookie-based</strong>. Cookies are used to store session information and passed between the client and server. </p> </li><li class=\"\"> <p><strong>Session ID</strong>. Must pass a session ID with every API call. </p> </li></ul> <p>These methods are described in the following sections. </p> <div class=\"section section-3\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Cookie-basedsessionmanagement\"> <h3 class=\"heading\"><span>Cookie-based session management</span></h3> <p>Cookies are frequently used by MBS applications to store session information and are passed between the client and server. </p> <p>The MBS Node SDK retrieves the session ID from the request&apos;s cookies. If a <tt>_session_id</tt> cookie is present, it uses that session ID to make the MBS API call. If not, it performs a regular API call without session information. </p> <p>If a session ID is returned in the API response (for example, <tt class=\"\">users/login.json</tt>), the session information is added to the response object. Specifically, it adds a <tt>Set-Cookie</tt> header to pass back to the client. </p> <p>To manually manage cookie sessions, disable automatic session management by passing an object as the second parameter to the constructor with the <tt class=\"\">autoSessionManagement</tt> property set to <tt class=\"\">false</tt>. MBS will no longer automatically retrieve and set the session cookie. You must manually set the MBS instance&apos;s <tt class=\"\">sessionCookieString</tt> property once you retrieve a cookie string. The cookie string is available in the <tt>cookieString</tt> property in the callback&apos;s result object if the API response returns a session ID. </p> <p>The example below retrieves and sets the cookie string: </p> <div class=\"tablewrap\"> <table> <thead class=\"\"/><tfoot class=\"\"/><tbody> <tr> <td rowspan=\"1\" colspan=\"1\"> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ArrowDB = require(</code><code class=\"string\">&apos;arrowdb&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp = </code><code class=\"keyword\">new</code><code class=\"plain\"> ArrowDB(</code><code class=\"string\">&apos;&lt;App Key&gt;&apos;</code><code class=\"plain\">, {autoSessionManagement: </code><code class=\"keyword\">false</code><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> login(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> data = {</code></div> <div class=\"line\"><code class=\"plain\"> login: req.body.username,</code></div> <div class=\"line\"><code class=\"plain\"> password: req.body.password</code></div> <div class=\"line\"><code class=\"plain\"> };</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.post(</code><code class=\"string\">&apos;/v1/users/login.json&apos;</code><code class=\"plain\">, data, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result){</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> console.error(</code><code class=\"string\">&quot;Login error:&quot;</code><code class=\"plain\"> + (err.message || result.reason));</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&quot;Login successful!&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.sessionCookieString = result.cookieString;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </td> </tr> </tbody> </table> </div> <p><strong>Important</strong> </p> <ul class=\"\"><li class=\"\"> <p>The MBS Node SDK sets the cookie header in the response object, which must be done <i class=\"\">before</i> sending any response data (for example, by calling the response object&apos;s <tt class=\"\">send</tt> method). If you send any response data <i>before</i> the API callback function is invoked, the MBS Node SDK will throw an exception when it tries to set the cookie headers, with a message like, &quot;Can&apos;t render headers after they are sent to the client.&quot; </p> </li><li class=\"\"> <p>Session information is stored in a cookie named <tt class=\"\">_session_id</tt>. You can also manually set this session ID cookie on the client side. For example, if you are calling your API Runtime service from a Titanium application that uses MBS directly, you can retrieve the active session ID from the Titanium.Cloud.sessionId property, and adding a <tt>Set-Cookie</tt> header when making a request to the API Runtime service. </p> </li></ul> </div> <div class=\"section section-3\" id=\"src-49153772_MobileBackendServicesSDKforNode.js-Manualsessionmanagement\"> <h3 class=\"heading\"><span>Manual session management</span></h3> <p>An MBS user login session is identified by a <tt class=\"\">session_id</tt> parameter in the request or response data. When logging in to a user account or creating a new user, the <tt class=\"\">session_id</tt> is returned in the response data of the API calls. It can be retrieved from the response data by using the <tt>body.meta.session_id</tt> property of the callback&apos;s result object. For example: </p> <div class=\"tablewrap\"> <table> <thead class=\"\"/><tfoot class=\"\"/><tbody> <tr> <td rowspan=\"1\" colspan=\"1\"> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> loginUser(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.usersLogin({</code></div> <div class=\"line\"><code class=\"plain\"> login: </code><code class=\"string\">&apos;test&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> password: </code><code class=\"string\">&apos;test&apos;</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&apos;Login session is: &apos;</code><code class=\"plain\"> + result.body.meta.session_id);</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </td> </tr> </tbody> </table> </div> <p>To reuse this session for making other API calls, pass it in as part of the request parameters (<tt>session_id: _stored_session_id_</tt>). This gives you full control of the sessions. You can store a session and reuse it (as long as the session is not expired on the MBS server) later for making API calls. For example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> createPlace(req, res) {</code></div> <div class=\"line\"><code class=\"plain\"> arrowDBApp.placesCreate({</code></div> <div class=\"line\"><code class=\"plain\"> name: </code><code class=\"string\">&apos;test&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> city: </code><code class=\"string\">&apos;city_name&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> session_id: </code><code class=\"string\">&apos;&lt;stored session_id&gt;&apos;</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, result) {</code></div> <div class=\"line\"><code class=\"plain\"> console.log(</code><code class=\"string\">&apos;New place created!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49153772\"><span>Edit</span></a> </div> </body> </html> ","title":"Mobile Backend Services SDK for Node.js"});