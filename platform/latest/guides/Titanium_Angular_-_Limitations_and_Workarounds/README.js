Ext.data.JsonP['Titanium_Angular_-_Limitations_and_Workarounds']({"guide":" <!doctype html> <html> <head> <title>Titanium Angular - Limitations and Workarounds</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-54592074\" class=\"content\"> <h1>Titanium Angular - Limitations and Workarounds</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Titanium_Angular_-_Limitations_and_Workarounds-section-src-54592074_TitaniumAngular-LimitationsandWorkarounds-TypeScriptAPI\">TypeScript API</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Titanium_Angular_-_Limitations_and_Workarounds-section-src-54592074_TitaniumAngular-LimitationsandWorkarounds-WorkingwithTitaniumelements\">Working with Titanium elements</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Titanium_Angular_-_Limitations_and_Workarounds-section-src-54592074_safe-id-VGl0YW5pdW1Bbmd1bGFyLUxpbWl0YXRpb25zYW5kV29ya2Fyb3VuZHMtQWNjZXNzaW5ndGhlVGl0YW5pdW12aWV3L3Byb3h5b2Z0ZW1wbGF0ZWVsZW1lbnRz\">Accessing the Titanium view/proxy of template elements</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Titanium_Angular_-_Limitations_and_Workarounds-section-src-54592074_TitaniumAngular-LimitationsandWorkarounds-Configuringtemplateelementsprogrammatically\">Configuring template elements programmatically</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Titanium_Angular_-_Limitations_and_Workarounds-section-src-54592074_TitaniumAngular-LimitationsandWorkarounds-TitaniumRouter\">Titanium Router</a> </p> </li></ul> <p> </p> <div class=\"confbox admonition admonition-warning aui-message problem shadowed information-macro\"> <p>Titanium Angular is currently in an early preview stage. This means that some features are still under development or already available features may still be buggy. </p> </div> <div class=\"section section-2\" id=\"src-54592074_TitaniumAngular-LimitationsandWorkarounds-TypeScriptAPI\"> <h2 class=\"heading\"><span>TypeScript API</span></h2> <p>The TypeScript type definitions are generated from our API documentation. They are brand new and Titanium Angular is the first project to makes uses of those typings. We couldn&apos;t possibly test all available APIs for the first preview release so you may encounter some typings that are just wrong or they behave differently than you may know it from JavaScript. In those cases the easiest workaround is to explicitly cast the variable to the <tt>any</tt> type, so you can do whatever you want with it. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Casting Titanium types to any</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Casting Titanium types to any\"> <div class=\"line\"><code class=\"plain\">const view = Titanium.UI.createView();</code></div> <div class=\"line\"><code class=\"comments\">// cast only for a single method call or property access</code></div> <div class=\"line\"><code class=\"plain\">(&lt;any&gt;view).callAnythingOnTheView();</code></div> <div class=\"line\"><code class=\"comments\">// cast to a new variable of type any</code></div> <div class=\"line\"><code class=\"plain\">const castedView = &lt;any&gt;view;</code></div> </div> </div> <p>Oh, and don&apos;t forget to file a bug report under the <a class=\"external-link external-link\" href=\"https://jira.appcelerator.org/projects/FRAME/\" target=\"_blank\">FRAME</a> project in Jira so we can fix it! Community help is always welcomed! </p> </div> <div class=\"section section-2\" id=\"src-54592074_TitaniumAngular-LimitationsandWorkarounds-WorkingwithTitaniumelements\"> <h2 class=\"heading\"><span>Working with Titanium elements</span></h2> <p>The basic features of all elements under the UI namespace are supported as of now. However, some platform specific views are still missing. Please refer to the following list to see which elements are <strong>NOT</strong> yet supported in templates (you can still create them programmatically in your components): </p> <ul class=\"\"><li> <p>Android </p> <ul class=\"\"><li> <p>DrawerLayout </p> </li><li> <p>ProgressIndicator </p> </li><li> <p>SearchView </p> </li></ul></li><li> <p>iOS </p> <ul class=\"\"><li> <p>CoverFlowView </p> </li><li> <p>NavigationWindow </p> </li><li> <p>SplitWindow </p> </li></ul></li></ul> <div class=\"section section-3\" id=\"src-54592074_safe-id-VGl0YW5pdW1Bbmd1bGFyLUxpbWl0YXRpb25zYW5kV29ya2Fyb3VuZHMtQWNjZXNzaW5ndGhlVGl0YW5pdW12aWV3L3Byb3h5b2Z0ZW1wbGF0ZWVsZW1lbnRz\"> <h3 class=\"heading\"><span>Accessing the Titanium view/proxy of template elements</span></h3> <p>Sometimes you need to access the underlying Titanium view/proxy of template elements. To do so you can use the <a class=\"external-link external-link\" href=\"https://angular.io/api/core/ViewChild\" target=\"_blank\">ViewChild</a>/<a class=\"external-link external-link\" href=\"https://angular.io/api/core/ViewChildren\" target=\"_blank\">ViewChildren</a> decorators from Angular in combination with the <a class=\"external-link external-link\" href=\"https://angular.io/api/core/AfterViewInit\" target=\"_blank\">AfterViewInit</a> lifecycle hook. First assign a template reference variable to the element you want to access and then retrieve the Titanium object instance via the <tt>.nativeElement.titaniumView</tt> property. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">@Component({</code></div> <div class=\"line\"><code class=\"plain\"> template: `</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Label</code><code class=\"preprocessor\"> #myLabel&gt;&lt;/Label&gt; </code></div> <div class=\"line\"><code class=\"plain\"> `</code></div> <div class=\"line\"><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"plain\">class MyComponent implements AfterViewInit {</code></div> <div class=\"line\"><code class=\"plain\"> @ViewChild(</code><code class=\"string\">&apos;myLabel&apos;</code><code class=\"plain\">) labelRef: ElementRef;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> ngAfterViewInit() {</code></div> <div class=\"line\"><code class=\"plain\"> const myLabel = </code><code class=\"keyword\">this</code><code class=\"plain\">.labelRef.nativeElement.titaniumView as Titanium.UI.Label;</code></div> <div class=\"line\"><code class=\"plain\"> myLabel.center = {x: 50, y: 50};</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-54592074_TitaniumAngular-LimitationsandWorkarounds-Configuringtemplateelementsprogrammatically\"> <h3 class=\"heading\"><span>Configuring template elements programmatically</span></h3> <p>One thing you may be missing if you are familiar with Alloy are some convenient features to configure your views directly from the template. For example, in Alloy you can do the following to configure a text fields button: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">TextField</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;textfield&quot;</code><code class=\"plain\"> </code><code class=\"color1\">platform</code><code class=\"plain\">=</code><code class=\"string\">&quot;ios&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">LeftButton</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Button</code><code class=\"plain\"> </code><code class=\"color1\">onClick</code><code class=\"plain\">=</code><code class=\"string\">&quot;sayHi&quot;</code><code class=\"plain\"> </code><code class=\"color1\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;textButton&quot;</code><code class=\"plain\">&gt;left&lt;/</code><code class=\"keyword\">Button</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">LeftButton</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">RightButton</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Button</code><code class=\"plain\"> </code><code class=\"color1\">onClick</code><code class=\"plain\">=</code><code class=\"string\">&quot;doAlert&quot;</code><code class=\"plain\"> </code><code class=\"color1\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;textButton&quot;</code><code class=\"plain\">&gt;right&lt;/</code><code class=\"keyword\">Button</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">RightButton</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">TextField</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <p>Titanium Angular currently does not currently support this, but it is on our To-Do list. In the meantime you can utilize the <tt>AfterViewInit</tt> lifecycle hook of your component to further configure it&apos;s view. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">@Component({</code></div> <div class=\"line\"><code class=\"plain\"> template: `</code></div> <div class=\"line\"><code class=\"plain\"> &lt;Window&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;TextField</code><code class=\"preprocessor\"> #textfield platform=&quot;&apos;ios&apos;&quot;&gt;&lt;/TextField&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/Window&gt;</code></div> <div class=\"line\"><code class=\"plain\"> `</code></div> <div class=\"line\"><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"plain\">class ExampleComponent implements AfterViewInit {</code></div> <div class=\"line\"><code class=\"plain\"> @ViewChild(</code><code class=\"string\">&apos;textfield&apos;</code><code class=\"plain\">) textFieldRef: ElementRef;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> ngAfterViewInit() {</code></div> <div class=\"line\"><code class=\"plain\"> const textField = </code><code class=\"keyword\">this</code><code class=\"plain\">.textFieldRef.nativeElement.titaniumView;</code></div> <div class=\"line\"><code class=\"plain\"> textField.leftButton = Ti.UI.createButton({title: </code><code class=\"string\">&apos;left&apos;</code><code class=\"plain\">, height: 24, width: 24});</code></div> <div class=\"line\"><code class=\"plain\"> textField.leftButton.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, () =&gt; { });</code></div> <div class=\"line\"><code class=\"plain\"> textField.rightButton = Ti.UI.createButton({title: </code><code class=\"string\">&apos;right&apos;</code><code class=\"plain\">, height: 24, width: 24});</code></div> <div class=\"line\"><code class=\"plain\"> textField.rightButton.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, () =&gt; { });</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-54592074_TitaniumAngular-LimitationsandWorkarounds-TitaniumRouter\"> <h2 class=\"heading\"><span>Titanium Router</span></h2> <p>Currently you can only use the Angular&apos;s routing feature for normal window and tab groups. Platform specific navigation components like the NavigationWindow on iOS are not yet supported. The support to open modal windows is also not yet implemented. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=54592074\"><span>Edit</span></a> </div> </body> </html> ","title":"Titanium Angular - Limitations and Workarounds"});