Ext.data.JsonP['Windows_Hyperloop_Programming_Guide']({"guide":" <!doctype html> <html> <head> <title>Windows Hyperloop Programming Guide</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-49159131\" class=\"content\"> <h1>Windows Hyperloop Programming Guide</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Requirements\">Requirements</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Classes\">Classes</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Instantiation\">Instantiation</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Methodsandfields\">Methods and fields</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Methodresolution\">Method resolution</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-Casting\">Casting</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-AsyncReturnTypes\">Async Return Types</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-MixWinRTAPIswithTitaniumAPIs\">Mix WinRT APIs with Titanium APIs</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-GenericCollections\">Generic Collections</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Hyperloop_Programming_Guide-section-src-49159131_WindowsHyperloopProgrammingGuide-UsingThird-partylibraries\">Using Third-party libraries</a> </p> </li></ul> <p>This document provides information on Windows Hyperloop requirements, classes, instantiation, methods and fields, method resolution, casting, async return types, mix WinRT APIs with Titanium APIs, generic collections, and using 3rd party libraries. </p> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Requirements\"> <h2 class=\"heading\"><span>Requirements</span></h2> <p>You&#x2019;ll need to have the following minimum requirements to use Hyperloop for Windows: </p> <ul class=\"\"><li> <p>Titanium 6.1.0+ </p> </li></ul> <p>Configure the plugin in tiapp.xml: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;plugins&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;plugin&gt;hyperloop&lt;/plugin&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/plugins&gt;</code></div> </div> </div> <p>Configure the module in tiapp.xml: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;modules&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;module&gt;hyperloop&lt;/module&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/modules&gt;</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Classes\"> <h2 class=\"heading\"><span>Classes</span></h2> <p>Classes in Hyperloop map to the underlying classes defined in Windows Runtime. For example, if you have a class such as <tt>Windows.UI.Xaml.Controls.Canvas</tt> defined, you would reference it using a standard require such as: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Canvas = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Controls.Canvas&apos;</code><code class=\"plain\">);</code></div> </div> </div> <p> </p> <p>This will return the <tt class=\"\">Canvas</tt> class object. Meaning, it&#x2019;s not an instance of a <tt class=\"\">Canvas</tt>, but the <tt>Canvas</tt> class itself. </p> <p>Once you have a the class reference returned from <tt>require</tt>, you can call normal JavaScript property and functions against it. Remember, at this point calling functions or properties against the class object above will be accessing class level (static) methods (not instance level). </p> <p>For example, you could get the <tt class=\"\">GetLeft</tt> method of the <tt>Canvas</tt> using the example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> left = Canvas.GetLeft(canvas); </code></div> </div> </div> <p>This is because <tt>GetLeft</tt> is defined as a static method. </p> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Instantiation\"> <h2 class=\"heading\"><span>Instantiation</span></h2> <p>To instantiate a native Class and create an instance, you can simply use <tt>new:</tt> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> canvas = </code><code class=\"keyword\">new</code><code class=\"plain\"> Canvas();</code></div> </div> </div> <p>When constructing an instance using <tt>new</tt>, it will always call the default constructor. If you have a special constructor that takes arguments, you can use the following as you would in C# or C++/CX: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Uri = require(</code><code class=\"string\">&apos;System.Uri&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> uri = </code><code class=\"keyword\">new</code><code class=\"plain\"> Uri(</code><code class=\"string\">&apos;http://www.appcelerator.com/&apos;</code><code class=\"plain\">);</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Methodsandfields\"> <h2 class=\"heading\"><span>Methods and fields</span></h2> <p>Methods in Windows Runtime components are mapped to JavaScript functions. Fields in components are mapped to JavaScript property accessors. static methods or fields (such as constants) will be attached to the class type. For example: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> sealed </code><code class=\"keyword\">class</code><code class=\"plain\"> Example {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> field;</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> String staticString = </code><code class=\"string\">&quot;&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> method(</code><code class=\"keyword\">int</code><code class=\"plain\"> argument);</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> bool staticMethod();</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Would map to the following in JavaScript: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">example.field = 123;</code></div> <div class=\"line\"><code class=\"plain\">example.staticString;</code></div> <div class=\"line\"><code class=\"plain\">example.method(567);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> result = example.staticMethod();</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Methodresolution\"> <h2 class=\"heading\"><span>Method resolution</span></h2> <p>If a class has overloads for a method (multiple forms of the method with different signatures, but the same name), we will attempt to match the correct method to invoke on the Windows Runtime component side by matching the passed in arguments to the closest match. Typically, this involves matching the name, number of arguments and the ability to convert the passed in arguments (in-order) to the method&#x2019;s parameter types. We are slightly more liberal in accepting numeric primitives than typical method resolution due to the conversion of JS Numbers. </p> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-Casting\"> <h2 class=\"heading\"><span>Casting</span></h2> <p>Sometimes interfaces define generic return types such as <tt class=\"\">Platform::Object</tt> and you will need to cast them to a different type to then reference methods and properties of the class. You can pass along the object you want to wrap to the constructor of the type you want to wrap it in. For example, suppose the result of the function returned an <tt class=\"\">Object</tt> but you know the implementation is actually a <tt>Canvas</tt>. You could use the following: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> canvas = Canvas.cast(object);</code></div> </div> </div> <p><strong>Be careful with casting</strong>: If you cast an object which is actually something different, you will experience an error and likely a crash. </p> <p>Sometimes you need to cast number types explicitly to select specific method signature. For instance, let say we need to call <tt class=\"\">System.Math.Abs(double)</tt> and <tt class=\"\">System.Math.Abs(System.Int32)</tt>. In order to select method signature, you can use <tt class=\"\">cast</tt> explicitly like below. If type cast is omitted, <tt>double</tt> is used implicitly for number types. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> System_Math = require(</code><code class=\"string\">&apos;System.Math&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> System_Double = require(</code><code class=\"string\">&apos;System.Double&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> System_Int32 = require(</code><code class=\"string\">&apos;System.Int32&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Call System.Math.Abs(double); (implicit)</code></div> <div class=\"line\"><code class=\"plain\">System_Math.Abs(-1.23); </code><code class=\"comments\">// 1.23</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Call System.Math.Abs(double); (explicit)</code></div> <div class=\"line\"><code class=\"plain\">System_Math.Abs(System_Double.cast(-1.23)); </code><code class=\"comments\">// 1.23</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Call System.Math.Abs(Int32);</code></div> <div class=\"line\"><code class=\"plain\">System_Math.Abs(System_Int32.cast(-1.23)); </code><code class=\"comments\">// 1</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-AsyncReturnTypes\"> <h2 class=\"heading\"><span>Async Return Types</span></h2> <p>Some of the WinRT APIs return asynchronous return types, such as <tt class=\"\">Windows.Foundation.IAsyncAction</tt>, <tt class=\"\">Windows.Foundation.IAsyncActionWithProgress</tt>, <tt class=\"\">Windows.Foundation.IAsyncOperation</tt>, and <tt>Windows.Foundation.IAsyncOperationWithProgress</tt>. </p> <p>For methods that return an asynchronous return type, the operation will be wrapped in a <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\">JavaScript Promise object</a>. In a promise, when a deferred or asynchronous job completes, it passes its value on to a fulfilled or rejected function, where it can be evaluated by the functions and chained to other promises. </p> <p>After invoking the method, chain either the <tt class=\"\">then(fulfilledFunction, rejectedFunction)</tt> or <tt>catch(rejectedFunction)</tt> method to the invoked WinRT method to handle the response after the operation completes. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var HttpClient = require(</code><code class=\"string\">&apos;Windows.Web.Http.HttpClient&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> Uri = require(</code><code class=\"string\">&apos;System.Uri&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> httpclient = </code><code class=\"keyword\">new</code><code class=\"plain\"> HttpClient(),</code></div> <div class=\"line\"><code class=\"plain\"> PathIO = require(</code><code class=\"string\">&apos;Windows.Storage.PathIO&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> ApplicationData = require(</code><code class=\"string\">&apos;Windows.Storage.ApplicationData&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> CreationCollisionOption = require(</code><code class=\"string\">&apos;Windows.Storage.CreationCollisionOption&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"comments\">// IAsyncOperation&lt;StorageFile&gt;</code></div> <div class=\"line\"><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\">ApplicationData.Current.LocalFolder.CreateFileAsync(</code><code class=\"string\">&apos;content.txt&apos;</code><code class=\"plain\">, CreationCollisionOption.ReplaceExisting)</code></div> <div class=\"line\"><code class=\"plain\">.then(function () {</code></div> <div class=\"line\"><code class=\"plain\"> var HttpClient = require(</code><code class=\"string\">&apos;Windows.Web.Http.HttpClient&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> Uri = require(</code><code class=\"string\">&apos;System.Uri&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> httpclient = </code><code class=\"keyword\">new</code><code class=\"plain\"> HttpClient();</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// IAsyncOperationWithProgress&lt;HttpResponseMessage, HttpProgress&gt;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> httpclient.GetAsync(</code><code class=\"keyword\">new</code><code class=\"plain\"> Uri(</code><code class=\"string\">&apos;http://www.appcelerator.com/&apos;</code><code class=\"plain\">));</code></div> <div class=\"line\"><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"plain\">.then(function (response) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// IAsyncOperationWithProgress&lt;string, ulong&gt;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> response.Content.ReadAsStringAsync();</code></div> <div class=\"line\"><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"plain\">.then(function (content) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// IAsyncAction</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> PathIO.WriteTextAsync(</code><code class=\"string\">&apos;ms-appdata:///local/content.txt&apos;</code><code class=\"plain\">, content);</code></div> <div class=\"line\"><code class=\"plain\">})</code></div> <div class=\"line\"><code class=\"plain\">.then(function () {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// IAsyncOperation&lt;string&gt;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> PathIO.ReadTextAsync(</code><code class=\"string\">&apos;ms-appdata:///local/content.txt&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}).</code></div> <div class=\"line\"><code class=\"plain\">then(function (content) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;ALL DONE! File Content=&quot;&apos;</code><code class=\"plain\"> + content + </code><code class=\"string\">&apos;&quot;&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}, function (err) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(err);</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-MixWinRTAPIswithTitaniumAPIs\"> <h2 class=\"heading\"><span>Mix WinRT APIs with Titanium APIs</span></h2> <p>You can mix and match WinRT and Titanium APIs together. You can call Titanium APIs from a native event callback, or call Native APIs inside a callback registered with Titanium APIs. </p> <p>You can also mix and match Titanium.UI.View and its subclasses with any WinRT API expecting a <tt>Windows.UI.Xaml.UIElement</tt>. For example, you can create a Titanium Window or View object, then add a native UI element, such as a <a class=\"external-link external-link\" href=\"https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.tooltip.aspx\" target=\"_blank\">Tooltip</a>, which the Titanium SDK has equivalent API for, to it. Or you can generate a complex layout using the WinRT APIs, then add Titanium Labels, Buttons or Views to it. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow(),</code></div> <div class=\"line\"><code class=\"plain\"> Button = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Controls.Button&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> button = </code><code class=\"keyword\">new</code><code class=\"plain\"> Button();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">button.Content = </code><code class=\"string\">&quot;PUSH&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">&apos;Tapped&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\"> (e) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;Tapped!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.add(button);</code></div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> <p>We have not yet made the full APIs as seamless as possible. One example is the Titanium SDK can convert between JavaScript and C++ arrays and collections, but explicit native types that are collection subclasses are treated like normal native types and not like a basic array or vector. So if you have a native collection type, such as <tt>UIElementCollection</tt>, you cannot simply treat it as if it is a normal JavaScript array and invoke JavaScript array methods on it. You will need to use the WinRT APIs to manipulate it. </p> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-GenericCollections\"> <h2 class=\"heading\"><span>Generic Collections</span></h2> <p>Generic collections allow you to define strongly typed collections to provide strong type safety and performance. You can use number of generic collections in <tt class=\"\">System.Collections.Generic</tt> namespace. For instance you can use <tt class=\"\">require(System.Collections.Generic.List&lt;T&gt;)</tt> to define array list that is specialized to <tt>T</tt> type. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> List = require(</code><code class=\"string\">&apos;System.Collections.Generic.List&lt;System.Int32&gt;&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> Int32 = require(</code><code class=\"string\">&apos;System.Int32&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> vec = </code><code class=\"keyword\">new</code><code class=\"plain\"> List();</code></div> <div class=\"line\"><code class=\"plain\">vec.Add(Int32.cast(0));</code></div> <div class=\"line\"><code class=\"plain\">vec.Add(Int32.cast(1));</code></div> <div class=\"line\"><code class=\"plain\">vec.Add(Int32.cast(2));</code></div> </div> </div> <p>Some generic collections enable you to access its element by using JavaScript array-like syntax. For instance, <tt class=\"\">System.Collections.Generic.List&lt;T&gt; </tt>provides the ability to access to specific elements using<tt> list[index]</tt> like below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">vec[1]; </code><code class=\"comments\">// 1</code></div> <div class=\"line\"><code class=\"plain\">vec[1] = 100; </code><code class=\"comments\">// update to 100</code></div> <div class=\"line\"><code class=\"plain\">vec[1]; </code><code class=\"comments\">// 100</code></div> </div> </div> <p> </p> </div> <div class=\"section section-2\" id=\"src-49159131_WindowsHyperloopProgrammingGuide-UsingThird-partylibraries\"> <h2 class=\"heading\"><span>Using Third-party libraries</span></h2> <p>You can use Third-party libraries in Hyperloop such as winmd, lib and DLL. </p> <p>Let say you have Windows Runtime Component named <tt>WindowsRuntimeComponent1</tt>. The C# code looks like below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">WindowsRuntimeComponent1.cs</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"WindowsRuntimeComponent1.cs\"> <div class=\"line\"><code class=\"plain\">using System;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">namespace WindowsRuntimeComponent1</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> public sealed class Test</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> public int SampleNumber { get; set; }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> public static string SayHello(string str)</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> String.Format(</code><code class=\"string\">&quot;Hello, {0}!&quot;</code><code class=\"plain\">, str);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> public string sayNumber()</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> String.Format(</code><code class=\"string\">&quot;SampleNumber is {0}.&quot;</code><code class=\"plain\">, SampleNumber);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>When you compile your Windows Runtime component in Visual Studio, you should get <tt class=\"\">.winmd</tt> file. Then place the <tt class=\"\">winmd</tt> files into the <tt class=\"\">lib</tt> <tt class=\"\">/windows/(phone|store|win10)/(x86|ARM)/</tt> folder of your app. Hyperloop will pick up the <tt class=\"\">winmd</tt> files and will generate necessary bindings and include the <tt class=\"\">winmd</tt> in your app. Then place <tt class=\"\">appc.js</tt> directly under your Titanium project folder. Make sure it contains names of your Windows Runtime component under <tt>hyperloop.windows.thirdparty</tt> key. It should look like below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">appc.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"appc.js\"> <div class=\"line\"><code class=\"comments\">/**</code></div> <div class=\"line\"><code class=\"comments\"> * Hyperloop configuration</code></div> <div class=\"line\"><code class=\"comments\"> */</code></div> <div class=\"line\"><code class=\"plain\">module.exports = {</code></div> <div class=\"line\"><code class=\"plain\"> type: </code><code class=\"string\">&apos;app&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> group: </code><code class=\"string\">&apos;titanium&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> dependencies: {},</code></div> <div class=\"line\"><code class=\"plain\"> hyperloop: {</code></div> <div class=\"line\"><code class=\"plain\"> windows:</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">/**</code></div> <div class=\"line\"><code class=\"comments\"> * Optionally, you can bring in third-party or first-party Windows Runtime components.</code></div> <div class=\"line\"><code class=\"comments\"> * The &apos;key&apos; is the root namespace of the component that will be used in the require.</code></div> <div class=\"line\"><code class=\"comments\"> * There&apos;s no values for now but we reserve them for future release.</code></div> <div class=\"line\"><code class=\"comments\"> *</code></div> <div class=\"line\"><code class=\"comments\"> * Place the library files into the lib/windows/(phone|store|win10)/(x86|ARM)/ folder under your app project.</code></div> <div class=\"line\"><code class=\"comments\"> * Hyperloop will pick up the winmd files and will generate necessary bindings and include the winmd in your app. </code></div> <div class=\"line\"><code class=\"comments\"> */</code></div> <div class=\"line\"><code class=\"plain\"> thirdparty: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&apos;WindowsRuntimeComponent1&apos;</code><code class=\"plain\">: {}</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <p>You should be able to use your Windows Runtime component in your Titanium app like below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Test = require(</code><code class=\"string\">&apos;WindowsRuntimeComponent1.Test&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> test = </code><code class=\"keyword\">new</code><code class=\"plain\"> Test();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">alert(test.SayHello(</code><code class=\"string\">&apos;World!&apos;</code><code class=\"plain\">));</code></div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49159131\"><span>Edit</span></a> </div> </body> </html> ","title":"Windows Hyperloop Programming Guide"});