Ext.data.JsonP['Windows_Runtime_Direct_API_Access']({"guide":" <!doctype html> <html> <head> <title>Windows Runtime Direct API Access</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-43315893\" class=\"content\"> <h1>Windows Runtime Direct API Access</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Introduction\">Introduction</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Usage\">Usage</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Requireaclass\">Require a class</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Enumerations\">Enumerations</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Eventhandling\">Event handling</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-Asyncreturntypes\">Async return types</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Windows_Runtime_Direct_API_Access-section-src-43315893_WindowsRuntimeDirectAPIAccess-MixWinRTAPIswithTitaniumAPIs\">Mix WinRT APIs with Titanium APIs</a> </p> </li></ul></li></ul> <p><strong><br/></strong> </p> <p><strong class=\"\">Windows Runtime Direct API Access will be removed as of Titanium SDK 6.1.0, use <a class=\"document-link\" href=\"#!/guide/Hyperloop\">Hyperloop</a> to access native APIs.</strong> </p> <div class=\"section section-2\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>For the Windows Platform, the Titanium SDK allows you to directly use the Windows Runtime (WinRT) C++ APIs in your project&apos;s JavaScript files. The Titanium SDK will scan your JavaScript files to see if it uses any of the WinRT APIs and will create C++ wrappers and add any dependencies. The Windows Runtime C#, VB and JavaScript APIs are not supported as well as the Windows 10 Mobile APIs. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>The first time you build a project that includes WinRT APIs, the first build will be slow (will take several minutes). Subsequent builds should be faster even if you add more WinRT classes. </p> </div> </div> <div class=\"section section-2\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Usage\"> <h2 class=\"heading\"><span>Usage</span></h2> <p>To use a Windows API, you must first require in the class, then you can invoke its APIs. For most APIs, you can directly use the API name without any modification. </p> <p>Before using an API make sure it can be supported first. Open the <a class=\"external-link external-link\" href=\"https://msdn.microsoft.com/en-us/library/windows/apps/br211369.aspx\" target=\"_blank\">API reference</a> for the API you want to use. </p> <ol class=\"\"><li class=\"\"> <p>Check if it is supported in C++. In the <i>Syntax</i> section at the top of the API reference, the tabbed group should contain a C++ tab. </p> </li><li class=\"\"> <p>Check that the minimum API version is at least Windows 8 or 8.1. At the bottom of the API reference, check for a <i>Requirements (Windows 8.x and Windows Phone)</i> section. </p> </li><li> <p>Check if the API supports only Windows Phone or only Windows. Some APIs may only support one platform. Check the platform in the application before invoking the API. </p> </li></ol> <div class=\"section section-3\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Requireaclass\"> <h3 class=\"heading\"><span>Require a class</span></h3> <p>To include a WinRT C++ class, pass the fully qualified class name to the <tt class=\"\">require()</tt> method. Do not pass variables or concatenated strings that evaluate to the class name to the <tt class=\"\">require()</tt> call. The Titanium SDK looks specifically for any string literals that start with <tt>Windows</tt>. in order to include the class when building the application. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// WILL WORK</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Window&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"comments\">// WILL NOT WORK</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> window_class = </code><code class=\"string\">&apos;Windows.UI.Xaml.Window&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> win = require(win_class);</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> windows_ui_xaml_ns = </code><code class=\"string\">&apos;Windows.UI.Xaml&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> win = require(windows_ui_xaml_ns + </code><code class=\"string\">&apos;Window&apos;</code><code class=\"plain\">);</code></div> </div> </div> <p>After requiring in the class, you can invoke API calls: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Window = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Window&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> TextBlock = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Controls.TextBlock&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> window = Window.Current,</code></div> <div class=\"line\"><code class=\"plain\"> text = </code><code class=\"keyword\">new</code><code class=\"plain\"> TextBlock();</code></div> <div class=\"line\"><code class=\"plain\"> text.Text = </code><code class=\"string\">&quot;Click me, please!&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// For enum values, you do not need to require in the class</code></div> <div class=\"line\"><code class=\"comments\">// See the next section</code></div> <div class=\"line\"><code class=\"plain\">text.TextAlignment = Windows.UI.Xaml.TextAlignment.Center;</code></div> <div class=\"line\"><code class=\"plain\">text.VerticalAlignment = Windows.UI.Xaml.VerticalAlignment.Center;</code></div> <div class=\"line\"><code class=\"plain\">text.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Center;</code></div> <div class=\"line\"><code class=\"plain\">text.FontSize = 60;</code></div> <div class=\"line\"><code class=\"plain\">window.Content = text;</code></div> <div class=\"line\"><code class=\"plain\">window.Activate();</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Enumerations\"> <h3 class=\"heading\"><span>Enumerations</span></h3> <p>Enumerations in WinRT are exposed automatically for you when you require any API that may use that enumeration. For example, the <tt class=\"\">Windows.UI.Xaml.TextAlignment</tt>, <tt class=\"\">Windows.UI.Xaml.VerticalAlignment</tt> and <tt class=\"\">Windows.UI.Xaml.HorizontalAlignment</tt> enum values will automatically be included when you require <tt>Windows.UI.Xaml.Controls.TextBlock</tt>. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> TextBlock = require(</code><code class=\"string\">&apos;Windows.UI.Xaml.Controls.TextBlock&apos;</code><code class=\"plain\">),</code></div> <div class=\"line\"><code class=\"plain\"> text = </code><code class=\"keyword\">new</code><code class=\"plain\"> TextBlock();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">text.TextAlignment = Windows.UI.Xaml.TextAlignment.Center;</code></div> <div class=\"line\"><code class=\"plain\">text.VerticalAlignment = Windows.UI.Xaml.VerticalAlignment.Center;</code></div> <div class=\"line\"><code class=\"plain\">text.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Center;</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Eventhandling\"> <h3 class=\"heading\"><span>Event handling</span></h3> <p>Event handling follows the JavaScript syntax by adding and removing event handlers with the <tt class=\"\">addEventListener()</tt> and <tt>removeEventListener()</tt> methods rather than the C++ syntax. </p> <p>In C++, you would create an event handler and assign it to an event property of a Windows object or class. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">DO NOT USE C++ Syntax</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"DO NOT USE C++ Syntax\"> <div class=\"line\"><code class=\"plain\">click_event_ = component-&gt;Tapped += ref </code><code class=\"keyword\">new</code><code class=\"plain\"> TappedEventHandler([</code><code class=\"keyword\">this</code><code class=\"plain\">, ctx](Platform::Object^ sender, TappedRoutedEventArgs^ e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <p>In JavaScript, invoke the <tt>addEventListener()</tt> method on the Windows object or class, and pass the event name and event handler to the method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Use JavaScript Syntax</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Use JavaScript Syntax\"> <div class=\"line\"><code class=\"plain\">component.addEventListener(</code><code class=\"string\">&apos;Tapped&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-Asyncreturntypes\"> <h3 class=\"heading\"><span>Async return types</span></h3> <p>Some of the WinRT APIs return asynchronous return types, such as <tt class=\"\">Windows.Foundation.IAsyncAction</tt>, <tt class=\"\">Windows.Foundation.IAsyncActionWithProgress</tt>, <tt class=\"\">Windows.Foundation.IAsyncOperation</tt>, and <tt>Windows.Foundation.IAsyncOperationWithProgress</tt>. </p> <p>For methods that return an asynchronous return type, the operation will be wrapped in a <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\">JavaScript Promise object</a>. In a promise, when a deferred or asynchronous job completes, it passes its value on to a fulfilled or rejected function, where it can be evaluated by the functions and chained to other promises. </p> <p>After invoking the method, chain either the <tt class=\"\">then(fulfilledFunction, rejectedFunction)</tt> or <tt>catch(rejectedFunction)</tt> method to the invoked WinRT method to handle the response after the operation completes. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> PathIO = require(</code><code class=\"string\">&apos;Windows.Storage.PathIO&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">PathIO.ReadTextAsync(</code><code class=\"string\">&apos;ms-appdata:///somefile.txt&apos;</code><code class=\"plain\">).then(</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">function</code><code class=\"plain\"> (content) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(content);</code></div> <div class=\"line\"><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">function</code><code class=\"plain\"> (err) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;It failed!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-43315893_WindowsRuntimeDirectAPIAccess-MixWinRTAPIswithTitaniumAPIs\"> <h3 class=\"heading\"><span>Mix WinRT APIs with Titanium APIs</span></h3> <p>You can mix and match WinRT and Titanium APIs together. You can call Titanium APIs from a native event callback, or call Native APIs inside a callback registered with Titanium APIs. </p> <p>You can also mix and match Titanium.UI.View and its subclasses with any WinRT API expecting a <tt>Windows.UI.Xaml.UIElement</tt>. For example, you can create a Titanium Window or View object, then add a native UI element, such as a <a class=\"external-link external-link\" href=\"https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.tooltip.aspx\" target=\"_blank\">Tooltip</a>, which the Titanium SDK has equivalent API for, to it. Or you can generate a complex layout using the WinRT APIs, then add Titanium Labels, Buttons or Views to it. </p> <p>We have not yet made the full APIs as seamless as possible. One example is the Titanium SDK can convert between JavaScript and C++ arrays and collections, but explicit native types that are collection subclasses are treated like normal native types and not like a basic array or vector. So if you have a native collection type, such as <tt>UIElementCollection</tt>, you cannot simply treat it as if it is a normal JavaScript array and invoke JavaScript array methods on it. You will need to use the WinRT APIs to manipulate it. </p> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43315893\"><span>Edit</span></a> </div> </body> </html> ","title":"Windows Runtime Direct API Access"});