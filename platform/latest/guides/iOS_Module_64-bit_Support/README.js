Ext.data.JsonP['iOS_Module_64-bit_Support']({"guide":" <!doctype html> <html> <head> <title>iOS Module 64-bit Support</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-43291229\" class=\"content\"> <h1>iOS Module 64-bit Support</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_iOSModule64-bitSupport-Overview\">Overview</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_iOSModule64-bitSupport-ModuleBuilds\">Module Builds</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_iOSModule64-bitSupport-Troubleshooting\">Troubleshooting</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Db3VsZG4ndGZpbmRtb2R1bGU6WGZvcmFyY2hpdGVjdHVyZTpY\">Couldn&apos;t find module: X for architecture: X</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_iOSModule64-bitSupport-Undefinedsymbolsforarchitecture\">Undefined symbols for architecture</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/iOS_Module_64-bit_Support-section-src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Nb2R1bGVidWlsZGluZ2ZvcmFybXY3LGkzODYsYW5kYXJtNjRidXRub3R4ODZfNjQ\">Module building for armv7, i386, and arm64 but not x86_64</a> </p> </li></ul></li></ul> <div class=\"section section-2\" id=\"src-43291229_iOSModule64-bitSupport-Overview\"> <h2 class=\"heading\"><span>Overview</span></h2> <p>Starting February 1, 2015, Apple will require that all <strong class=\"\">new</strong> App Store submissions be <a class=\"external-link external-link\" href=\"https://developer.apple.com/news/?id=10202014a\" target=\"_blank\">compiled using the iOS 8 SDK, and support 64-bit architectures</a>, and starting June 1, 2015, all <strong>updated</strong> applications will also need to follow the <a class=\"external-link external-link\" href=\"https://developer.apple.com/news/?id=12172014b\" target=\"_blank\">same requirements</a>. </p> <p>Any module included with your project must support 64-bit architectures. </p> </div> <div class=\"section section-2\" id=\"src-43291229_iOSModule64-bitSupport-ModuleBuilds\"> <h2 class=\"heading\"><span>Module Builds</span></h2> <p>To update an existing iOS module and make it 64-bit compatible follow these steps: </p> <ol class=\"\"><li> <p>Open the module&apos;s Xcode project. </p> </li><li> <p>Accept recommended updates (via the ! symbol in the window title) </p> </li><li class=\"p1\"> <p>Update each of the TARGET (not project) architectures to standard aka <tt class=\"\">$(ARCHS_STANDARD)</tt>. This can be done by selecting <i class=\"\">Architectures</i> and hitting the <i>delete</i> key on the keyboard. </p> </li><li class=\"\"> <p>Set the <strong>iOS Deployment Target</strong> to iOS 6.0 or newer. </p> </li></ol> <p>That&apos;s it. Build the module normally with this Release and it should now be 64-bit compatible. To verify, run the following command: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">cd /PATH/TO/MODULE/</code></div> <div class=\"line\"><code class=\"plain\">xcrun lipo -info build/lib.&lt;MODULE_NAME&gt;.a</code></div> </div> </div> <p>And the output should be: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">Architectures in the fat file: build/lib.your_module_here.a are: armv7 i386 x86_64 arm64</code></div> </div> </div> <p>Add the <tt class=\"\">architectures</tt> field to the <tt class=\"\">manifest</tt> file with the architectures to support. To find out which architectures the SDK supports, create a module using this Release and open its manifest file(s). Copy the <tt class=\"\">architectures</tt> field from the <tt class=\"\">manifest</tt> file to the <tt class=\"\">manifest</tt> file of the module you want to build. Android and iOS support difference architectures. Once the <tt>architectures</tt> field is added, build the module. </p> <p><strong>Note:</strong> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>Starting with Release 4.0.0, the build will fail if the <tt>architectures</tt> field is missing or the architectures do not match the architectures the Titanium SDK supports. </p> <p>For example, add the following lines to the respected manifest files: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">ios/manifest:</code></div> <div class=\"line\"><code class=\"plain\">architectures: armv7 arm64 i386 x86_64</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-43291229_iOSModule64-bitSupport-Troubleshooting\"> <h2 class=\"heading\"><span>Troubleshooting</span></h2> <div class=\"section section-3 p1\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Db3VsZG4ndGZpbmRtb2R1bGU6WGZvcmFyY2hpdGVjdHVyZTpY\"> <h3 class=\"heading p1\"><span>Couldn&apos;t find module: X for architecture: X</span></h3> <p>If you see the following error: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Error Log</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Error Log\"> <div class=\"line\"><code class=\"plain\">[ERROR] Script Error Couldn&apos;t </code><code class=\"functions\">find</code><code class=\"plain\"> module: ti.barcode </code><code class=\"keyword\">for</code><code class=\"plain\"> architecture: arm64</code></div> </div> </div> <p>This could happen if: </p> <ul class=\"\"><li class=\"\"> <p>The module being required is not included in the <i>tiapp.xml</i>. </p> </li><li> <p>The module being required does not have the architecture the app is running on (arm64 in this case). </p> </li></ul> <div class=\"section section-4\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Tb2x1dGlvbihzKTo\"> <h4 class=\"heading\"><span>Solution(s):</span></h4> <ul class=\"\"><li> <p>The module needs to be rebuilt with 64-bit support. See the instructions above. </p> </li></ul> </div> </div> <div class=\"section section-3\" id=\"src-43291229_iOSModule64-bitSupport-Undefinedsymbolsforarchitecture\"> <h3 class=\"heading\"><span>Undefined symbols for architecture</span></h3> <p>See some log examples below. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Error Log</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Error Log\"> <div class=\"line\"><code class=\"plain\">[TRACE] Undefined symbols </code><code class=\"keyword\">for</code><code class=\"plain\"> architecture x86_64:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTBarPlot&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsBarPlotProxy.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsChart.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_CPTDecimalFromDouble&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsChart refreshPlotSpaces] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsChart.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTPieChart&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsPiePlotProxy.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTScatterPlot&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsLinePlotProxy.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTPlotRange&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTPlotSymbol&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTFill&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTMutableTextStyle&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTColor&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTGradient&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_kCPTPlainBlackTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsModule THEME_BLACK] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsModule.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_CPTDecimalFromInteger&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] +[TiChartsParsers parseAxis:properties:usingPlotSpace:def:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTMutableLineStyle&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTGraphHostingView&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsChart.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTXYAxis&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_CPTDecimalFromFloat&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] +[TiChartsParsers parsePlotRange:def:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] +[TiChartsParsers parseAxis:properties:usingPlotSpace:def:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] +[TiChartsParsers decimalFromFloat:def:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_kCPTStocksTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsModule THEME_STOCKS] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsModule.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_kCPTSlateTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsModule THEME_SLATE] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsModule.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTXYGraph&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsChart.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_kCPTPlainWhiteTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsModule THEME_WHITE] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsModule.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;OBJC_CLASS$_CPTConstraints&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] objc-class-ref </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsParsers.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;_kCPTDarkGradientTheme&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsModule THEME_DARK_GRADIENT] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsModule.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[TiChartsChart configureTheme:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.charts.a(TiChartsChart.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ld: symbol(s) not found </code><code class=\"keyword\">for</code><code class=\"plain\"> architecture x86_64</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] clang: error: linker </code><code class=\"functions\">command</code><code class=\"plain\"> failed with </code><code class=\"functions\">exit</code><code class=\"plain\"> code 1 (use -</code><code class=\"functions\">v</code><code class=\"plain\"> to see invocation)</code></div> </div> </div> <p>This may happen if your module depends on a 3rd party library that does not include the x86_64 bit architecture. </p> <div class=\"section section-4\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Tb2x1dGlvbihzKTouMQ\"> <h4 class=\"heading\"><span>Solution(s):</span></h4> <ul class=\"\"><li> <p>Rebuild the module with a new build of the library that includes the missing architecture (x86_64 in this case). </p> </li></ul> <p> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Error Log</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Error Log\"> <div class=\"line\"><code class=\"plain\">[TRACE] Undefined symbols </code><code class=\"keyword\">for</code><code class=\"plain\"> architecture i386:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear(std::_Ios_Iostate)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeBase256Segment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream(std::_Ios_Openmode)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decode(zxing::ArrayRef&lt;unsigned char&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeNumericSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Mode::forBits(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Mode.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str() const&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::_Identity&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;, std::</code><code class=\"functions\">less</code><code class=\"plain\">&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt; &gt;::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt;, std::tr1::weak_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareAssociatedBarcodeResults, std::allocator&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::tr1::weak_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::c_str() const&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string()&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream()&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decode(zxing::ArrayRef&lt;unsigned char&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeNumericSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Mode::forBits(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Mode.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::ostream::operator&lt;&lt;(int)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Detector::computeDimension(zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, zxing::Ref&lt;zxing::ResultPoint&gt;, float) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Detector-204A1016DECC248B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeAsciiSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeC40Segment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeTextSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeEdifactSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] NLRecognizerBase::FindMinMaxFoundLinesForCode(std::tr1::shared_ptr&lt;NLBarcodeResult&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::erase(std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ITFBarcodeRecognizer::Stage2Recognize() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(ITFBarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] Code39BarcodeRecognizer::AddPartialBarcode(NSMutableString*, bool, bool) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Code39BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] Code39BarcodeRecognizer::Stage2Recognize() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Code39BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] PDF417BarcodeRecognizer::Stage2Recognize() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(PDF417BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] CodabarBarcodeRecognizer::Stage2Recognize() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redl</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] aser.a(CodabarBarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::ios_base::Init::~Init()&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePickerController.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Widget_QRCodeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(ZXingDecoder.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Widget_DataMatrixReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(CameraControl.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-DD22F2D71AAA0F2E.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::_Rb_tree_decrement(std::_Rb_tree_node_base*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert_unique(std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NewLaserEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert_unique(std::tr1::shared_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::_Identity&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;, std::</code><code class=\"functions\">less</code><code class=\"plain\">&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt; &gt;::_M_insert_unique(std::pair&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt;, std::tr1::weak_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareAssociatedBarcodeResults, std::allocator&lt;std::tr1::weak_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert_unique(std::tr1::weak_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*, int)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeAsciiSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeC40Segment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeTextSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeAnsiX12Segment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decodeBase256Segment(zxing::Ref&lt;zxing::BitSource&gt;, std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::substr(unsigned long, unsigned long) const&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::_Rb_tree_increment(std::_Rb_tree_node_base const*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[BarcodePhotoEngine findBarcodesInPixelLine:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[BarcodePhotoEngine nlFindBarcodesInPixmap:withStepCount:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] void std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert_unique&lt;std::_Rb_tree_const_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;(std::_Rb_tree_const_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NewLaserEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] NLRecognizerBase::FindMinMaxScanLines() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] NLRecognizerBase::Stage2Recognize() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] NLRecognizerBase::PerformBarcodeAssociations() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] NLRecognizerBase::FindMinMaxFoundLinesForCode(std::tr1::shared_ptr&lt;NLBarcodeResult&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::_Rb_tree_increment(std::_Rb_tree_node_base*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::_M_insert_unique(std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NewLaserEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::_Rb_tree&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::tr1::shared_ptr&lt;NLBarcodeResult&gt;, std::_Identity&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, NLCompareBarcodeResults, std::allocator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt; &gt;::erase(std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;, std::_Rb_tree_iterator&lt;std::tr1::shared_ptr&lt;NLBarcodeResult&gt; &gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NLRecognizerBase.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::assign(std::string const&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::__throw_out_of_range(char const*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;NLRecognizerBase*, std::allocator&lt;NLRecognizerBase*&gt; &gt;::at(unsigned long) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NewLaserEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;float, std::allocator&lt;float&gt; &gt;::at(unsigned long) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Code39BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;int, std::allocator&lt;int&gt; &gt;::at(unsigned long) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Code93BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_check(unsigned long) const </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BitQueue.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::__throw_length_error(char const*)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;NLRecognizerBase*, std::allocator&lt;NLRecognizerBase*&gt; &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;NLRecognizerBase**, std::vector&lt;NLRecognizerBase*, std::allocator&lt;NLRecognizerBase*&gt; &gt; &gt;, NLRecognizerBase* const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(NewLaserEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;zxing::Ref&lt;zxing::Reader&gt;, std::allocator&lt;zxing::Ref&lt;zxing::Reader&gt; &gt; &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;zxing::Ref&lt;zxing::Reader&gt;*, std::vector&lt;zxing::Ref&lt;zxing::Reader&gt;, std::allocator&lt;zxing::Ref&lt;zxing::Reader&gt; &gt; &gt; &gt;, zxing::Ref&lt;zxing::Reader&gt; const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(MultiFormatReader-BA2714D9B0BBE187.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert(__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, unsigned long, float const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RunLengths.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_fill_insert(__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] long, unsigned long const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BlurryEANBarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;float*, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, float const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BlurryEANBarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BlurryEANBarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_aux(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Code93BarcodeRecognizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::assign(char const*, unsigned long)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string()&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::String::~String() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Str-C8AC91D7FBB4649E.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::String::~String() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Str-C8AC91D7FBB4649E.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::Exception::~Exception() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Exception-8C97FE099093317C.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::Exception::~Exception() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Exception-8C97FE099093317C.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::Exception::~Exception() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Exception-8C97FE099093317C.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decode(zxing::ArrayRef&lt;unsigned char&gt;, zxing::qrcode::Version*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, std::allocator&lt;char&gt; const&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::Exception::Exception(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Exception-8C97FE099093317C.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[BarcodePhotoEngine occipitalFindBarcodesInPixmap:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::Decoder::decode(zxing::Ref&lt;zxing::BitMatrix&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-94FE04638513C594.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Decoder::decode(zxing::Ref&lt;zxing::BitMatrix&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-98341D73C74B247B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::find(char const*, unsigned long, unsigned long) const&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::MultiFormatReader::decodeInternal(zxing::Ref&lt;zxing::BinaryBitmap&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(MultiFormatReader-BA2714D9B0BBE187.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GlobalHistogramBinarizer::getBlackRow(int, zxing::Ref&lt;zxing::BitArray&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GlobalHistogramBinarizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GlobalHistogramBinarizer::getBlackMatrix() </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GlobalHistogramBinarizer.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::String::String(std::string const&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Str-C8AC91D7FBB4649E.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::Decoder::correctErrors(zxing::ArrayRef&lt;unsigned char&gt;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-94FE04638513C594.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Decoder::correctErrors(zxing::ArrayRef&lt;unsigned char&gt;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-98341D73C74B247B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::ios_base::Init::Init()&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePickerController.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Widget_QRCodeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(ZXingDecoder.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Widget_DataMatrixReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(CameraControl.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-DD22F2D71AAA0F2E.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] __GLOBAL__I_a </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::_Rep::_S_empty_rep_storage&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] -[BarcodePhotoEngine occipitalFindBarcodesInPixmap:] </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(BarcodePhotoEngine.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RealtimeReader::ReadBarcode(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(RealtimeReader.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::Decoder::decode(zxing::Ref&lt;zxing::BitMatrix&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-94FE04638513C594.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Decoder::decode(zxing::Ref&lt;zxing::BitMatrix&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Decoder-98341D73C74B247B.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ...</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str() const&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::datamatrix::DecodedBitStreamParser::decode(zxing::ArrayRef&lt;unsigned char&gt;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A3FB460F2223A592.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::GridSampler::checkAndNudgePoints(zxing::Ref&lt;zxing::BitMatrix&gt;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(GridSampler.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeByteSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::decodeNumericSegment(zxing::Ref&lt;zxing::BitSource&gt;, std::string&amp;, int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::Mode::forBits(int) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(Mode.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::append(std::string const&amp;)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] </code><code class=\"string\">&quot;std::string::append(char const*, unsigned long)&quot;</code><code class=\"plain\">, referenced from:</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] RLVerifySignature(char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(StatusManager.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] zxing::qrcode::DecodedBitStreamParser::append(std::string&amp;, unsigned char const*, unsigned long, char const*) </code><code class=\"keyword\">in</code><code class=\"plain\"> libti.redlaser.a(DecodedBitStreamParser-A7315F1F645B0479.o)</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] ld: symbol(s) not found </code><code class=\"keyword\">for</code><code class=\"plain\"> architecture i386</code></div> <div class=\"line\"><code class=\"plain\">[TRACE] clang: error: linker </code><code class=\"functions\">command</code><code class=\"plain\"> failed with </code><code class=\"functions\">exit</code><code class=\"plain\"> code 1 (use -</code><code class=\"functions\">v</code><code class=\"plain\"> to see invocation)</code></div> <div class=\"line\"><code class=\"plain\">[ERROR] ** BUILD FAILED **</code></div> <div class=\"line\"><code class=\"plain\">[ERROR] The following build commands failed:</code></div> <div class=\"line\"><code class=\"plain\">[ERROR] Ld build</code><code class=\"plain\">/Debug-iphonesimulator/Mod_redlaser</code><code class=\"plain\">.app</code><code class=\"plain\">/Mod_redlaser</code><code class=\"plain\"> normal i386</code></div> <div class=\"line\"><code class=\"plain\">[ERROR] (1 failure)</code></div> </div> </div> <p>This log shows a number of linker errors referencing the &quot;<i class=\"\">std</i>&quot; namespace. This happens because the library used by the module needs the &quot;<i class=\"\">std</i>&quot; standard library. As of 3.5.0.GA Titanium uses the &quot;<i class=\"\">libc++ (LLVM standard library)&quot;</i> so we now need to specify when to link with the <i>libstdc++</i> library. </p> </div> <div class=\"section section-4\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Tb2x1dGlvbihzKTouMg\"> <h4 class=\"heading\"><span>Solution(s):</span></h4> <ul class=\"\"><li class=\"\"> <p>In the <i class=\"\">module.xcconfig</i>, tell the compiler to link against the <i>libstdc++</i> library by adding the following line as you would when including a framework. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">module.xcconfig</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"module.xcconfig\"> <div class=\"line\"><code class=\"plain\">OTHER_LDFLAGS=$(inherited) -lstdc++.6.0.9</code></div> </div> </div> </li></ul> </div> </div> <div class=\"section section-3\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Nb2R1bGVidWlsZGluZ2ZvcmFybXY3LGkzODYsYW5kYXJtNjRidXRub3R4ODZfNjQ\"> <h3 class=\"heading\"><span>Module building for armv7, i386, and arm64 but not x86_64</span></h3> <p>If you have already followed the instructions above to update the module to 64-bit and it builds 3 of the desired architectures but not x86_64, you may need to update the <i>build.py</i> in the module project. </p> <div class=\"section section-4\" id=\"src-43291229_safe-id-aU9TTW9kdWxlNjQtYml0U3VwcG9ydC1Tb2x1dGlvbihzKTouMw\"> <h4 class=\"heading\"><span>Solution(s):</span></h4> <p>Here are two different ways to update the <i>build.py</i>: </p> <ul class=\"\"><li class=\"\"> <p>Edit the existing <i>build.py</i> </p> <ol class=\"\"><li class=\"\"> <p>Open the <i>build.py</i> in a text editor </p> </li><li class=\"\"> <p>Search for &quot;<strong>-arch i386</strong>&quot; if you find it, remove that text so that the line looks something like this </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">build.py</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"build.py\"> <div class=\"line\"><code class=\"plain\">rc </code><code class=\"keyword\">=</code><code class=\"plain\"> os.system(</code><code class=\"string\">&quot;xcodebuild -sdk iphonesimulator -configuration Release&quot;</code><code class=\"plain\">)</code></div> </div> </div> </li><li class=\"\"> <p>Rebuild your module, and see if it includes x86_64 using <i>xcrun lipo --info</i> as mentioned above. </p> </li></ol></li><li class=\"\"> <p>Update the <i>build.py</i> </p> <ol class=\"\"><li class=\"\"> <p>Create a new module using the same <i>moduleid</i> as the module you are updating </p> </li><li class=\"\"> <p>Copy the new <i class=\"\">build.py</i> it into your old module (overwriting the old <i>build.py</i>) </p> </li><li class=\"\"> <p>Rebuild your module, and see if it includes x86_64 using <i>xcrun lipo --info</i> as mentioned above. </p> </li></ol></li></ul> <p> </p> <p> </p> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43291229\"><span>Edit</span></a> </div> </body> </html> ","title":"iOS Module 64-bit Support"});