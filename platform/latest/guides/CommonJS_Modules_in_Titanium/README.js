Ext.data.JsonP['CommonJS_Modules_in_Titanium']({"guide":" <!doctype html> <html> <head> <title>CommonJS Modules in Titanium</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004791\" class=\"content\"> <h1>CommonJS Modules in Titanium</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Synopsis\">Synopsis</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Definitions\">Definitions</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-CommonJSModuleSpecificationimplementation\">CommonJS Module Specification implementation</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Simpleusage\">Simple usage</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_safe-id-Q29tbW9uSlNNb2R1bGVzaW5UaXRhbml1bS1OYXRpdmUvQ29tcGlsZWR2ZXJzdXNKYXZhU2NyaXB0bW9kdWxlcw\">Native/Compiled versus JavaScript modules</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_safe-id-Q29tbW9uSlNNb2R1bGVzaW5UaXRhbml1bS1OYXRpdmUvQ29tcGlsZWRtb2R1bGVz\">Native/Compiled modules</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-JavaScriptmodules\">JavaScript modules</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-JavaScriptmodulepathresolution\">JavaScript module path resolution</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-JavaScriptmodulecomposition\">JavaScript module composition</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Antipatternsandunsupportedbehavior\">Antipatterns and unsupported behavior</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Caching\">Caching</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Securityandsandboxing\">Security and sandboxing</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Statefulmodules\">Stateful modules</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Globalvariables\">Global variables</a> </p> </li></ul></li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-JavaScriptmoduleexamples\">JavaScript module examples</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Utilitylibraries\">Utility libraries</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Packagesofrelatedfunctionality\">Packages of related functionality</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Instantiableobjects\">Instantiable objects</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/CommonJS_Modules_in_Titanium-section-src-29004791_CommonJSModulesinTitanium-Node.jssupport\">Node.js support</a> </p> </li></ul></li></ul> <div class=\"section section-2\" id=\"src-29004791_CommonJSModulesinTitanium-Synopsis\"> <h2 class=\"heading\"><span>Synopsis</span></h2> <p>Titanium Mobile is moving toward the adoption of the CommonJS module specification as the way in which end users of the platform structure their JavaScript code. While CommonJS Modules are a &quot;standard&quot; <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">specification</a>, there are differences in implementation across multiple technology stacks. </p> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <p>Since Titanium SDK 7.1.0, you can also use ES6+ classes to export your modules instead, e.g. by using <tt class=\"\">export default class MyClass</tt> and <tt>import</tt> statements. It will be transpiled down to ES5, so all native platforms can benefit from it today, without restricting certain functionalities to higher platform levels. </p> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Definitions\"> <h3 class=\"heading\"><span>Definitions</span></h3> <ul class=\"\"><li class=\"\"> <p><strong>Module</strong> - Any CommonJS-compliant module which will be consumed in a Titanium Mobile application. This can be a JavaScript file included with an application, or a native extension to Titanium which exposes a JavaScript API. </p> </li><li class=\"\"> <p><strong class=\"\">Resources</strong> - The Resources directory of a Titanium application, where the user&apos;s source code lives before any processing by our build system. <strong class=\"\">Note</strong>: For Alloy, CommonJS modules are placed in <tt>app/lib</tt> </p> </li><li class=\"\"> <p><tt>exports</tt> - a free variable within a module, to which multiple properties may be added to create a public interface </p> </li><li class=\"\"> <p><tt>module.exports</tt> - an object within a module, which may be REPLACED by an object representing the public interface to the module </p> </li></ul> </div> </div> <div class=\"section section-2\" id=\"src-29004791_CommonJSModulesinTitanium-CommonJSModuleSpecificationimplementation\"> <h2 class=\"heading\"><span>CommonJS Module Specification implementation</span></h2> <p>Our specific implementation of the <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">CommonJS Module Specification</a> is based on (and the early implementation on Android taken directly from) that of <a class=\"external-link external-link\" href=\"http://nodejs.org/docs/v0.6.0/api/modules.html\" target=\"_blank\">node.js</a>. While we should not consider our implementation a direct clone of node, we should favor node conventions where possible to foster reuse of modules across both environments. </p> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Simpleusage\"> <h3 class=\"heading\"><span>Simple usage</span></h3> <p>In order to use a module within Titanium, you must use the <tt>require</tt> function, which is built in to the global scope in every JavaScript context. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> myModule = require(</code><code class=\"string\">&apos;MyModule&apos;</code><code class=\"plain\">);</code></div> </div> </div> <p>The string passed to <tt class=\"\">require</tt> must be resolvable to either a native/compiled module that Titanium Mobile has access to, or a JavaScript module provided in the Resources directory of the Titanium Mobile application. The <tt class=\"\">require</tt> function returns an JavaScript object, with properties, functions, and other data assigned to it which form the public interface to the module. If the module we loaded into the application above exposed a function <tt>sayHello</tt>, which would print a name and a welcome message to the console, it would be accessed in this way: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> myModule = require(</code><code class=\"string\">&apos;MyModule&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">myModule.sayHello(</code><code class=\"string\">&apos;Kevin&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"comments\">// Console output: &quot;Hello Kevin!&quot;</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_safe-id-Q29tbW9uSlNNb2R1bGVzaW5UaXRhbml1bS1OYXRpdmUvQ29tcGlsZWR2ZXJzdXNKYXZhU2NyaXB0bW9kdWxlcw\"> <h3 class=\"heading\"><span>Native/Compiled versus JavaScript modules</span></h3> <p>When a module is required, Titanium must first determine whether or not to load a native/compiled module or a JavaScript module shipped within the Resources directory of a Titanium Mobile application. Titanium will prefer to load a native module first. The deployment and processing of native modules is beyond the scope of this specification, but at the time of this writing, native modules can be deployed globally on a developer machine, or inside a <strong>modules</strong> directory in the top-level Titanium Mobile project directory. </p> <div class=\"section section-4\" id=\"src-29004791_safe-id-Q29tbW9uSlNNb2R1bGVzaW5UaXRhbml1bS1OYXRpdmUvQ29tcGlsZWRtb2R1bGVz\"> <h4 class=\"heading\"><span>Native/Compiled modules</span></h4> <p>Native/compiled modules are identified by a single string, specified within the global app configuration in tiapp.xml. Given the following configuration for a native/compiled module in tiapp.xml: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">module</code><code class=\"plain\"> </code><code class=\"color1\">version</code><code class=\"plain\">=</code><code class=\"string\">&quot;1.0&quot;</code><code class=\"plain\">&gt;ti.paypal&lt;/</code><code class=\"keyword\">module</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> </div> </div> <p>and the following code within a Titanium Mobile application: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> paypal = require(</code><code class=\"string\">&apos;ti.paypal&apos;</code><code class=\"plain\">);</code></div> </div> </div> <p>Titanium will load the <tt class=\"\">ti.paypal</tt> native module, and will NOT attempt to look for or load a module from Resources. If a native module is not found for the string passed to <tt>require</tt>, Titanium will look for a JavaScript module in the Resources. </p> </div> <div class=\"section section-4\" id=\"src-29004791_CommonJSModulesinTitanium-JavaScriptmodules\"> <h4 class=\"heading\"><span>JavaScript modules</span></h4> <p>Modules may also be loaded as JavaScript files from the Resources directory of the application. In Titanium Mobile, a JavaScript module is associated with a single JavaScript file. When the module is loaded, the JavaScript file will be evaluated and the public interface of the module will be populated. </p> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-JavaScriptmodulepathresolution\"> <h3 class=\"heading\"><span>JavaScript module path resolution</span></h3> <p>When dealing with JavaScript modules from Resources, the string passed to <tt class=\"\">require</tt> is considered to be a path to the JavaScript file, minus the &quot;.js&quot; extension. If the path string is not prefixed by a <tt class=\"\">./</tt>, <tt class=\"\">../</tt>, or similar, it is assumed that the module is being referenced relative to the Resources directory. In a Titanium project with a CommonJS module file located in <tt class=\"\">Resources/app/lib/myModule.js</tt>, that module could be loaded as such: <tt>var myModule = require(&apos;app/lib/myModule&apos;);</tt>. </p> <p>Similarly, if the path is prefixed with a <tt class=\"\">/</tt>, the module path is also resolved relative to the Resources directory. For the module above, another valid loading syntax would be <tt>var myModule = require(&apos;/app/lib/myModule&apos;);</tt>. </p> <p>Relative paths may be specified as well. Assume we have modules located in the following locations: </p> <ul class=\"\"><li class=\"\"> <p><tt>Resources/app/ui/SomeCustomView.js</tt> </p> </li><li class=\"\"> <p><tt>Resources/app/ui/widgets/SomeOtherCustomView.js</tt> </p> </li><li class=\"\"> <p><tt>Resources/app/lib/myModule.js</tt> </p> </li></ul> <p>Now assume we are writing code inside the <tt class=\"\">SomeCustomView.js</tt> module file. The following are valid <tt>require</tt> statements: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">SomeCustomView.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"SomeCustomView.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> myModule = require(</code><code class=\"string\">&apos;../lib/myModule&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> SomeOtherCustomView = require(</code><code class=\"string\">&apos;./widgets/SomeOtherCustomView&apos;</code><code class=\"plain\">);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-JavaScriptmodulecomposition\"> <h3 class=\"heading\"><span>JavaScript module composition</span></h3> <p>As in the <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">CommonJS Module specification</a>, inside the module JavaScript file, there will be a special variable called <tt>exports</tt> to which properties may be added for the public interface of the module. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">exports.sayHello = </code><code class=\"keyword\">function</code><code class=\"plain\">(name) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;Hello &apos;</code><code class=\"plain\">+name+</code><code class=\"string\">&apos;!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.version = 1.4;</code></div> <div class=\"line\"><code class=\"plain\">exports.author = </code><code class=\"string\">&apos;Jon Doe&apos;</code><code class=\"plain\">;</code></div> </div> </div> <p>As many properties as desired can be added to the exports object. </p> <p>Alternately, if the module author wishes to make the exported value from the module an object of their own design and choosing, there is a non-standard (but common, as with node.js) extension to the Module specification which allows for this. The <tt class=\"\">module.exports</tt> object is available within the module file, and may be assigned any value which the developer would like to return from the <tt>require</tt> function for their module. This is most commonly used for functions which act as object constructors. The following would be a typical use case for this: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Person(firstName,lastName) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName = firstName;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName = lastName;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Person.prototype.fullName = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName+</code><code class=\"string\">&apos; &apos;</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.lastName;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">module.exports = Person;</code></div> </div> </div> <p>Usage: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Resources/app.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Resources/app.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Person = require(</code><code class=\"string\">&apos;Person&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> johnDoe = </code><code class=\"keyword\">new</code><code class=\"plain\"> Person(</code><code class=\"string\">&apos;John&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;Doe&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> johnDoeName = johnDoe.fullName(); </code><code class=\"comments\">// &quot;John Doe&quot;</code></div> </div> </div> <div class=\"section section-4\" id=\"src-29004791_CommonJSModulesinTitanium-Antipatternsandunsupportedbehavior\"> <h4 class=\"heading\"><span>Antipatterns and unsupported behavior</span></h4> <p>No direct assignments may be made to the exports object: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Person(firstName, lastName) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName = firstName;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName = lastName;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports = Person; </code><code class=\"comments\">// THIS IS NOT OK AND PROBABLY WON&apos;T WORK</code></div> </div> </div> <p>Similarly, you should not mix and match usage of <tt class=\"\">module.exports</tt> and <tt>exports.*</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Person(firstName, lastName) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName = firstName;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName = lastName;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">module.exports = Person; </code><code class=\"comments\">// This is okay, but...</code></div> <div class=\"line\"><code class=\"plain\">exports.foo = </code><code class=\"string\">&apos;bar&apos;</code><code class=\"plain\">; </code><code class=\"comments\">// This is discouraged - use one or the other</code></div> </div> </div> <p>Also, it is recommended that you not mix and match assignments to <tt class=\"\">module.exports</tt> and <tt>exports</tt> - use one or the other: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">exports.foo = </code><code class=\"string\">&apos;bar&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">module.exports.fooToo = </code><code class=\"string\">&apos;something else&apos;</code><code class=\"plain\">; </code><code class=\"comments\">// Not good style - use one or the other.</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Caching\"> <h3 class=\"heading\"><span>Caching</span></h3> <p>When a JavaScript module is loaded, the object returned by <tt>require</tt> should be cached by Titanium and provided again to consumers without evaluating the module&apos;s JavaScript code multiple times. If a developer thinks they want their module code evaluated multiple times, they should really be creating a module with a function that can be called multiple times. There&apos;s no valid use case for re-evaluating JavaScript in a module over and over. </p> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Securityandsandboxing\"> <h3 class=\"heading\"><span>Security and sandboxing</span></h3> <p>As in the <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">CommonJS Module specification</a>, all modules have their own private scope. Variables declared within the module file are private - anything that needs to be made public should be added to the exports object. For more information on sandboxing, refer to the CommonJS module spec. </p> <div class=\"section section-4\" id=\"src-29004791_CommonJSModulesinTitanium-Statefulmodules\"> <h4 class=\"heading\"><span>Stateful modules</span></h4> <p>All modules in Titanium are created once, and then passed by reference on subsequent occasions when the module is required. Because of this, modules themselves may have state variables, which are properties of the &quot;singleton&quot; object represented by the module. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> stateful = require(</code><code class=\"string\">&apos;statefulModule&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> score = require(</code><code class=\"string\">&apos;scoreModule&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> window = Ti.UI.createWindow({</code></div> <div class=\"line\"><code class=\"plain\"> backgroundColor: </code><code class=\"string\">&apos;white&apos;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> title: </code><code class=\"string\">&apos;Click window to score&apos;</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">window.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">try</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;The latest score is &apos;</code><code class=\"plain\"> + score.latestScore());</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;Adding &apos;</code><code class=\"plain\"> + stateful.getPointStep() + </code><code class=\"string\">&apos; points to score...&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> score.pointsWon();</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;The latest score is &apos;</code><code class=\"plain\"> + score.latestScore());</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;Setting points per win to 10&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> stateful.setPointStep(10);</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;Adding &apos;</code><code class=\"plain\"> + stateful.getPointStep() + </code><code class=\"string\">&apos; points to score ...&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> score.pointsWon();</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;The latest score is &apos;</code><code class=\"plain\"> + score.latestScore());</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;---------- Info ----------&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;stateful.getPointStep() returns: &apos;</code><code class=\"plain\"> + stateful.getPointStep());</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;stateful.stepVal value is: &apos;</code><code class=\"plain\"> + stateful.stepVal); </code><code class=\"comments\">// will always return default of 5</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(</code><code class=\"string\">&apos;**************************&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">catch</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;An error has occurred: &apos;</code><code class=\"plain\"> + e);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">window.open();</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">scoreModule.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"scoreModule.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> appStateful = require(</code><code class=\"string\">&apos;statefulModule&apos;</code><code class=\"plain\">); </code><code class=\"comments\">// a reference to the &quot;stateful&quot; variable in app.js that contains the stateful module</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> _score = 0; </code><code class=\"comments\">// default</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.pointsWon = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> _score += appStateful.getPointStep();</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.pointsLost = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> _score -= appStateful.getPointStep();</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.latestScore = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> _score;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">statefulModule.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"statefulModule.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> _stepVal = 5; </code><code class=\"comments\">// default</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.setPointStep = </code><code class=\"keyword\">function</code><code class=\"plain\">(value) {</code></div> <div class=\"line\"><code class=\"plain\"> _stepVal = value;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.getPointStep = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> _stepVal;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.stepVal = _stepVal;</code></div> </div> </div> <p><strong class=\"\">NOTE:</strong> A module is created once per Titanium JavaScript context, so if additional contexts are created, new module objects will be created. For more on JavaScript contexts, <a class=\"document-link\" href=\"#!/guide/Coding_Strategies-section-src-29004891_CodingStrategies-Executioncontexts\">see here</a>. </p> </div> <div class=\"section section-4\" id=\"src-29004791_CommonJSModulesinTitanium-Globalvariables\"> <h4 class=\"heading\"><span>Global variables</span></h4> <p>There shall not be ANY global variables in a Titanium application shared across all modules. Any data a module or any objects exposed by a module require should be passed in during construction or initialization. </p> </div> </div> </div> <div class=\"section section-2\" id=\"src-29004791_CommonJSModulesinTitanium-JavaScriptmoduleexamples\"> <h2 class=\"heading\"><span>JavaScript module examples</span></h2> <p>Here are some examples of modules we expect developers to implement: </p> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Utilitylibraries\"> <h3 class=\"heading\"><span>Utility libraries</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">logger.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"logger.js\"> <div class=\"line\"><code class=\"plain\">exports.info = </code><code class=\"keyword\">function</code><code class=\"plain\">(str) {</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.API.info(</code><code class=\"keyword\">new</code><code class=\"plain\"> Date() + </code><code class=\"string\">&apos;: &apos;</code><code class=\"plain\"> + str);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">exports.debug = </code><code class=\"keyword\">function</code><code class=\"plain\">(str) {</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.API.debug(</code><code class=\"keyword\">new</code><code class=\"plain\"> Date() + </code><code class=\"string\">&apos;: &apos;</code><code class=\"plain\"> + str);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <p>Usage: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> logger = require(</code><code class=\"string\">&apos;logger&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">logger.info(</code><code class=\"string\">&apos;some log statement I wanted with a timestamp&apos;</code><code class=\"plain\">);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Packagesofrelatedfunctionality\"> <h3 class=\"heading\"><span>Packages of related functionality</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">geo.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"geo.js\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Point(x,y) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.x = x;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.y = y;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Line(start,end) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.start = start;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.end = end;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Line.prototype.slope = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> (</code><code class=\"keyword\">this</code><code class=\"plain\">.end.y - </code><code class=\"keyword\">this</code><code class=\"plain\">.start.y) / (</code><code class=\"keyword\">this</code><code class=\"plain\">.end.x - </code><code class=\"keyword\">this</code><code class=\"plain\">.start.x);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Line.prototype.yIntercept = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.start.y - (</code><code class=\"keyword\">this</code><code class=\"plain\">.slope() * </code><code class=\"keyword\">this</code><code class=\"plain\">.start.x);</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"comments\">// Export the public interface</code></div> <div class=\"line\"><code class=\"plain\">exports.Point = Point;</code></div> <div class=\"line\"><code class=\"plain\">exports.Line = Line;</code></div> </div> </div> <p>Usage: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Geo = require(</code><code class=\"string\">&apos;lib/geo&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> startPoint = </code><code class=\"keyword\">new</code><code class=\"plain\"> Geo.Point(1, -5);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> endPoint = </code><code class=\"keyword\">new</code><code class=\"plain\"> Geo.Point(10, 2);</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> line = </code><code class=\"keyword\">new</code><code class=\"plain\"> Geo.Line(startPoint, endPoint);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> slopeValue = line.slope();</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Instantiableobjects\"> <h3 class=\"heading\"><span>Instantiable objects</span></h3> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">Person.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"Person.js\"> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> Person(firstName, lastName) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName = firstName;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName = lastName;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">Person.prototype.fullName = </code><code class=\"keyword\">function</code><code class=\"plain\">() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName + </code><code class=\"string\">&apos; &apos;</code><code class=\"plain\"> + </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">module.exports = Person;</code></div> </div> </div> <p>Usage: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Person = require(</code><code class=\"string\">&apos;Person&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> johnDoe = </code><code class=\"keyword\">new</code><code class=\"plain\"> Person(</code><code class=\"string\">&apos;John&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;Doe&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> johnDoeName = johnDoe.fullName(); </code><code class=\"comments\">// &quot;John Doe&quot;</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-29004791_CommonJSModulesinTitanium-Node.jssupport\"> <h3 class=\"heading\"><span>Node.js support</span></h3> <p>Titanium supports node.js modules and structures the <tt class=\"\">require()</tt> handling based on the node.js require-specification. Read more about this topic in the <a class=\"document-link\" href=\"#!/guide/Node.js_Support\">dedicated Node.js guide</a>. </p> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004791\"><span>Edit</span></a> </div> </body> </html> ","title":"CommonJS Modules in Titanium"});