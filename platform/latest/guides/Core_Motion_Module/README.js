Ext.data.JsonP['Core_Motion_Module']({"guide":" <!doctype html> <html> <head> <title>Core Motion Module</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-38928815\" class=\"content\"> <h1>Core Motion Module</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Introduction\">Introduction</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Requirements\">Requirements</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Concepts\">Concepts</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Coordinatesystem\">Coordinate system</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Gettingstarted\">Getting started</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-UsingtheCoreMotionAPI\">Using the Core Motion API</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Callbacks\">Callbacks</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Devicemotion\">Device motion</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example\">Example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Activity\">Activity</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example.1\">Example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Pedometer\">Pedometer</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example.2\">Example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Accelerometer\">Accelerometer</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example.3\">Example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Gyroscope\">Gyroscope</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example.4\">Example</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Magnetometer\">Magnetometer</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Core_Motion_Module-section-src-38928815_CoreMotionModule-Example.5\">Example</a> </p> </li></ul></li></ul></li></ul> <div class=\"section section-2\" id=\"src-38928815_CoreMotionModule-Introduction\"> <h2 class=\"heading\"><span>Introduction</span></h2> <p>The Core Motion module provides support for monitoring various hardware sensors on iOS devices, such as the accelerometer, gyroscope, and magnetometer. The Core Motion module allows you to access the measurements provided by these sensors. </p> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Requirements\"> <h3 class=\"heading\"><span>Requirements</span></h3> <p>Not all devices have the same hardware sensors, so all features may not be available for all devices. Be sure to use the API to check the device for the existence of a feature. </p> <p>You can only test the Core Motion module on a device. The Core Motion API cannot be tested on the iOS simulator. </p> <p>Some features may require permission to use &quot;Motion Activity&quot;. iOS requires the user&apos;s approval to use the &quot;Motion Activity&quot; permission. When the application uses the Core Motion API for the first time, iOS prompts the user to either approve or deny access to the Core Motion features of the device. The user can change the permission settings with <strong>Settings &gt; Privacy</strong>. </p> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Concepts\"> <h3 class=\"heading\"><span>Concepts</span></h3> <p>An iOS device contains various sensors on it to measure and collect different measurements. Most modern devices contain an accelerometer, gyroscope and magnetometer: </p> <ul class=\"\"><li class=\"\"> <p><strong>Accelerometer</strong>: The accelerometer measures the instantaneous g-force acceleration acting on the device along the three spatial axes. The accelerometer measures each force in G&apos;s (gravitational force or 9.81 m/s^2). An accelerometer allows the software to know the orientation of the device. </p> </li><li class=\"\"> <p><strong>Gyroscope</strong>: The gyroscope measures the instantaneous rotation rate of the device. The gyroscope measures the rotation rate of each individual axis in radians (360 degrees = 2 * pi radians). The gyroscope improves the accuracy of recognizing movement in 3D space. </p> </li><li class=\"\"> <p><strong>Magnetometer</strong>: The magnetometer measures the strength and direction of magnetic fields in microteslas. The device uses the magnetometer as a digital compass. </p> </li></ul> <p>The measurement from these three sensors provide raw data that is used to calculate other useful measurements of the device: </p> <ul class=\"\"><li class=\"\"> <p><strong>Activity</strong>: The activity indicates the motion activity the user is currently doing with the device, such as walking, running or if the device is in an automobile. </p> </li><li class=\"\"> <p><strong>Attitude:</strong> Measurement of the orientation of the device relative to a frame of reference, represented as either Euler angles (roll, pitch and yaw), a rotation matrix, or a <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Quaternion\" target=\"_blank\">quaternion</a>. </p> </li><li class=\"\"> <p><strong>Pedometer</strong>: Measures the number of steps the user has taken with the device. </p> </li><li class=\"\"> <p><strong>User Acceleration:</strong> Instantaneous acceleration force the user applies to the device. </p> </li></ul> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Coordinatesystem\"> <h3 class=\"heading\"><span>Coordinate system</span></h3> <p>The accelerometer and magnetometer measure forces along the three spatial axes. If you hold the device in portrait mode with the screen facing you: </p> <ul class=\"\"><li> <p>The X-axis runs along the width of the screen in the center of the device. Positive values are to the right and negative values are to the left. For example, landscape left reports positive values and landscape right reports negative values. Note that the left and right names come from the location of the home button, not the edge of the device. </p> </li><li> <p>The Y-axis runs along the height of the screen in the center of the device. Positive values are up and negative values are down. For example, upside down mode reports positive values and portrait mode reports negative values. </p> </li><li> <p>The Z-axis runs through the screen and back of the device in the center of the device. Positive values are towards the screen and negative values are behind the device. For example, face down reports positive values and face up reports negative values. </p> </li></ul> <p> <img src=\"images/download/attachments/38928815/ForceCoordinateSystem.png\" alt=\"images/download/attachments/38928815/ForceCoordinateSystem.png\" class=\"gliffy-macro-image\" width=\"658\"> </img></p> <p>The gyroscope measures forces along the three spatial axes. If you hold the device in portrait mode with the screen facing you: </p> <ul class=\"\"><li> <p>The X-axis runs along the width of the screen in the center of the device. Rotating the screen down indicates a positive rotation direction. </p> </li><li> <p>The Y-axis runs along the height of the screen in the center of the device. Rotating the screen to the right indicates a positive rotation direction. </p> </li><li> <p>The Z-axis runs through the screen and back of the device in the center of the device. Rotating the device to right landscape mode (left edge down) indicates a positive rotation direction. </p> </li></ul> </div> </div> <div class=\"section section-2\" id=\"src-38928815_CoreMotionModule-Gettingstarted\"> <h2 class=\"heading\"><span>Getting started</span></h2> <p>The Core Motion module is available as part of the Titanium SDK. To use core motion services in your application, add the module as a dependency to your application. </p> <ol class=\"\"><li class=\"\"> <p>Modify the modules section of your <tt class=\"\">tiapp.xml</tt> file to include the <tt class=\"\">ti.coremotion</tt> module or add the module with Studio&apos;s TiApp Editor (see <a class=\"document-link\" href=\"#!/guide/Using_a_Module\">Using a Module</a>): </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">module</code><code class=\"plain\"> </code><code class=\"color1\">platform</code><code class=\"plain\">=</code><code class=\"string\">&quot;iphone&quot;</code><code class=\"plain\">&gt;ti.coremotion&lt;/</code><code class=\"keyword\">module</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">modules</code><code class=\"plain\">&gt;</code></div> </div> </div> </li><li> <p>Require in the module in your JavaScript code. Use the reference to make API calls to the module. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Pedometer = CoreMotion.createPedometer();</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Pedometer.isSupported()) {</code></div> <div class=\"line\"><code class=\"plain\"> Pedometer.startPedometerUpdates({</code></div> <div class=\"line\"><code class=\"plain\"> start: </code><code class=\"keyword\">new</code><code class=\"plain\"> Date(</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() - 60 * 60 * 1000) </code><code class=\"comments\">// 1 hr ago</code></div> <div class=\"line\"><code class=\"plain\"> },&#xA0;</code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.info(JSON.stringify(e));</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.warn(</code><code class=\"string\">&apos;This device does not support the pedometer.&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </li></ol> </div> <div class=\"section section-2\" id=\"src-38928815_CoreMotionModule-UsingtheCoreMotionAPI\"> <h2 class=\"heading\"><span>Using the Core Motion API</span></h2> <p>The <a class=\"external-link external-link\" href=\"http://docs.appcelerator.com/. latest/#!/api/Modules.CoreMotion\" target=\"_blank\">Core Motion API</a> breaks down in to the following six features: </p> <ul class=\"\"><li class=\"\"> <p><strong>Device Motion</strong>: access the device&apos;s data for attitude and user acceleration as well as the raw data sent by the accelerometer, gyroscope and magnetometer </p> </li><li class=\"\"> <p><strong>Activity</strong>: access the device&apos;s motion activity functionality </p> </li><li class=\"\"> <p><strong class=\"\">Pedometer</strong>: access the device&apos;s step counting functionality (replaced the in iOS 7 deprecated <strong>Step Counter</strong> by covering the same API and additional features) </p> </li><li class=\"\"> <p><strong>Accelerometer</strong>: access the device&apos;s accelerometer measurements </p> </li><li class=\"\"> <p><strong>Gyroscope</strong>: access the device&apos;s rotation rate measurements </p> </li><li class=\"\"> <p><strong>Magnetometer</strong>: access the device&apos;s magnetic field measurements </p> </li></ul> <p>Each core motion feature follows a basic sequence. To use a core motion feature: </p> <ol class=\"\"><li> <p>Create a new accelerometer instance and query the device to see if the feature is available. Use the feature&apos;s &quot;is available&quot; method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Accelerometer = CoreMotion.createAccelerometer();</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Accelerometer.isAccelerometerAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Start the service</code></div> <div class=\"line\"><code class=\"plain\"> accelerometer_state = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </li><li> <p>Start the service with or without a callback function to start collecting data. Use the feature&apos;s &quot;start&quot; method. </p> <ol class=\"\"><li> <p>If you start the service with a callback, use the feature&apos;s &quot;set interval&quot; method to determine how often the device sends data to the application. Note that pushing data from the device to the application requires a lot of CPU cycles. The application may not be able to keep up with the data rate if the device moves rapidly. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Send data at 1 s (1000 ms) intervals</code></div> <div class=\"line\"><code class=\"plain\">Accelerometer.setAccelerometerUpdateInterval(1000);</code></div> <div class=\"line\"><code class=\"comments\">// Start with a callback</code></div> <div class=\"line\"><code class=\"plain\">Accelerometer.startAccelerometerUpdates(updateAccelData);</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateAccelData (e) {</code></div> <div class=\"line\"><code class=\"plain\"> data = e.acceleration;</code></div> <div class=\"line\"><code class=\"plain\"> xLabel.text = data.x;</code></div> <div class=\"line\"><code class=\"plain\"> yLabel.text = data.y;</code></div> <div class=\"line\"><code class=\"plain\"> zLabel.text = data.z;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </li><li> <p>If you start the service without a callback, you need to periodically check for data with the feature&apos;s &quot;get&quot; or &quot;query&quot; method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Start without a callback and get data</code></div> <div class=\"line\"><code class=\"plain\">Accelerometer.startAccelerometerUpdates();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// The user manually polls for data </code></div> <div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> updateAccelData(Accelerometer.getAccelerometerData());</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateAccelData (e) {</code></div> <div class=\"line\"><code class=\"plain\"> data = e.acceleration;</code></div> <div class=\"line\"><code class=\"plain\"> xLabel.text = data.x;</code></div> <div class=\"line\"><code class=\"plain\"> yLabel.text = data.y;</code></div> <div class=\"line\"><code class=\"plain\"> zLabel.text = data.z;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </li></ol></li><li> <p>Stop the service when the application does not need to collect data. Use the feature&apos;s &quot;stop&quot; method. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (acceleratormeter_state) {</code></div> <div class=\"line\"><code class=\"plain\"> Accelerometer.stopAccelerometerUpdates();</code></div> <div class=\"line\"><code class=\"plain\"> acceleratormeter_state = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </li></ol> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Callbacks\"> <h3 class=\"heading\"><span>Callbacks</span></h3> <p>The Core Motion API performs asynchronous calls and relies on callback functions for responses. The callbacks are passed a dictionary as its only argument. The dictionary contains the following common properties: </p> <ul class=\"\"><li class=\"\"> <p><tt>code</tt>: Returns an error code if the method failed. The value can be one of the following constants: </p> <ul class=\"\"><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_DEVICE_REQUIRES_MOVEMENT</tt>: The device must move for a sampling of motion data to occur. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_INVALID_PARAMETER</tt>: An invalid parameter was specified. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_MOTION_ACTIVITY_NOT_AUTHORIZED</tt>: The app is not currently authorized to use motion activity support. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_MOTION_ACTIVITY_NOT_AVAILABLE</tt>: Motion activity support is not available on the current device. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_MOTION_ACTIVITY_NOT_ENTITLED</tt>: The app is missing a required entitlement. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_NULL</tt>: No error. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_TRUE_NORTH_NOT_AVAILABLE</tt>: True north is not available on this device. This usually indicates that the device&apos;s location is not yet available. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ERROR_UNKNOWN</tt>: An unknown error occurred. </p> </li></ul></li><li class=\"\"> <p><tt>error</tt>: Error message if any. </p> </li><li class=\"\"> <p><tt>success</tt>: Returns true if the method succeeded. </p> </li><li class=\"\"> <p><tt>timestamp</tt>: Logged time of the measurement. (Only for the &quot;get&quot; methods). </p> </li></ul> <p>The dictionary also contains properties specific to each feature, reporting different measurements. </p> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Devicemotion\"> <h3 class=\"heading\"><span>Device motion</span></h3> <p>The Device Motion API captures data from the accelerometer, gyroscope and magnetometer to calculate the attitude of the device and the acceleration applied by the user to the device. </p> <p>The Device Motion API provides the same interface as the other Core Motion APIs except the application can initialize the service with a specific reference frame for attitude calculations. Use the <tt>availableAttitudeReferenceFrames</tt> method to retrieve a bitmask indicating the available reference frames. Use the bitmask to bitwise-AND with a reference frame constant to check its availability. The Device Motion API uses the following constants: </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">&lt;CoreMotion&gt;.ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_CORRECTED_Z_VERTICAL</tt>: Describes the same reference frame as <tt class=\"\">ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_Z_VERTICAL</tt> except that the magnetometer, when available and calibrated, is used to improve long-term yaw accuracy. Using this constant instead of <tt>ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_Z_VERTICAL</tt> results in increased CPU usage. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ATTITUDE_REFERENCE_FRAME_X_ARBITRARY_Z_VERTICAL</tt>: Describes a reference frame in which the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ATTITUDE_REFERENCE_FRAME_X_MAGNETIC_NORTH_Z_VERTICAL</tt>: Describes a reference frame in which the Z axis is vertical and the X axis points toward magnetic north. Note that using this reference frame may require device movement to calibrate the magnetometer. </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.ATTITUDE_REFERENCE_FRAME_X_TRUE_NORTH_Z_VERTICAL</tt>: Describes a reference frame in which the Z axis is vertical and the X axis points toward true north. Note that using this reference frame may require device movement to calibrate the magnetometer. It also requires the location to be available in order to calculate the difference between magnetic and true north. </p> </li></ul> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Check to see if the true north reference frame is available</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> DeviceMotion = CoreMotion.createDeviceMotion();</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> frames = DeviceMotion.availableAttitudeReferenceFrames();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">return</code><code class=\"plain\"> (frames &amp; CoreMotion.ATTITUDE_REFERENCE_FRAME_X_TRUE_NORTH_Z_VERTICAL);</code></div> </div> </div> <p>To retrieve the default reference frame, call the <tt>getAttitudeReferenceFrame</tt> method. </p> <p>If the application gets a valid reference frame, use the <tt class=\"\">startDeviceMotionUpdatesUsingReferenceFrame</tt> method to initialize the Device Motion API with the reference frame. Pass a dictionary with one key-value pair as the first argument. Set the <tt>referenceFrame</tt> property to the reference frame constant you want to use. Pass an optional callback as the second parameter to the method. </p> <p>The Device Motion API uses five extra dictionaries to report the motion state of the device: </p> <ul class=\"\"><li class=\"\"> <p><tt>attitude</tt>: Reports the orientation device in relation to a reference frame. The attitude is reported as either a quaternion, rotation matrix; or the pitch, roll and yaw of the device. The dictionary contains the following properties: </p> <ul class=\"\"><li class=\"\"> <p><tt>pitch</tt>: Rotation of the device in radians along the X-axis. </p> </li><li class=\"\"> <p><tt>roll:</tt> Rotation of the device in radians along the Y-axis. </p> </li><li class=\"\"> <p><tt>yaw</tt>: Rotation of the device in radians along the Z-axis. </p> </li><li class=\"\"> <p><tt class=\"\">quaternion</tt>: Quaternion representing the attitude of the device. Contains four properties: <tt class=\"\">w</tt>,<tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt>z</tt>, which provides the values along the W-, X-, Y- and Z-axes, respectively. </p> </li><li class=\"\"> <p><tt class=\"\">rotationMatrix</tt>: 2D matrix representing the attitude of the device. Contains nine properties: <tt class=\"\">m11</tt> to <tt>m33</tt>, representing the values of the matrix. </p> </li></ul></li><li class=\"\"> <p><tt>gravity</tt>: Same dictionary of values returned by the Accelerometer API. Contains three properties: x, y and z, which provides the acceleration values in G&apos;s along the X-, Y- and Z-axes, respectively. </p> </li><li class=\"\"> <p><tt class=\"\">magneticField</tt>: Same dictionary of values returned by the Magnetometer API. Contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt>z</tt>, which provides the magnetic field values in microteslas along the X-, Y- and Z-axes, respectively. </p> </li><li class=\"\"> <p><tt class=\"\">rotationRate:</tt> Same dictionary of values returned by the Gyroscope API. Contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt>z</tt>, which provides the rotational rates in radian along the X-, Y- and Z-axes, respectively. </p> </li><li class=\"\"> <p><tt class=\"\">userAcceleration</tt>: Reports the acceleration applied by the user to the device. Contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt>z</tt>, which provides the acceleration values in G&apos;s along the X-, Y- and Z-axes, respectively. </p> </li></ul> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The sample below initializes the Device Motion API with the specified reference frame. If the frame is not available, the application falls back to the default frame or no frame. If the user shakes the device for about 3 s, the application determines the direction the user is shaking, based on the user acceleration data. The application outputs the attitude data to the display. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Window</code><code class=\"plain\"> </code><code class=\"color1\">backgroundColor</code><code class=\"plain\">=</code><code class=\"string\">&quot;white&quot;</code><code class=\"plain\"> </code><code class=\"color1\">layout</code><code class=\"plain\">=</code><code class=\"string\">&quot;vertical&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;Pitch:&lt;/</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ProgressBar</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;pitch&quot;</code><code class=\"plain\"> /&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;Roll:&lt;/</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ProgressBar</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;roll&quot;</code><code class=\"plain\"> /&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;Yaw:&lt;/</code><code class=\"keyword\">Label</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ProgressBar</code><code class=\"plain\"> </code><code class=\"color1\">id</code><code class=\"plain\">=</code><code class=\"string\">&quot;yaw&quot;</code><code class=\"plain\"> /&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/styles/index.tss</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/styles/index.tss\"> <div class=\"line\"><code class=\"string\">&quot;ProgressBar&quot;</code><code class=\"plain\"> : {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;top&quot;</code><code class=\"plain\"> : </code><code class=\"value\">10</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;width&quot;</code><code class=\"plain\"> : </code><code class=\"value\">200</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;min&quot;</code><code class=\"plain\"> : </code><code class=\"value\">0</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;max&quot;</code><code class=\"plain\"> : </code><code class=\"value\">3.1415927</code></div> <div class=\"line\"><code class=\"plain\">},</code></div> <div class=\"line\"><code class=\"string\">&quot;Label&quot;</code><code class=\"plain\"> : {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;font&quot;</code><code class=\"plain\"> : {</code></div> <div class=\"line\"><code class=\"plain\"> textStyle: Ti.UI.TEXT_STYLE_SUBHEADLINE</code></div> <div class=\"line\"><code class=\"plain\"> },</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;top&quot;</code><code class=\"plain\"> : </code><code class=\"value\">50</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;left&quot;</code><code class=\"plain\"> : </code><code class=\"value\">10</code></div> <div class=\"line\"><code class=\"plain\">}&#xA0;</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/controllers/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/controllers/index.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> accelX = accelY = accelZ = 0;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> lastX = lastY = lastZ = 0;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> ACCEL_THRESHOLD = 2;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> SHAKE_THRESHOLD = 5;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> DeviceMotion = CoreMotion.createDeviceMotion();</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (DeviceMotion.isDeviceMotionAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> DeviceMotion.setDeviceMotionUpdateInterval(500);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> frames = DeviceMotion.availableAttitudeReferenceFrames();</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> ref_frame = CoreMotion.ATTITUDE_REFERENCE_FRAME_X_TRUE_NORTH_Z_VERTICAL;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (frames &amp; ref_frame) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Use the True North Frame if available</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.debug(</code><code class=\"string\">&apos;REFERENCE FRAME: True North&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> DeviceMotion.startDeviceMotionUpdatesUsingReferenceFrame(</code></div> <div class=\"line\"><code class=\"plain\"> {referenceFrame: ref_frame},</code></div> <div class=\"line\"><code class=\"plain\"> updateMotionData </code></div> <div class=\"line\"><code class=\"plain\"> );</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (ref_frame = DeviceMotion.getAttitudeReferenceFrame()) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Use the default frame if it exists</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.debug(</code><code class=\"string\">&apos;REFERENCE FRAME: Default &apos;</code><code class=\"plain\"> + ref_frame);</code></div> <div class=\"line\"><code class=\"plain\"> DeviceMotion.startDeviceMotionUpdatesUsingReferenceFrame(</code></div> <div class=\"line\"><code class=\"plain\"> {referenceFrame: ref_frame},</code></div> <div class=\"line\"><code class=\"plain\"> updateMotionData </code></div> <div class=\"line\"><code class=\"plain\"> ); </code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Do not use a reference frame</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.debug(</code><code class=\"string\">&apos;REFERENCE FRAME: None&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> DeviceMotion.startDeviceMotionUpdates(updateMotionData);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateMotionData (e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) { </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> data = e.userAcceleration;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (Math.abs(lastX - data.x) &gt; ACCEL_THRESHOLD) {</code></div> <div class=\"line\"><code class=\"plain\"> accelX++;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (Math.abs(lastY - data.y) &gt; ACCEL_THRESHOLD) {</code></div> <div class=\"line\"><code class=\"plain\"> accelY++;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (Math.abs(lastZ - data.z) &gt; ACCEL_THRESHOLD) {</code></div> <div class=\"line\"><code class=\"plain\"> accelZ++;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> analyzeResults();</code></div> <div class=\"line\"><code class=\"plain\"> lastX = data.x;</code></div> <div class=\"line\"><code class=\"plain\"> lastY = data.y;</code></div> <div class=\"line\"><code class=\"plain\"> lastZ = data.z;</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> data = e.attitude;</code></div> <div class=\"line\"><code class=\"plain\"> $.pitch.message = data.pitch;</code></div> <div class=\"line\"><code class=\"plain\"> $.pitch.value = Math.abs(data.pitch);</code></div> <div class=\"line\"><code class=\"plain\"> $.roll.message = data.roll;</code></div> <div class=\"line\"><code class=\"plain\"> $.roll.value = Math.abs(data.roll);</code></div> <div class=\"line\"><code class=\"plain\"> $.yaw.message = data.yaw;</code></div> <div class=\"line\"><code class=\"plain\"> $.yaw.value = Math.abs(data.yaw);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) Ti.API.error(e.error);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> analyzeResults() {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (accelX &gt; SHAKE_THRESHOLD || accelY &gt; SHAKE_THRESHOLD || accelZ &gt; SHAKE_THRESHOLD) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> err = SHAKE_THRESHOLD * 0.5;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (accelX &gt; SHAKE_THRESHOLD &amp;&amp; (accelY &lt; err &amp;&amp; accelZ &lt; err)) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Quit shaking me back and forth!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (accelY &gt; SHAKE_THRESHOLD &amp;&amp; (accelX &lt; err &amp;&amp; accelZ &lt; err)) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Quit shaking me up and down!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (accelZ &gt; SHAKE_THRESHOLD &amp;&amp; (accelX &lt; err &amp;&amp; accelY &lt; err)) {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Why are you shaking me like that?!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&apos;Quit shaking me!&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> } </code></div> <div class=\"line\"><code class=\"plain\"> accelX = accelY = accelZ = 0;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">$.pitch.show();</code></div> <div class=\"line\"><code class=\"plain\">$.roll.show();</code></div> <div class=\"line\"><code class=\"plain\">$.yaw.show();</code></div> <div class=\"line\"><code class=\"plain\">$.index.open();</code></div> </div> </div> <p> <img src=\"images/download/attachments/38928815/devicemotion.png\" alt=\"images/download/attachments/38928815/devicemotion.png\" class=\"confluence-embedded-image\"> </img></p> </div> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Activity\"> <h3 class=\"heading\"><span>Activity</span></h3> <p>The Activity API determines what the motion-related activity the user is doing with the device and keeps a log of the activities. </p> <p>The Activity API provides the same basic interface as the other Core Motion APIs except: </p> <ul class=\"\"><li class=\"\"> <p>Use the <tt class=\"\">queryActivity</tt> method to retrieve a log of activities within a time period. Pass a dictionary with two key-value pairs as the first parameter. Set the <tt class=\"\">start</tt> property to a JavaScript Date object indicating the start time of the period and the <tt class=\"\">end</tt> property to a JavaScript Date object indicating the end of the period. Neither of these properties can be left undefined. Pass a callback to handle the query response as the second parameter. Check the <tt class=\"\">activities</tt> property, which returns an array of <tt>activity</tt> dictionaries, for the query results. </p> </li><li class=\"\"> <p>The dictionary object passed to the callback only contains the <tt class=\"\">activity</tt> property. The dictionary does not contain the <tt class=\"\">code</tt>, <tt class=\"\">error</tt>, <tt class=\"\">success</tt> or <tt>timestamp</tt> properties. </p> </li><li> <p>The Activity API does not have a &quot;set interval&quot; method. </p> </li></ul> <p>The Activity API uses an <tt class=\"\">activity</tt> dictionary to report the motion state of the device. The <tt>activity</tt> dictionary contains the following properties: </p> <ul class=\"\"><li class=\"\"> <p><tt>automotive</tt>: indicates whether the device is in an automobile. </p> </li><li class=\"\"> <p><tt>running</tt>: indicates whether the device is on a running person. </p> </li><li class=\"\"> <p><tt>stationary</tt>: indicates whether the device is stationary. </p> </li><li class=\"\"> <p><tt>unknown</tt>: indicates whether the type of motion is unknown. </p> </li><li class=\"\"> <p><tt>walking</tt>: indicates whether the device is on a walking person. </p> </li><li class=\"\"> <p><tt>confidence</tt>: confidence in the assessment of the motion type reported as one of the following constants: </p> <ul class=\"\"><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.MOTION_ACTIVITY_CONFIDENCE_LOW</tt> </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.MOTION_ACTIVITY_CONFIDENCE_MEDIUM</tt> </p> </li><li class=\"\"> <p><tt>&lt;CoreMotion&gt;.MOTION_ACTIVITY_CONFIDENCE_HIGH</tt> </p> </li></ul></li><li class=\"\"> <p><tt>startDate</tt> : The time at which the change in motion occurred. </p> </li></ul> <p>The first five properties indicate a possible motion-related activity that can be logged. Only one of these properties may be set to true. If you passed a callback to the <tt class=\"\">startActivity</tt> method, check the <tt>activity</tt> property for the current results. </p> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example.1\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The following Alloy application captures the activity log of the device and displays it as a list to the user. The application checks the confidence level of the captured data and see if the activity changed. The application adds the activity data to the collection, which updates the list in the application. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/views/index.xml</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/views/index.xml\"> <div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Collection</code><code class=\"plain\"> </code><code class=\"color1\">src</code><code class=\"plain\">=</code><code class=\"string\">&quot;activities&quot;</code><code class=\"plain\">/&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">Window</code><code class=\"plain\"> </code><code class=\"color1\">class</code><code class=\"plain\">=</code><code class=\"string\">&quot;container&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ListView</code><code class=\"plain\"> </code><code class=\"color1\">top</code><code class=\"plain\">=</code><code class=\"string\">&quot;25&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ListSection</code><code class=\"plain\"> </code><code class=\"color1\">dataCollection</code><code class=\"plain\">=</code><code class=\"string\">&quot;activities&quot;</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;</code><code class=\"keyword\">ListItem</code><code class=\"plain\"> </code><code class=\"color1\">title</code><code class=\"plain\">=</code><code class=\"string\">&quot;{activity}&quot;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">subtitle</code><code class=\"plain\">=</code><code class=\"string\">&quot;{timestamp}&quot;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">template</code><code class=\"plain\">=</code><code class=\"string\">&quot;Ti.UI.LIST_ITEM_TEMPLATE_SUBTITLE&quot;</code><code class=\"plain\"> /&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">ListSection</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">ListView</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\"> &lt;/</code><code class=\"keyword\">Window</code><code class=\"plain\">&gt;</code></div> <div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">Alloy</code><code class=\"plain\">&gt;</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/controllers/index.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/controllers/index.js\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> activities = Alloy.Collections.activities;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> model = Backbone.Model.extend();</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> MotionActivity = CoreMotion.createMotionActivity();</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> last_activity = </code><code class=\"string\">&apos;unknown&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">MotionActivity.startActivityUpdates(updateActivity);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateActivity(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> data = e.activity;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> dict = {};</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Only capture data if the confidence is medium or high</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (data.confidence != CoreMotion.MOTION_ACTIVITY_CONFIDENCE_LOW) {</code></div> <div class=\"line\"><code class=\"plain\"> dict.timestamp = data.startDate;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (data.automotive) {</code></div> <div class=\"line\"><code class=\"plain\"> dict.activity = </code><code class=\"string\">&apos;automotive&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (data.running) {</code></div> <div class=\"line\"><code class=\"plain\"> dict.activity = </code><code class=\"string\">&apos;running&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (data.stationary) {</code></div> <div class=\"line\"><code class=\"plain\"> dict.activity = </code><code class=\"string\">&apos;stationary&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (data.walking) {</code></div> <div class=\"line\"><code class=\"plain\"> dict.activity = </code><code class=\"string\">&apos;walking&apos;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (dict.activity === last_activity) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> activities.add(</code><code class=\"keyword\">new</code><code class=\"plain\"> model(dict));</code></div> <div class=\"line\"><code class=\"plain\"> last_activity = dict.activity;</code></div> <div class=\"line\"><code class=\"plain\"> } </code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">$.index.open();</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">app/models/activities.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"app/models/activities.js\"> <div class=\"line\"><code class=\"plain\">exports.definition = {</code></div> <div class=\"line\"><code class=\"plain\"> config: {</code></div> <div class=\"line\"><code class=\"plain\"> adapter: {</code></div> <div class=\"line\"><code class=\"plain\"> type: </code><code class=\"string\">&quot;properties&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> collection_name: </code><code class=\"string\">&quot;activities&quot;</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">};&#xA0;</code></div> </div> </div> <p> <img src=\"images/download/attachments/38928815/activity.png\" alt=\"images/download/attachments/38928815/activity.png\" class=\"confluence-embedded-image\"> </img></p> </div> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Pedometer\"> <h3 class=\"heading\"><span>Pedometer</span></h3> <p>The Pedometer API keeps track of how many steps a user takes with the device. The Pedometer API provides the same basic interface as the other Core Motion APIs except: </p> <ul class=\"\"><li class=\"\"> <p>The <tt class=\"\">startPedometerUpdates</tt> method requires an additional parameter. Pass a dictionary with one key-value pair. Set the <tt class=\"\">start</tt> property to a valid date to use when gathering pedometer data. Pedometer API starts counting steps from this date. Pass an optional callback function as the second parameter. Check the <tt>numberOfSteps</tt> property for the current results. </p> </li><li> <p>The Pedometer API does not have a &quot;set interval&quot; method. </p> </li></ul> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example.2\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The sample code below uses the Pedometer API to measure the number of steps a user takes. The device displays the measurement on screen. The user presses the button to retrieve the number of steps taken within the last hour. The application calls the <tt>queryStepCount</tt> method to retrieve the number of steps taken within the last minute. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Pedometer = CoreMotion.createPedometer();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({ backgroundColor: </code><code class=\"string\">&apos;white&apos;</code><code class=\"plain\">, layout: </code><code class=\"string\">&apos;vertical&apos;</code><code class=\"plain\"> });</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> step_label = Ti.UI.createLabel({ text: 0, top: 25 });</code></div> <div class=\"line\"><code class=\"plain\">win.add(step_label);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> step_history_label = Ti.UI.createLabel({ text: </code><code class=\"string\">&apos;Press the button for step history.&apos;</code><code class=\"plain\">, top: 25 });</code></div> <div class=\"line\"><code class=\"plain\">win.add(step_history_label);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Pedometer.isStepCountingAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> Pedometer.startPedometerUpdates({</code></div> <div class=\"line\"><code class=\"plain\"> start: </code><code class=\"keyword\">new</code><code class=\"plain\"> Date(</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() - 60 * 60 * 1000)</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> step_label.text = e.numberOfSteps;</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> button = Ti.UI.createButton({ title: </code><code class=\"string\">&apos;Last Minute&apos;</code><code class=\"plain\">, top: 25 });</code></div> <div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> Pedometer.queryPedometerData({</code></div> <div class=\"line\"><code class=\"plain\"> start: </code><code class=\"keyword\">new</code><code class=\"plain\"> Date(</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() - 60*1000), </code></div> <div class=\"line\"><code class=\"plain\"> end: </code><code class=\"keyword\">new</code><code class=\"plain\"> Date()</code></div> <div class=\"line\"><code class=\"plain\"> }, </code><code class=\"keyword\">function</code><code class=\"plain\"> (e) {</code></div> <div class=\"line\"><code class=\"plain\"> step_history_label.text = </code><code class=\"string\">&quot;You walked &quot;</code><code class=\"plain\"> + e.numberOfSteps + </code><code class=\"string\">&quot; steps in the last minute.&quot;</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(button);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Accelerometer\"> <h3 class=\"heading\"><span>Accelerometer</span></h3> <p>The accelerometer measures the instantaneous g-force acceleration acting on the device along each spatial axis. </p> <p>The Accelerometer API uses a <tt class=\"\">acceleration</tt> dictionary to report the measurements of the device. The dictionary contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt class=\"\">z</tt>, which provides the acceleration values in G&apos;s along the X-, Y- and Z-axes, respectively. If you passed a callback to the <tt class=\"\">setAccelerometerUpdates</tt> method, check the <tt>acceleration</tt> property for these values. </p> <p>If you want to measure acceleration force the user applies to the phone, use the Device Motion API. </p> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example.3\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The sample code below use the Accelerometer API to send acceleration data at 1 s intervals. The device displays the data on screen. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Accelerometer = CoreMotion.createAccelerometer();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Accelerometer.isAccelerometerAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> Accelerometer.setAccelerometerUpdateInterval(1000);</code></div> <div class=\"line\"><code class=\"plain\"> Accelerometer.startAccelerometerUpdates(updateAccelData);</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\">\talert(</code><code class=\"string\">&apos;Device does not have an accelerometer.&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"comments\">// GUI to display measurements</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({ backgroundColor: </code><code class=\"string\">&apos;white&apos;</code><code class=\"plain\">, layout: </code><code class=\"string\">&apos;vertical&apos;</code><code class=\"plain\"> });</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> progress_bar_args = {</code></div> <div class=\"line\"><code class=\"plain\"> max: 1,</code></div> <div class=\"line\"><code class=\"plain\"> min: 0,</code></div> <div class=\"line\"><code class=\"plain\"> value: 0,</code></div> <div class=\"line\"><code class=\"plain\"> width: 200,</code></div> <div class=\"line\"><code class=\"plain\"> top: 50\t</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> accelX = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> accelY = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> accelZ = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.add(accelX);</code></div> <div class=\"line\"><code class=\"plain\">win.add(accelY);</code></div> <div class=\"line\"><code class=\"plain\">win.add(accelZ);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">accelX.show();</code></div> <div class=\"line\"><code class=\"plain\">accelY.show();</code></div> <div class=\"line\"><code class=\"plain\">accelZ.show();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateAccelData (e) {</code></div> <div class=\"line\"><code class=\"plain\"> data = e.acceleration;</code></div> <div class=\"line\"><code class=\"plain\"> accelX.message = </code><code class=\"string\">&quot;X: &quot;</code><code class=\"plain\"> + data.x;</code></div> <div class=\"line\"><code class=\"plain\"> accelX.value = Math.abs(data.x);</code></div> <div class=\"line\"><code class=\"plain\"> accelY.message = </code><code class=\"string\">&quot;Y: &quot;</code><code class=\"plain\"> + data.y;</code></div> <div class=\"line\"><code class=\"plain\"> accelY.value = Math.abs(data.y);</code></div> <div class=\"line\"><code class=\"plain\"> accelZ.message = </code><code class=\"string\">&quot;Z: &quot;</code><code class=\"plain\"> + data.z;</code></div> <div class=\"line\"><code class=\"plain\"> accelZ.value = Math.abs(data.z);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Gyroscope\"> <h3 class=\"heading\"><span>Gyroscope</span></h3> <p>The gyroscope measures the instantaneous rotational rate of the device along each spatial axis. </p> <p>The Gyroscope API uses a <tt class=\"\">rotationRate</tt> dictionary to report the measurements of the device. The dictionary contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt class=\"\">z</tt>, which provides the rotational rates in radian along the X-, Y- and Z-axes, respectively. If you passed a callback to the <tt class=\"\">setGyroUpdates</tt> method, check the <tt>rotationRate</tt> property for these values. </p> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example.4\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The sample code below use the Gyroscope API to send rotation rate data at 1s intervals. The device displays the data on screen. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Gyroscope = CoreMotion.createGyroscope();</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Gyroscope.isGyroAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> Gyroscope.setGyroUpdateInterval(1000);</code></div> <div class=\"line\"><code class=\"plain\"> Gyroscope.startGyroUpdates(updateGyroData);</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\">\talert(</code><code class=\"string\">&quot;Device does not have an gyroscope.&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"plain\"> </code></div> <div class=\"line\"><code class=\"comments\">// GUI to display measurements</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({ backgroundColor: </code><code class=\"string\">&apos;white&apos;</code><code class=\"plain\">, layout: </code><code class=\"string\">&apos;vertical&apos;</code><code class=\"plain\"> });</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> progress_bar_args = {</code></div> <div class=\"line\"><code class=\"plain\"> max: 1,</code></div> <div class=\"line\"><code class=\"plain\"> min: 0,</code></div> <div class=\"line\"><code class=\"plain\"> value: 0,</code></div> <div class=\"line\"><code class=\"plain\"> width: 200,</code></div> <div class=\"line\"><code class=\"plain\"> top: 50\t</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> gyroX = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> gyroY = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> gyroZ = Ti.UI.createProgressBar(progress_bar_args);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.add(gyroX);</code></div> <div class=\"line\"><code class=\"plain\">win.add(gyroY);</code></div> <div class=\"line\"><code class=\"plain\">win.add(gyroZ);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">gyroX.show();</code></div> <div class=\"line\"><code class=\"plain\">gyroY.show();</code></div> <div class=\"line\"><code class=\"plain\">gyroZ.show();</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateGyroData (e) {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div> <div class=\"line\"><code class=\"plain\"> data = e.rotationRate;</code></div> <div class=\"line\"><code class=\"plain\"> gyroX.message = </code><code class=\"string\">&apos;X: &apos;</code><code class=\"plain\"> + data.x;</code></div> <div class=\"line\"><code class=\"plain\"> gyroX.value = Math.abs(data.x);</code></div> <div class=\"line\"><code class=\"plain\"> gyroY.message = </code><code class=\"string\">&apos;Y: &apos;</code><code class=\"plain\"> + data.y;</code></div> <div class=\"line\"><code class=\"plain\"> gyroY.value = Math.abs(data.y);</code></div> <div class=\"line\"><code class=\"plain\"> gyroZ.message = &apos;Z: &quot; + data.z;</code></div> <div class=\"line\"><code class=\"plain\"> gyroZ.value = Math.abs(data.z);</code></div> <div class=\"line\"><code class=\"plain\">\t} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.error(e.error);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> <p> </p> </div> </div> <div class=\"section section-3\" id=\"src-38928815_CoreMotionModule-Magnetometer\"> <h3 class=\"heading\"><span>Magnetometer</span></h3> <p>The magnetometer measures the strength and direction of magnetic fields along each spatial axis. </p> <p>The Magnetometer API uses a <tt class=\"\">magneticField</tt> dictionary to report the measurements of the device. The dictionary contains three properties: <tt class=\"\">x</tt>, <tt class=\"\">y</tt> and <tt class=\"\">z</tt>, which provides the magnetic field values in microteslas along the X-, Y- and Z-axes, respectively. If you passed a callback to the <tt class=\"\">setMagnetometerUpdates</tt> method, check the <tt>magnetField</tt> property for these values. </p> <div class=\"section section-4\" id=\"src-38928815_CoreMotionModule-Example.5\"> <h4 class=\"heading\"><span>Example</span></h4> <p>The sample code below uses the Magnetometer API to take magnetic field measurements. The user must manually press the button to update the data on the display. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CoreMotion = require(</code><code class=\"string\">&apos;ti.coremotion&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Magnetometer = CoreMotion.createMagnetometer();</code></div> <div class=\"line\"><code class=\"plain\">&#xA0;</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Magnetometer.isMagnetometerAvailable()) {</code></div> <div class=\"line\"><code class=\"plain\"> Magnetometer.startMagnetometerUpdates();</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> alert(</code><code class=\"string\">&quot;Device does not have a magnetometer.&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> win = Ti.UI.createWindow({backgroundColor: </code><code class=\"string\">&apos;white&apos;</code><code class=\"plain\">, layout: </code><code class=\"string\">&apos;vertical&apos;</code><code class=\"plain\">});</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> xMag = Ti.UI.createLabel({ text: </code><code class=\"string\">&apos;X: 0&apos;</code><code class=\"plain\">, top: 50 });</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> yMag = Ti.UI.createLabel({ text: </code><code class=\"string\">&apos;Y: 0&apos;</code><code class=\"plain\">, top: 50 });</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> zMag = Ti.UI.createLabel({ text: </code><code class=\"string\">&apos;Z: 0&apos;</code><code class=\"plain\">, top: 50 });</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> totalMag = Ti.UI.createLabel({ text: </code><code class=\"string\">&apos;TOTAL: 0&apos;</code><code class=\"plain\">, top: 50 });</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.add(xMag);</code></div> <div class=\"line\"><code class=\"plain\">win.add(yMag);</code></div> <div class=\"line\"><code class=\"plain\">win.add(zMag);</code></div> <div class=\"line\"><code class=\"plain\">win.add(totalMag);</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> button = Ti.UI.createButton({ title: </code><code class=\"string\">&quot;Update Values&quot;</code><code class=\"plain\">, top: 25 });</code></div> <div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">&apos;click&apos;</code><code class=\"plain\">, </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> updateMagnetometerData(Magnetometer.getMagnetometerData());</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\"><code class=\"plain\">win.add(button);</code></div> <div class=\"line\"><code class=\"keyword\">function</code><code class=\"plain\"> updateMagnetometerData (e) {</code></div> <div class=\"line\"><code class=\"plain\"> data = e.magneticField;</code></div> <div class=\"line\"><code class=\"plain\"> xMag.text = </code><code class=\"string\">&quot;X: &quot;</code><code class=\"plain\"> + data.x;</code></div> <div class=\"line\"><code class=\"plain\"> yMag.text = </code><code class=\"string\">&quot;Y: &quot;</code><code class=\"plain\"> + data.y;</code></div> <div class=\"line\"><code class=\"plain\"> zMag.text = </code><code class=\"string\">&quot;Z: &quot;</code><code class=\"plain\"> + data.z;</code></div> <div class=\"line\"><code class=\"plain\"> totalMag.text = </code><code class=\"string\">&quot;Total: &quot;</code><code class=\"plain\"> + Math.sqrt(data.x * data.x + data.y * data.y + data.z * data.z);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\">win.open();</code></div> </div> </div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=38928815\"><span>Edit</span></a> </div> </body> </html> ","title":"Core Motion Module"});