Ext.data.JsonP['Test_Best_Practices']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Test Best Practices</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"43298699\" class=\"content\">\n            <h1>Test Best Practices</h1>\n    <p>\n    </p>\n    <div class=\"confbox admonition admonition-warning aui-message problem shadowed information-macro\">\n            <div class=\"title\">Enterprise Subscription Required!</div>\n        \n    <p>\nThis Appcelerator Platform feature requires an Enterprise Subscription.    </p>\n    </div>\n    \n    <p>\n    </p>\n    <p>\n    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-AppActionLifeCycle\">App Action Life Cycle</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-DebuggingBestPractices\">Debugging Best Practices</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-CaptureascreenshotandXMLhierarchyforeveryfailedaction\">Capture a screenshot and XML hierarchy for every failed action</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-EnableHeadsUpDisplay\">Enable Heads Up Display</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Verifythatelementsarevisibleandpresent\">Verify that elements are visible and present</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Capturethetextcontentsofascreenelement\">Capture the text contents of a screen element</a>    </p>\n</li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-ClipBuildingBestPractices\">Clip Building Best Practices</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Managevariabletiming\">Manage variable timing</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Validationagainstelementsoutsidethescreen\">Validation against elements outside the screen</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Validations\">Validations</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Groupandnameactions\">Group and name actions</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Test_Best_Practices-section-43298699_TestBestPractices-Conditionaltesting\">Conditional testing</a>    </p>\n</li></ul></li></ul>    <div class=\"section section-2 \" id=\"43298699_TestBestPractices-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>\nThis Best Practices guide serves as a quick reference for handling common test clip and composition creation requirements.    </p>\n    <p>\nThis document provides an outline of the order of operations on mobile device events, which is very important to understand when you are creating and enhancing clips for use as repeatable functional test assets.    </p>\n    <p>\nSome operations require different approaches, depending on the application development framework. Because of the differences in application architecture, there is not always a &quot;one size fits all&quot; approach, and the tester must use techniques that leverage the appropriate infrastructure of the application.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43298699_TestBestPractices-AppActionLifeCycle\">\n        <h2 class=\"heading \"><span>App Action Life Cycle</span></h2>\n    <p>\nIt is critical to understand the order of events when an app action is triggered during replay. You must choose wisely when creating your validations or waits.    </p>\n    <p>\nThe sequence of events is:    </p>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-1.Pre-Waits\">\n        <h3 class=\"heading \"><span>1. Pre-Waits</span></h3>\n    <p>\nA Pre-Wait is a conditional statement that stops the action flow until the condition is met.    </p>\n    <p>\nUse pre-waits:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nTo verify that the app is in the right state to receive inputs, for example, to check that proper elements are displayed on the screen.    </p>\n</li><li class=\" \">    <p>\nTo verify that any backend calls are finalized and proper data is returned.    </p>\n</li></ul>    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-2.Inputs\">\n        <h3 class=\"heading \"><span>2. Inputs</span></h3>\n    <p>\nAny inputs required by the action are loaded. Inputs can be static, as recorded, or dynamic (from seed data or scripts). Mandatory inputs vary depending on the type of action (tap, pan, type, etc.)    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-3.Action\">\n        <h3 class=\"heading \"><span>3. Action</span></h3>\n    <p>\nAn Action (tap, pan, type, etc.) is sent to the device with the proper inputs.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-4.Post-Waits\">\n        <h3 class=\"heading \"><span>4. Post-Waits</span></h3>\n    <p>\nA Post-Wait is a conditional statement that stops the action flow until the condition is met. Implicit waits are automatically added as needed, such as <strong class=\" \">waitForViewChange</strong>, <strong class=\" \">waitForGestureComplete</strong>, etc.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-5.Output\">\n        <h3 class=\"heading \"><span>5. Output</span></h3>\n    <p>\nOutputs capture screen data, element properties, an XML hierarchy of the screen, etc., which are useful for tracing, debugging and reporting. A single action can have multiple outputs.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-6.Validation\">\n        <h3 class=\"heading \"><span>6. Validation</span></h3>\n    <p>\nValidations verify some content or an event occurred as expected, and have a corresponding failure action. Action validations can range from simple boolean conditions to more complex conditions. A single action can have multiple validations.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-7.PropertySets\">\n        <h3 class=\"heading \"><span>7. Property Sets</span></h3>\n    <p>\nProperty Sets provide the ability to take text or data from the mobile app that you are testing and store it in a custom property for use in a subsequent action. Use Property Sets to store the value of an input, the text inside of a view, or even complex values, such as the result of a JavaScript expression, for later use.    </p>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43298699_TestBestPractices-DebuggingBestPractices\">\n        <h2 class=\"heading \"><span>Debugging Best Practices</span></h2>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-CaptureascreenshotandXMLhierarchyforeveryfailedaction\">\n        <h3 class=\"heading \"><span>Capture a screenshot and XML hierarchy for every failed action</span></h3>\n    <p>\nFor debugging purposes, we recommend using the <strong class=\" \">outputXmlHierarchy</strong> and <strong class=\" \">captureScreenshot</strong> Outputs command for your application framework to output the XML source content of the screen, as well as capturing a screenshot, so that the tester can see the screen as the user would when the failure occurs. These commands collect extra information, which may significantly slow down a CIU build, as well as add a lot of storage overhead in the test results and consume more wireless network bandwidth. Use the <strong class=\" \">Only if there is an error</strong> checkbox to only capture this information when a failure occurs.    </p>\n    <p>\nYou can either add these commands individually to an action in your test case or at the Target level to capture the debugging information for every action within the clip.    </p>\n    <p>\nTo add an output command for an action in a test clip, after the action has been added to the clip:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick on the Outputs icon (magenta arrow).    </p>\n</li><li class=\" \">    <p>\nClick the Add icon (green plus sign) to create a new output command.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Command</strong> drop-down box, select either <strong class=\" \">captureScreenshot</strong> or <strong class=\" \">outputXmlHierarchy</strong>.    </p>\n</li><li class=\" \">    <p>\nEnable the <strong class=\" \">Only if there is an error</strong> checkbox.    </p>\n</li></ol>    <p>\nTo add the output command at the target level:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Central</strong> tab.    </p>\n</li><li class=\" \">    <p>\nIn the left navigation pane, click <strong class=\" \">Targets</strong>, which lists all targets (test device/test clip pair).    </p>\n</li><li class=\" \">    <p>\nLocate the test device/test clip pair you want to edit and double-click to open it in the <strong class=\" \">Target</strong> editor.    </p>\n</li><li class=\" \">    <p>\nUnder <strong class=\" \">Runtime Options</strong>, click <strong class=\" \">Command applied to every action</strong>.    </p>\n</li><li class=\" \">    <p>\nUnder the <strong class=\" \">Output</strong> sections in the main pane, click the Add icon (green plus sign) to create a new output command.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Command</strong> drop-down box, select either <strong class=\" \">captureScreenshot</strong> or <strong class=\" \">outputXmlHierarchy</strong>.    </p>\n</li><li class=\" \">    <p>\nEnable the <strong class=\" \">Only if there is an error</strong> checkbox.    </p>\n</li></ol>    <p>\n        <img src=\"images/download/attachments/43298699/worddav80771c669a63014bd447c5e4ffb8da1f.png\" alt=\"images/download/attachments/43298699/worddav80771c669a63014bd447c5e4ffb8da1f.png\" class=\"confluence-embedded-image\" width=\"589\"/>\n        <br/>After running a test clip in the <strong class=\" \">Composition</strong> editor, highlight the action for which you want to review the captured screen contents in the output for the specified step. Navigate in the result, expand the Output section, and scroll down to the panel containing the captured screen/element contents:<br/>        <img src=\"images/download/attachments/43298699/worddav5add0f20c280b5d2f5e0903b64e5cb33.png\" alt=\"images/download/attachments/43298699/worddav5add0f20c280b5d2f5e0903b64e5cb33.png\" class=\"confluence-embedded-image\" width=\"635\"/>\n        <br/><br/>For XML output content, you can copy and paste the content to your favorite editor to search the content for the information that you are looking for.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-EnableHeadsUpDisplay\">\n        <h3 class=\"heading \"><span>Enable Heads Up Display</span></h3>\n    <p>\nHeads Up Display (HUD) displays visual enhancements during playback. It shows semi-transparent dots and color-coded panels that display useful clip element details about user actions on the device screen while playback occurs.<br/>It can be set at the Target level, or it can be enabled inside a clip by dragging and dropping a <strong class=\" \">hudOn</strong> or <strong class=\" \">hudOff</strong> action anywhere in the clip:    </p>\n    <p>\nTo enable at the Target level:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Central</strong> tab.    </p>\n</li><li class=\" \">    <p>\nIn the left navigation pane, click <strong class=\" \">Targets</strong>, which lists all targets (test device/test clip pair).    </p>\n</li><li class=\" \">    <p>\nLocate the test device/test clip pair you want to edit and double-click to open it in the <strong class=\" \">Target</strong> editor.    </p>\n</li><li class=\" \">    <p>\nClick <strong class=\" \">Target Info</strong>.    </p>\n</li><li class=\" \">    <p>\nUnder the <strong class=\" \">Settings</strong> sections, enable the <strong class=\" \">Enable HUD</strong> checkbox.    </p>\n</li></ol>    <p>\n        <img src=\"images/download/attachments/43298699/worddav47e306be31527f819b81fb456134580e.png\" alt=\"images/download/attachments/43298699/worddav47e306be31527f819b81fb456134580e.png\" class=\"confluence-embedded-image\" width=\"636\"/>\n        <br/><br/><br/>To enable and disabe HUD in a test clip, open the clip in the <strong class=\" \">Test Clip</strong> editor, then:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Messages / Actions</strong> tab in the lower pane.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Actions</strong> section, locate either the <strong class=\" \">hudOn</strong> or the <strong class=\" \">hudOff</strong> action and drag-and-drop it to the main pane, with the list of test steps, where you want to enable or disable HUD.    </p>\n</li></ol>    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Verifythatelementsarevisibleandpresent\">\n        <h3 class=\"heading \"><span>Verify that elements are visible and present</span></h3>\n    <p>\nIn many of your clips you will want to tap on an element, validate that an element is visible, or wait for an element to be visible before performing any other step in the test. Sometimes you will get an error because the element is not present or visible.    </p>\n    <p>\nAn element can be present in the XML hierarchy but not visible on the screen. Use either the <strong class=\" \">verifyElementVisible</strong> Validation, or the <strong class=\" \">outputElementPresent</strong> or <strong class=\" \">outputElementVisible</strong> Output commands.    </p>\n<ul class=\" \"><li class=\" \">    <p>\nUse the appropriate output command to check whether the element is present.    </p>\n</li><li class=\" \">    <p>\nCapture a screenshot on that action to help assess if the locator is visible at this particular step in the test.    </p>\n</li><li class=\" \">    <p>\nOutput the screen source contents to help assess if the element exists in the current page source contents or not.    </p>\n</li><li class=\" \">    <p>\nReference the examples above, in the Debugging section of this document, for suggestions on the appropriate Commands to output the screen source contents.    </p>\n</li></ul>    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Capturethetextcontentsofascreenelement\">\n        <h3 class=\"heading \"><span>Capture the text contents of a screen element</span></h3>\n    <p>\nYou can capture a screen element's text, then review it in the test composition results and optionally save it for later use. There are a number of things that you can do with the captured text. It could be parsed with JavaScript, saved as an array of property values, or used in subsequent steps or a loop.    </p>\n    <p>\nTo capture text, use the <strong class=\" \">storeElementText</strong> or similar Property Sets command. You can either add the Property Sets to an existing action or add a <strong class=\" \">noOp</strong> action to add the Property Sets. While creating a test clip in the clip editor:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Messages / Actions</strong> tab in the lower pane.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Actions</strong> section, locate the <strong class=\" \">noOp</strong> action and drag-and-drop it to the main pane, with the list of test steps, where to capture text.    </p>\n</li><li class=\" \">    <p>\nClick the <strong class=\" \">Selected</strong> tab in the lower pane to edit the action.    </p>\n</li><li class=\" \">    <p>\nIn the lower pane, click on the <strong class=\" \">Property Sets</strong> icon (green checkmark).    </p>\n</li><li class=\" \">    <p>\nClick the <strong class=\" \">Add</strong> icon (green plus sign) to create a new property sets command.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Command</strong> drop-down, select <strong class=\" \">storeElementText</strong> or a similar command.    </p>\n</li><li class=\" \">    <p>\nNext to the <strong class=\" \">Locator</strong> textfield, click the Locator Tool icon. A blue border appears around your application.    </p>\n</li><li class=\" \">    <p>\nIn the application, click the element to capture text from. A textbox appears with several labels. Click the blue up arrow in the top-right corner of the box. The <strong class=\" \">Locator</strong> textfield populates with a value of the element.    </p>\n</li><li class=\" \">    <p>\nUse the <strong class=\" \">Property to set</strong> textbox to optionally save the text to a property. Click the ISSE Editor icon next to it to open the ISSE editor.    </p>\n</li><li class=\" \">    <p>\nIn the ISSE Editor, select either to save the text to a Target or Clip custom property or to save it to a property of a clip action. Note that you need to create a custom property before selecting it.    </p>\n</li></ol>    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43298699_TestBestPractices-ClipBuildingBestPractices\">\n        <h2 class=\"heading \"><span>Clip Building Best Practices</span></h2>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Managevariabletiming\">\n        <h3 class=\"heading \"><span>Manage variable timing</span></h3>\n    <p>\nWhen you transition between screens or perform a action, such as logging in to an account, the application might make a call to a backend server before proceeding. The response time of the backend may vary depending on many factors (network condition, volume on the server, etc.). You cannot rely on time delays for any wait actions.    </p>\n    <p>\nFor each screen transition, you must identify the right element(s) to wait on before proceeding with the following steps.<br/>There are two main scenarios when you transition from one screen to the next:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nYou know the exact page you are transitioning to and there is only one possible page. In this case, use the <strong class=\" \">waitForElementVisible</strong> Pre-Action Wait command on the next action to wait for an element in the next page.    </p>\n</li><li class=\" \">    <p>\nYou do <u class=\" \">NOT</u> know what page is next and there is more than one possible page. In this case, use the <strong class=\" \">waitForNotElementVisible</strong> Post-Action Wait command for an element on the current screen to wait until that element disappears from the screen.    </p>\n</li></ol>    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Validationagainstelementsoutsidethescreen\">\n        <h3 class=\"heading \"><span>Validation against elements outside the screen</span></h3>\n    <p>\nOnly elements that are displayed on the screen are part of the XML hierarchy. Elements that are <u class=\" \">NOT</u> displayed on the screen are <u class=\" \">NOT</u> part of the XML hierarchy and cannot be used with the validation or wait commands unless you scroll down to make them visible.    </p>\n    <p>\nUse the <strong class=\" \">scrollToVisible</strong> action to scroll until the view and element you specify are visible on the screen. If the element never becomes visible, the <strong class=\" \">scrollToVisible</strong> action scrolls until the bottom of the screen is reached, marks the action as a non-fatal failure, and will not log a failure against the composition, so the <strong class=\" \">scrollToVisible</strong> action does not guarantee that the element is visible after that action is completed    </p>\n    <p>\nTo add the <strong class=\" \">scrollToVisible</strong> action to a test clip, while creating the test clip in the <strong class=\" \">Test Clip</strong> editor:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Messages / Actions</strong> tab in the lower pane.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Actions</strong> section, locate <strong class=\" \">scrollToVisible</strong> action and drag-and-drop it to the main pane, with the list of test steps, where you want to scroll.    </p>\n</li><li class=\" \">    <p>\nClick the <strong class=\" \">Selected</strong> tab in the lower pane to edit the action.    </p>\n</li><li class=\" \">    <p>\nNext to the <strong class=\" \">Scroll View</strong><strong class=\" \">Locator</strong> textfield, click the Locator Tool icon. A blue border appears around your application.    </p>\n</li><li class=\" \">    <p>\nIn the application, click the view to scroll. A textbox appears with several labels. Click the blue up arrow in the top-right corner of the box. The textfield populates with a value of the view, such as 'classname=UITableView'.    </p>\n</li><li class=\" \">    <p>\nNext to the <strong class=\" \">Element</strong><strong class=\" \">Locator</strong> textfield, click the Locator Tool icon. A blue border appears around your application.    </p>\n</li><li class=\" \">    <p>\nIn the application, click the element you want to scroll to scroll. A textbox appears with several labels. Click the blue up arrow in the top-right corner of the box. The textfield populates with a value of the element, such as 'classname=UILabel' or 'text=&quot;Row X&quot;'.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Scroll Direction</strong> drop-down, select to either scroll up or down.    </p>\n</li></ol>    <p>\n    </p>\n    <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n        \n    <p>\nYou may need to manually enter the Scroll View Locator if the scroll view uses the entire screen.    </p>\n    </div>\n    \n    <p>\n        <img src=\"images/download/attachments/43298699/worddavfa01951a80e64f744137b5faa3ae1470.png\" alt=\"images/download/attachments/43298699/worddavfa01951a80e64f744137b5faa3ae1470.png\" class=\"confluence-embedded-image\" width=\"625\"/>\n            </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Validations\">\n        <h3 class=\"heading \"><span>Validations</span></h3>\n    <p>\nAs a general rule, the validations (particularly those associated with specific test case requirements) should always be in separate actions in the clip to make it easier to identify their location and check their status.    </p>\n    <p>\nAdd a <strong class=\" \">noOp</strong> (No Operation) action to the location where you want to perform the validation(s), then rename the action to something meaningful (such as a test requirement step/validation identifier) and add the appropriate validation action(s):    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Messages / Actions</strong> tab in the lower pane.    </p>\n</li><li class=\" \">    <p>\nIn the <strong class=\" \">Actions</strong> section, locate the <strong class=\" \">noOp</strong> action and drag-and-drop it to the main pane, with the list of test steps, where to perform a validation.    </p>\n</li><li class=\" \">    <p>\nClick the <strong class=\" \">Selected</strong> tab in the lower pane to edit the action.    </p>\n</li><li class=\" \">    <p>\nIn the lower pane, click on the <strong class=\" \">Validations</strong> icon (green checkmark).    </p>\n</li><li class=\" \">    <p>\nClick the Add icon (green plus sign) to create a new validation.    </p>\n</li></ol>    <p>\n        <img src=\"images/download/attachments/43298699/worddav42620e7ca5e85aba8f01e8cfbf457be3.png\" alt=\"images/download/attachments/43298699/worddav42620e7ca5e85aba8f01e8cfbf457be3.png\" class=\"confluence-embedded-image\" width=\"491\"/>\n            </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Groupandnameactions\">\n        <h3 class=\"heading \"><span>Group and name actions</span></h3>\n    <p>\nThe actions inside a clip can be named and grouped in a logical manner to make it more readable. To name a action, click the action's name label to make it editable and enter a new name for the action.    </p>\n    <p>\nTo group actions together:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nClick the <strong class=\" \">Add New Clip Element</strong> button.    </p>\n</li><li class=\" \">    <p>\nSelect <strong class=\" \">Add a New Group</strong>. A new group appears.    </p>\n</li><li class=\" \">    <p>\nDrag-and-drop actions into the group.    </p>\n</li><li class=\" \">    <p>\nClick the name label of the group to make it editable and enter a name for the group.    </p>\n</li></ol>    <p>\nIn this example, actions are named and separated into two groups: &quot;Environment Selection&quot; and &quot;Login&quot;.<br/>        <img src=\"images/download/attachments/43298699/worddavde6deb1e3fa8cbe117d96d2ebce7c12b.png\" alt=\"images/download/attachments/43298699/worddavde6deb1e3fa8cbe117d96d2ebce7c12b.png\" class=\"confluence-embedded-image\" width=\"488\"/>\n            </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43298699_TestBestPractices-Conditionaltesting\">\n        <h3 class=\"heading \"><span>Conditional testing</span></h3>\n    <p>\nOften a test needs to branch its execution based on various conditions. For example, on startup an application may display a login form that needs to be submitted for the test to continue. For a test to do this, it first needs to determine if the login screen is being displayed and, if so, tap the Login button.    </p>\n    <p>\nYou use an <a class=\"external-link external-link\" href=\"http://cloudlink.soasta.com/t5/Knowledge-Base/Creating-If-Then-Else/ba-p/684\" target=\"_blank\">If-Then-Else</a> clip element for this purpose. It checks for a condition and, if the condition is true, executes its &quot;then&quot; block statements. You can optionally add an &quot;else&quot; clause whose statements are executed if the condition is not met. The following steps demonstrate how to use an If-Then-Else clip to test for the presence of an application's login screen. If its determined the login screen is being displayed, the the login button is tapped.    </p>\n    <p>\n        <img src=\"images/download/attachments/43298699/login-screen.png\" alt=\"images/download/attachments/43298699/login-screen.png\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"320\"/>\n        </p>\n    <p>\nLocating a UI element on the screen is accomplished with two Test components: Accessors and Locators. An accessor is an action that returns a value&ndash;in this case a reference to an on-screen UI element. A locator is a string you pass to the accessor identifying the UI element you want to access. Locators can <a class=\"external-link external-link\" href=\"http://cloudlink.soasta.com/t5/Knowledge-Base/TouchTest-Location-Strategies/ba-p/8768\" target=\"_blank\">take several forms</a>, such as a text string, an XPath expression, or runtime class name, to name a few.    </p>\n    <p>\n<strong class=\" \">To use an If-Then-Else clip element</strong>:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nIn the Clip Editor, select <strong class=\" \">Add an If-Then-Else</strong> from the <strong class=\" \">Add New Clip Element</strong> menu.    </p>\n        <img src=\"images/download/attachments/43298699/image2014-1-20_15_24_45.png\" alt=\"images/download/attachments/43298699/image2014-1-20_15_24_45.png\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"318\"/>\n        </li><li class=\" \">    <p>\nIn the new clip element, select the <strong class=\" \">Accessor</strong> conditional type. An accessor makes an action&rsquo;s return value usable&mdash;as a simple output, something to wait on, validate, or to use in a property set.    </p>\n        <img src=\"images/download/attachments/43298699/image2014-1-20_16_2_48.png\" alt=\"images/download/attachments/43298699/image2014-1-20_16_2_48.png\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"199\"/>\n        </li><li class=\" \">    <p>\nSelect <strong class=\" \">isElementPresent</strong> from the Accessor type menu and in the <strong class=\" \">Locator</strong> field enter <strong class=\" \">text=Please login</strong>. This corresponds to the text on the login screen of the test application (shown above).    </p>\n        <img src=\"images/download/attachments/43298699/image2014-1-20_21_4_18.png\" alt=\"images/download/attachments/43298699/image2014-1-20_21_4_18.png\" class=\"confluence-embedded-image\"/>\n            <p>\nIf the <tt class=\" \">isElementPresent</tt> accessor is located, we want to add an action to tap the Login button.    </p>\n</li><li class=\" \">    <p>\nDrag a <strong class=\" \">Tap</strong> action from the <strong class=\" \">Messages/Actions</strong> pane at the bottom of the screen and drop it inside the <strong class=\" \">THEN</strong> block.    </p>\n        <img src=\"images/download/attachments/43298699/image2014-1-20_20_28_48.png\" alt=\"images/download/attachments/43298699/image2014-1-20_20_28_48.png\" class=\"confluence-embedded-image\"/>\n            <p>\n    </p>\n</li><li class=\" \">    <p>\nExpand the Tap input action and enter <strong class=\" \">text=Login</strong> in the Locator input. This identifes the button to tap.    </p>\n        <img src=\"images/download/attachments/43298699/tap-it.png\" alt=\"images/download/attachments/43298699/tap-it.png\" class=\"confluence-embedded-image\"/>\n        </li><li class=\" \">    <p>\nSave the clip.    </p>\n</li><li class=\" \">    <p>\nTo add an <strong class=\" \">Else</strong> clause, click the add button (        <img src=\"images/download/attachments/43298699/image2014-1-20_17_26_30.png\" alt=\"images/download/attachments/43298699/image2014-1-20_17_26_30.png\" class=\"confluence-embedded-image\"/>\n    ) on the far right of the <strong class=\" \">Then</strong> row. You can then add clip elements or actions to execute if the tested condition is not true.<br/>        <img src=\"images/download/attachments/43298699/then_row.png\" alt=\"images/download/attachments/43298699/then_row.png\" class=\"confluence-embedded-image\"/>\n        </p>\n</li></ol>    <p>\nYou can also create an If-Then-Else clip from an existing action, as opposed to dragging a Tap action from the Message/Actions tab. This technique is useful, for example, when you've recorded a test and later edit the test to include the If-Then-Else clip.    </p>\n    <p>\n<strong class=\" \">To wrap an existing clip element in an If-Then-Else clip</strong>:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nRight-click on the clip action you want execute conditionally (in this case, an App Action that performs a Tap).    </p>\n</li><li class=\" \">    <p>\nSelec <strong class=\" \">Create an If-Then-Else</strong> from the context menu.    </p>\n        <img src=\"images/download/attachments/43298699/if-else-right-click.png\" alt=\"images/download/attachments/43298699/if-else-right-click.png\" class=\"confluence-embedded-image\"/>\n        </li></ol>    <p>\nThe App Action is automatically wrapped in an If-Then-Else statement.    </p>\n    <p>\n        <img src=\"images/download/attachments/43298699/image2014-1-21_13_47_56.png\" alt=\"images/download/attachments/43298699/image2014-1-21_13_47_56.png\" class=\"confluence-embedded-image\"/>\n            </p>\n    <p>\n<strong class=\" \">See also (from the Soasta Knowledge Base):</strong>    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<a class=\"external-link external-link\" href=\"http://cloudlink.soasta.com/t5/Knowledge-Base/Creating-If-Then-Else/ba-p/684\" target=\"_blank\">Creating If-Then-Else</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"external-link external-link\" href=\"http://cloudlink.soasta.com/t5/Knowledge-Base/TouchTest-Location-Strategies/ba-p/8768\" target=\"_blank\">TouchTest Location Strategies</a>    </p>\n</li></ul>    </div>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43298699\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"Test Best Practices"});