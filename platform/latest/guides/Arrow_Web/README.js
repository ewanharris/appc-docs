Ext.data.JsonP['Arrow_Web']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Arrow Web</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"43299023\" class=\"content\">\n            <h1>Arrow Web</h1>\n    <p>\n    </p>\n    <div class=\"confbox admonition admonition-warning aui-message problem shadowed information-macro\">\n            <div class=\"title\">Team Subscription Required!</div>\n        \n    <p>\nThis Appcelerator Platform feature requires a Team Subscription.    </p>\n    </div>\n    \n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-RouteDefinition\">Route Definition</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-RendererEngines\">Renderer Engines</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-Pre-BuiltRendererEngines\">Pre-Built Renderer Engines</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-CustomRendererEngines\">Custom Renderer Engines</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-HandlebarsPartialsandHelpers\">Handlebars Partials and Helpers</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-Helpers\">Helpers</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-Partials\">Partials</a>    </p>\n</li></ul></li></ul></li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Arrow_Web-section-43299023_ArrowWeb-Example\">Example</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"43299023_ArrowWeb-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>\nThis guide covers the basics for creating Arrow Web interfaces.  An Arrow Web interface is a custom endpoint that renders HTML content to a client application.  An Arrow Web interface is made up of:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nassets (images, CSS, HTML and JavaScript files) located in the <tt class=\" \">web/public</tt> folder    </p>\n</li><li class=\" \">    <p>\ntemplates (EJS, Handelbars, Markdown or ReactJS) located in the <tt class=\" \">web/views</tt> folder    </p>\n</li><li class=\" \">    <p>\nArrow Routes (endpoint definitions) located in the <tt class=\" \">web/routes</tt> folder    </p>\n</li></ul>    <p>\nYou can create custom logic in your Arrow Routes, which can internally access your application's models and APIs.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"43299023_ArrowWeb-RouteDefinition\">\n        <h2 class=\"heading \"><span>Route Definition</span></h2>\n    <p>\nPlace all Arrow Route definition files in the project's <tt class=\" \">web/routes</tt> folder.  You can only declare one endpoint definition per file.  An Arrow Route definition file is a JavaScript file, which:    </p>\n<ol class=\" \"><li class=\" \">    <p>\nLoads the <tt class=\" \">arrow</tt> module    </p>\n</li><li class=\" \">    <p>\nCalls the module's <tt class=\" \">Router.extend()</tt> method, passing in an object defining the API endpoint and logic    </p>\n</li><li class=\" \">    <p>\nExports the defined endpoint using the <tt class=\" \">module.exports</tt> variable    </p>\n</li></ol>    <p>\nSet the following keys in the object passed to the <tt class=\" \">Router.extend()</tt> method to define the API endpoint:    </p>\n    <div class=\"tablewrap\">\n        <table class=\"confluenceTable\">\n        <thead class=\" \">    <tr>\n            <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>\nName    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>\nRequired    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>\nDescription    </p>\n            </td>\n        </tr>\n</thead><tfoot class=\" \"/><tbody class=\" \">    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nname    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ntrue    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nThe name of your route.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\npath    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ntrue    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nThe endpoint/path for your route    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nmethod    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ntrue    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nHTTP verb (&lsquo;GET&rsquo;, &lsquo;POST&rsquo;, &lsquo;PUT&rsquo;, or &lsquo;DELETE&rsquo;).    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ndescription    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ntrue    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nA description for your route. This is used for documentation purposes.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\naction    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\ntrue    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nFunction that allows you to interact with Arrow APIs and Models and send data to your template engine. The function is passed a request, response and next callback. Call the response object's <a class=\"external-link external-link\" href=\"http://expressjs.com/4x/api.html#res.render\" target=\"_blank\"><tt class=\" \">render()</tt> </a> method to send HTML back to the client, then call the next callback.    </p>\n            </td>\n        </tr>\n</tbody>        </table>\n            </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43299023_ArrowWeb-RendererEngines\">\n        <h2 class=\"heading \"><span>Renderer Engines</span></h2>\n    <p>\nA renderer engine renders data (or locals in the Express framework) to the view (template file).  Arrow provide a few renderer engines and allows you to add your own custom renderer engines.    </p>\n    <div class=\"section section-3 \" id=\"43299023_ArrowWeb-Pre-BuiltRendererEngines\">\n        <h3 class=\"heading \"><span>Pre-Built Renderer Engines</span></h3>\n    <p>\nArrow Web supports the EJS, Handlebars, Markdown and ReactJS renderer engines.  Place all template files with the appropriate extension in the <tt class=\" \">web/templates</tt> folder.    </p>\n    <div class=\"tablewrap\">\n        <table class=\"confluenceTable\">\n        <thead class=\" \">    <tr>\n            <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>\nRenderer Engine    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>\nFile Extension    </p>\n            </td>\n        </tr>\n</thead><tfoot class=\" \"/><tbody class=\" \">    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nEJS    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\n.ejs    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nHandlebars    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\n.hbs    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nMarkdown    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\n.md    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\nReactJS    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>\n.jsx    </p>\n            </td>\n        </tr>\n</tbody>        </table>\n            </div>\n    <p>\nTo use a template in the Arrow Route's logic, reference its filename without the extension.  Because the template is referenced using the filename, you cannot have the same filename with multiple extensions.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43299023_ArrowWeb-CustomRendererEngines\">\n        <h3 class=\"heading \"><span>Custom Renderer Engines</span></h3>\n    <p>\nTo create a custom renderer engine you need to create an renderer engine and register it with the Arrow instance's middleware instance.    </p>\n<ol class=\" \"><li class=\" \">    <p>\nCreate an object that implements the <tt class=\" \">createRenderer()</tt> method and specifies the <tt class=\" \">extension</tt> property.    </p>\n</li><li class=\" \">    <p>\nPass the object to the Middleware instance's <tt class=\" \">registerRendererEngine()</tt> method.  You can retrieve a Middleware instance by using the <tt class=\" \">middleware</tt> property of the Arrow instance.    </p>\n</li></ol>    <p>\nFor example, to implement a renderer engine for Jade templates:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var jade = require(</code><code class=\"string\">'jade'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    engine = {};</code></div>\n<div class=\"line\"><code class=\"plain\">engine.jade = jade;</code></div>\n<div class=\"line\"><code class=\"plain\">engine.createRenderer = function (content, filename, app) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> function(filename, opts, callback) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">if</code><code class=\"plain\"> (!content) {</code></div>\n<div class=\"line\"><code class=\"plain\">            content = require(</code><code class=\"string\">'fs'</code><code class=\"plain\">).readFileSync(filename, </code><code class=\"string\">'utf8'</code><code class=\"plain\">).toString();</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">        callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, jade.render(content, opts));</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">engine.extension = </code><code class=\"string\">'jade'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"comments\">// server is an Arrow instance</code></div>\n<div class=\"line\"><code class=\"plain\">server.middleware.registerRendererEngine(engine);</code></div>\n</div>\n</div>    <p>\n    <span style=\"color: #222222;\">\nAny view with a     </span>\n<tt class=\" \">jade</tt>    <span style=\"color: #222222;\">\n extension will be routed to the Jade renderer engine.    </span>\n    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"43299023_ArrowWeb-HandlebarsPartialsandHelpers\">\n        <h3 class=\"heading \"><span>Handlebars Partials and Helpers</span></h3>\n    <p>\nArrow exposes some APIs to allow your to register Handlebar partials or helpers.    </p>\n    <div class=\"section section-4 \" id=\"43299023_ArrowWeb-Helpers\">\n        <h4 class=\"heading \"><span>Helpers</span></h4>\n    <p>\nHelpers are functions that you can evaluate in your Handlebar templates.  To use a helper, register the helper with the Handlebar renderer engine, then in the template, call the helper using the name you gave the helper when registering it.    </p>\n<ol class=\" \"><li class=\" \">    <p>\nGet a reference to the Handlebar renderer engine using the <tt class=\" \">Arrow.Middleware.getRendererEngine('hbs')</tt> method.    </p>\n</li><li class=\" \">    <p>\nCall either the Handlebar renderer engine's <tt class=\" \">registerHelper()</tt> to register a helper function.  Pass the method the name of the helper and the function to invoke.    </p>\n</li></ol><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">'arrow'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    hbs = Arrow.Middleware.getRendererEngine(</code><code class=\"string\">'hbs'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">hbs.registerHelper(</code><code class=\"string\">'doFoo'</code><code class=\"plain\">, function(foo) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// this.name references the name parameter passed to the template</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// in the render call, that is, res.render('template', {name: 'Joe'});</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">if</code><code class=\"plain\"> (foo) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.name + </code><code class=\"string\">' is great!'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.name + </code><code class=\"string\">' is ok.'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n</div>\n</div>    <p>\n<strong class=\" \">Template Example:</strong>    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;div&gt;doFoo(</code><code class=\"keyword\">true</code><code class=\"plain\">)&lt;/div&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;div&gt;doFoo(</code><code class=\"keyword\">false</code><code class=\"plain\">)&lt;/div&gt;</code></div>\n</div>\n</div>    <p>\n    </p>\n    </div>\n    <div class=\"section section-4 \" id=\"43299023_ArrowWeb-Partials\">\n        <h4 class=\"heading \"><span>Partials</span></h4>\n    <p>\nPartials are subviews that you can embed in a template.  To use a partial, you need to register it with the Handlebar renderer engine, then reference the partial in the template using the <tt class=\" \">{{&gt; partialName}}</tt> syntax, where <tt class=\" \">partialName</tt> is the name you gave the partial when you registered it.    </p>\n<ol class=\" \"><li class=\" \">    <p>\nGet a reference to the Handlebar renderer engine using the <tt class=\" \">Arrow.Middleware.getRendererEngine('hbs')</tt> method.    </p>\n</li><li class=\" \">    <p>\nCall either the Handlebar renderer engine's <tt class=\" \">registerPartial()</tt> to register a partial file.  Pass the method the name of the partial and the template file to use as a partial.    </p>\n</li></ol><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">'arrow'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    hbs = Arrow.Middleware.getRendererEngine(</code><code class=\"string\">'hbs'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">hbs.registerPartial(</code><code class=\"string\">'fooView'</code><code class=\"plain\">, </code><code class=\"string\">'web/views/foo.hbs'</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\n<strong class=\" \">Template Example:</strong>    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;!-- Partial web/views/foo.hbs --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- id and name are passed as data to the res.render() method --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;a href=</code><code class=\"string\">\"/people/{{id}}\"</code><code class=\"plain\">&gt;{{name}}&lt;/a&gt;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- Main Template web/views/main.hbs --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;ul&gt;{{#people}}&lt;li&gt;{{&gt; fooView}}&lt;/li&gt;{{/people}}&lt;/ul&gt;</code></div>\n</div>\n</div>    </div>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"43299023_ArrowWeb-Example\">\n        <h2 class=\"heading \"><span>Example</span></h2>\n    <p>\nThe following Route file defines an endpoint the client can access using <tt class=\" \">GET &lt;SERVER_ADDRESS&gt;/car</tt>.  When accessed, the application retrieves all car models and renders them using the <tt class=\" \">web/views/car.hbs</tt> template.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">web/routes/car.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">'arrow'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var TestRoute = Arrow.Router.extend({</code></div>\n<div class=\"line\"><code class=\"plain\">    name: </code><code class=\"string\">'car'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    path: </code><code class=\"string\">'/car'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    method: </code><code class=\"string\">'GET'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    description: </code><code class=\"string\">'get some cars'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    action: function (req, res, next) {</code></div>\n<div class=\"line\"><code class=\"plain\">        req.server.getModel(</code><code class=\"string\">'car'</code><code class=\"plain\">).findAll(function(err, results) {</code></div>\n<div class=\"line\"><code class=\"plain\">            </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div>\n<div class=\"line\"><code class=\"plain\">                next(err);</code></div>\n<div class=\"line\"><code class=\"plain\">            } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">                req.logger.info(</code><code class=\"string\">'got cars '</code><code class=\"plain\"> + JSON.stringify(results));</code></div>\n<div class=\"line\"><code class=\"plain\">                res.render(</code><code class=\"string\">'car'</code><code class=\"plain\">, results);</code></div>\n<div class=\"line\"><code class=\"plain\">                next(</code><code class=\"keyword\">null</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">            }</code></div>\n<div class=\"line\"><code class=\"plain\">        });</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">module.exports = TestRoute;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">web/views/car.hbs</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;html&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;head&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/head&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;body&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    {{#each cars}}</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;div&gt;{{make}} {{model}} {{year}}&lt;/div&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    {{/each}}</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/body&gt;    </code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/html&gt; </code></div>\n</div>\n</div>    <p>\n    </p>\n    <p>\n    </p>\n    <p>\n    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43299023\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"Arrow Web"});