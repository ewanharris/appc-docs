Ext.data.JsonP['Windows_Module_Architecture']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Windows Module Architecture</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\"/>\n\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\"/>\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\"/>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"46248454\" class=\"content\">\n            <h1>Windows Module Architecture</h1>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-Module\">Module</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-ModuleLifecycleEvents\">Module Lifecycle Events</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-Methods\">Methods</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-Properties\">Properties</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-HandlingEvents\">Handling Events</a>    </p>\n</li><li class=\" \">    <p>\n<a class=\"document-link \" href=\"#!/guide/Windows_Module_Architecture-section-46248454_WindowsModuleArchitecture-MoreExamples\">More Examples</a>    </p>\n</li></ul></li></ul>    <div class=\"section section-2 \" id=\"46248454_WindowsModuleArchitecture-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>\nThe Titanium SDK is based on a modular architecture, which can be utilized to extend the SDK by building modules.  The module architecture contains the following key interface components:    </p>\n<ul class=\" \"><li class=\" \">    <p>\n<strong class=\" \"><i class=\" \">Module</i></strong>: A base class that represents the native binding between your JavaScript code and native code    </p>\n</li><li class=\" \">    <p>\n<strong class=\" \"><i class=\" \">View</i></strong>: The visual representation of a UI component which Titanium can render    </p>\n</li></ul>    <p>\nTo return <u class=\" \">visual</u> data between JavaScript and native code, create a View. The View represents is responsible for exposing the APIs and events that the View supports.    </p>\n    <p>\nTo return <u class=\" \">non-visual</u> data between JavaScript and native code, create a Module. The Module knows how to handle any method and property, and dispatching and firing events.    </p>\n    <p>\nThese components require special class names and method signatures.  Each components is described in further detail below.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"46248454_WindowsModuleArchitecture-Module\">\n        <h2 class=\"heading \"><span>Module</span></h2>\n    <p>\nA Module is a class that provides an API point with a particular ID. That ID can then be used to <tt class=\" \">require</tt> the module from JavaScript.    </p>\n    <p>\nAll modules must extend the <tt class=\" \">Titanium::Module</tt> and <tt class=\" \">JSExport</tt> class .    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"Titanium/Module.hpp\"</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\nModule constructor should call <tt class=\" \">Titanium::Module</tt> constructor with module id that specifies the identifier used with <tt class=\" \">require</tt> to import the module.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"ComExampleTest.hpp\"</code></div>\n<div class=\"line\"><code class=\"plain\">Test::Test(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context) TITANIUM_NOEXCEPT</code></div>\n<div class=\"line\"><code class=\"plain\">    : Titanium::Module(js_context, </code><code class=\"string\">\"com.example.test\"</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nIn this case, the JavaScript to require the module would look like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var test = require(</code><code class=\"string\">\"com.example.test\"</code><code class=\"plain\">);</code></div>\n</div>\n</div>    <p>\nA module can also have a parent module: for instance <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/UIModule.java\" target=\"_blank\">Titanium.UI</a> and <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/app/src/java/ti/modules/titanium/app/AppModule.java\" target=\"_blank\">Titanium.App</a> are children of the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/ti/modules/titanium/TitaniumModule.java\" target=\"_blank\">Titanium</a> module.    </p>\n    <div class=\"section section-3 \" id=\"46248454_WindowsModuleArchitecture-ModuleLifecycleEvents\">\n        <h3 class=\"heading \"><span>Module Lifecycle Events</span></h3>\n    <p>\nThe module provides several places for you to hook into the application's lifecycle.    </p>\n    <p class=\"line\">\nUse <tt class=\" \">postInitialize</tt> method to declare a method to be called when the module object is created. This is optional and is only required if you have any module specific initialization, such as initializing variables that is required by the module. This method is called after module object initialization. This method could be called multiple times, <i class=\" \">after</i> your module object is actually created, and <i class=\" \">before</i> module is called as a constructor.    </p>\n    <p>\nDeclare <tt class=\" \">postInitialize</tt> with <tt class=\" \">override</tt> specifier in the header:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"Titanium/Module.hpp\"</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> postInitialize(JSObject&amp; js_object) override;</code></div>\n<div class=\"line\"><code class=\"plain\">    ....</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\nOverride <tt class=\" \">postInitialize</tt> in the implementation:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> Test::postInitialize(JSObject&amp; js_object)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// This is called when JavaScript object is created for this module.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Could be called multiple times, after module object is actually created, and before module is called as a constructor.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// For example:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// var Test = require('com.example.test'); // &lt;- postInitialize</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// var test = new Test(); // &lt;- postInitialize</code></div>\n<div class=\"line\"><code class=\"plain\"> }</code></div>\n</div>\n</div>    <p class=\"c1\">\nIf you only need to hook JavaScript constructor, use <tt class=\" \">postCallAsConstructor</tt> method to declare a method to be called when the module constructor is called. This is optional and is only required if you have any module instance specific initialization, such as initializing variables that is required by the instance. This method is called during module constructor. This method is called only once <i class=\" \">after</i> module is called as a constructor.    </p>\n    <p>\nDeclare <tt class=\" \">postCallAsConstructor</tt> with <tt class=\" \">override</tt> specifier in the header:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"Titanium/Module.hpp\"</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> postCallAsConstructor(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context, </code><code class=\"keyword\">const</code><code class=\"plain\"> std::vector&lt;JSValue&gt;&amp; arguments) override;</code></div>\n<div class=\"line\"><code class=\"plain\">    ....</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div>    <p>\nOverride <tt class=\" \">postCallAsConstructor</tt> in the implementation. Note that the arguments that is given to the constructor are passed as <tt class=\" \">arguments</tt> parameter.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> Test::postCallAsConstructor(</code><code class=\"keyword\">const</code><code class=\"plain\"> JSContext&amp; js_context, </code><code class=\"keyword\">const</code><code class=\"plain\"> std::vector&lt;JSValue&gt;&amp; arguments)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// This is called when JavaScript object is created as a constructor.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// This method is called only once after module is called as a constructor.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// For example:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// var TEST = require('com.example.test'); // &lt;- postInitialize</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// var test = new Test(); // &lt;- postInitialize, callAsConstructor</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"46248454_WindowsModuleArchitecture-Methods\">\n        <h3 class=\"heading \"><span>Methods</span></h3>\n    <p>\nMethods are exposed via <tt class=\" \">TITANIUM_ADD_FUNCTION</tt> and <tt class=\" \">TITANIUM_FUNCTION_DEF</tt> C++ macro.    </p>\n    <p>\nFirst, declare method using <tt class=\" \">TITANIUM_FUNCTION_DEF</tt> in header:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"Titanium/Module.hpp\"</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\">    TITANIUM_FUNCTION_DEF(example);</code></div>\n<div class=\"line\"><code class=\"plain\">    ....</code></div>\n<div class=\"line\"><code class=\"plain\"> };</code></div>\n</div>\n</div>    <p>\nSecond, implement <tt class=\" \">example</tt> method with <tt class=\" \">TITANIUM_FUNCTION</tt> and then register in <tt class=\" \">JSExportInitialize</tt> with <tt class=\" \">TITANIUM_ADD_FUNCTION</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> Test::JSExportInitialize()</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    JSExport&lt;Test&gt;::SetClassVersion(1);</code></div>\n<div class=\"line\"><code class=\"plain\">    JSExport&lt;Test&gt;::SetParent(JSExport&lt;Titanium::Module&gt;::Class());</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// register example method so we can use it from JavaScript</code></div>\n<div class=\"line\"><code class=\"plain\">    TITANIUM_ADD_FUNCTION(Test, example);</code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">TITANIUM_FUNCTION(Test, example)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// example method</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// There are variables expanded from TITANIUM_FUNCTION macro here:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//     std::vector&lt;JSValue&gt; arguments ... list of arguments that is passed to this function</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//     JSObject this_object           ... \"this\" JavaScript object</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Example: </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//    # Get first argument and convert to std::string</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      auto _0 = static_cast&lt;std::string&gt;(arguments.at(0));    </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//    # Get first argument and convert to double</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      auto _0 = static_cast&lt;double&gt;(arguments.at(0));    </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//    # Get first argument and convert to std::uint32_t</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      auto _0 = static_cast&lt;std::uint32_t&gt;(arguments.at(0));    </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//   Function should return JSValue.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//   For more information on how to use JSContext / JSValue / JSObject, check out HAL:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      https://github.com/appcelerator/HAL</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateString(</code><code class=\"string\">\"hello world\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nThere are variables expanded from <tt class=\" \">TITANIUM_FUNCTION</tt> macro here: <tt class=\" \">arguments</tt> as <tt class=\" \">std::vector&lt;JSValue&gt;</tt>, and <tt class=\" \">this_object</tt> as <tt class=\" \">JSObject</tt>.Titanium provides several ways for typecasting incoming values to a specific type and extracting them from the array that can be used with <tt class=\" \">TITANIUM_FUNCTION</tt>. For instance you can find <tt class=\" \">ENSURE_XXX_AT_INDEX</tt> for typecasting, that is defined in <tt class=\" \">Titanium/detail/TiImpl.hpp.</tt>    </p>\n<ul class=\" \"><li class=\" \">    <p>\nENSURE_INT_AT_INDEX(OUT, INDEX)    </p>\n</li><li class=\" \">    <p>\nENSURE_UINT_AT_INDEX(OUT, INDEX)    </p>\n</li><li class=\" \">    <p>\nENSURE_DOUBLE_AT_INDEX(OUT, INDEX)    </p>\n</li><li class=\" \">    <p>\nENSURE_BOOL_AT_INDEX(OUT, INDEX)    </p>\n</li><li class=\" \">    <p>\nENSURE_STRING_AT_INDEX(OUT, INDEX)    </p>\n</li></ul>    <p>\nNote that in this macro example <tt class=\" \">OUT</tt> is a variable name, and <tt class=\" \">INDEX</tt> is a index in the arguments. For example:    </p>\n    <p>\n    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\"> TITANIUM_FUNCTION(Test, example)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// get 1st argument and convert it to std::int32_t</code></div>\n<div class=\"line\"><code class=\"plain\">    ENSURE_INT_AT_INDEX(my_int, 0);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// get 2nd argument and convert it to double</code></div>\n<div class=\"line\"><code class=\"plain\">    ENSURE_DOUBLE_AT_INDEX(my_double, 1);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// get 3rd argument and convert it to boolean</code></div>\n<div class=\"line\"><code class=\"plain\">    ENSURE_BOOL_AT_INDEX(my_bool, 2);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// get 4th argument and convert it to std::string</code></div>\n<div class=\"line\"><code class=\"plain\">    ENSURE_STRING_AT_INDEX(my_string, 3);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// let's return 4th argument for example</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateString(my_string);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"46248454_WindowsModuleArchitecture-Properties\">\n        <h3 class=\"heading \"><span>Properties</span></h3>\n    <p>\nProperties are exposed via <tt class=\" \">TITANIUM_ADD_PROPERTY</tt> and <tt class=\" \">TITANIUM_PROPERTY_DEF</tt> C++ macro.    </p>\n    <p>\nFirst, declare method using <tt class=\" \">TITANIUM_FUNCTION_DEF</tt> in header:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"preprocessor\">#include \"Titanium/Module.hpp\"</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> COMEXAMPLETEST_EXPORT Test : </code><code class=\"keyword\">public</code><code class=\"plain\"> Titanium::Module, </code><code class=\"keyword\">public</code><code class=\"plain\"> JSExport&lt;Test&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\">    TITANIUM_PROPERTY_DEF(exampleProp);</code></div>\n<div class=\"line\"><code class=\"plain\">    ....</code></div>\n<div class=\"line\"><code class=\"plain\"> };</code></div>\n</div>\n</div>    <p>\nSecond, implement <tt class=\" \">exampleProp</tt> property getter/setter with <tt class=\" \">TITANIUM_PROPERTY_GETTER/</tt><tt class=\" \">TITANIUM_PROPERTY_SETTER</tt> and then register in <tt class=\" \">JSExportInitialize</tt> with <tt class=\" \">TITANIUM_ADD_PROPERTY:</tt>    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> Test::JSExportInitialize()</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    JSExport&lt;Test&gt;::SetClassVersion(1);</code></div>\n<div class=\"line\"><code class=\"plain\">    JSExport&lt;Test&gt;::SetParent(JSExport&lt;Titanium::Module&gt;::Class());</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// register exampleProp property so we can use it from JavaScript</code></div>\n<div class=\"line\"><code class=\"plain\">    TITANIUM_ADD_PROPERTY(Test, exampleProp);</code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">TITANIUM_PROPERTY_GETTER(Test, exampleProp)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// example property getter</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Getter should return JavaScript value (JSValue).</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// For more information on how to use JSContext / JSValue / JSObject, check out HAL:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      https://github.com/appcelerator/HAL</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> get_context().CreateString(</code><code class=\"string\">\"hello world\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">TITANIUM_PROPERTY_SETTER(Test, exampleProp)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// example property setter</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// There are a variable expanded from TITANIUM_PROPERTY_SETTER macro here:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//     JSValue argument ... JavaScript value that is passed to this setter</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Example:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//   # Check if it's a string</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      auto _0 = argument.IsString();</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//   # Convert argument to std::string</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      auto _0 = static_cast&lt;std::string&gt;(argument);    </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//   For more information on how to use JSContext / JSValue / JSObject, check out HAL:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//      https://github.com/appcelerator/HAL</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// Setter should return true if the property was set, otherwise false.</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nInside setter, there's a variable that you can use: <tt class=\" \">argument</tt> as <tt class=\" \">JSValue</tt>. For typicasting property values, you can just use C++11 s<tt class=\" \">tatic_cast&lt;TYPE&gt;</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.cpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TITANIUM_PROPERTY_SETTER(Test, exampleProp)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// example property setter</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// There are a variable expanded from TITANIUM_PROPERTY_SETTER macro here:</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">//     JSValue argument ... JavaScript value that is passed to this setter</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// </code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">const</code><code class=\"plain\"> auto my_int = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;std::int32_t&gt;(argument);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">const</code><code class=\"plain\"> auto my_double = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;</code><code class=\"color1\">double</code><code class=\"plain\">&gt;(argument);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">const</code><code class=\"plain\"> auto my_string = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;std::string&gt;(argument);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">const</code><code class=\"plain\"> auto my_bool = </code><code class=\"keyword\">static_cast</code><code class=\"plain\">&lt;</code><code class=\"color1\">bool</code><code class=\"plain\">&gt;(argument);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    </div>\n    <div class=\"section section-3 \" id=\"46248454_WindowsModuleArchitecture-HandlingEvents\">\n        <h3 class=\"heading \"><span>Handling Events</span></h3>\n    <p>\nModules automatically handle firing events and managing event listeners. Internally, when you call <tt class=\" \">addEventListener()</tt> or <tt class=\" \">removeEventListener()</tt> from JavaScript against a module instance, the module will automatically handle the code for managing the event listeners. If you want to be notified upon an add or remove, you should override the methods:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ComExampleTest.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> enableEvent(</code><code class=\"keyword\">const</code><code class=\"plain\"> std::string&amp; event_name) TITANIUM_NOEXCEPT override;</code></div>\n<div class=\"line\"><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> disableEvent(</code><code class=\"keyword\">const</code><code class=\"plain\"> std::string&amp; event_name) TITANIUM_NOEXCEPT override;</code></div>\n</div>\n</div>    <p>\nThe<tt class=\" \"> enableEvent</tt> method will be invoked when event is enabled with given name. This is convenient, for example, when you would like to enable some action only once at least one listener is listening for the event. This can be useful for conserving system resources.    </p>\n    <p>\nThe <tt class=\" \">disableEvent</tt> method will be invoked when event is enabled with given name. This is useful when you want to cleanup system resources once no listeners are actively listening for events.    </p>\n    <p>\nTo send an event to any event listener, you use the convenience method:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Titanium/Module.hpp</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> fireEvent(</code><code class=\"keyword\">const</code><code class=\"plain\"> std::string&amp; name) TITANIUM_NOEXCEPT final;</code></div>\n<div class=\"line\"><code class=\"keyword\">virtual</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> fireEvent(</code><code class=\"keyword\">const</code><code class=\"plain\"> std::string&amp; name, </code><code class=\"keyword\">const</code><code class=\"plain\"> JSObject&amp; event) TITANIUM_NOEXCEPT final;</code></div>\n</div>\n</div>    <p>\nThe first one is the default and most common way to fire an event. The first argument (name) is the event name. The second argument (event) is an <tt class=\" \">JSObject</tt> of event properties. The second argument can also be omitted if no additional event properties are needed. The event properties will be part of the event argument which is the first argument in all event functions.    </p>\n    <p>\nFor example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TITANIUM_FUNCTION(Test, example)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">   ...</code></div>\n<div class=\"line\"><code class=\"plain\">   </code><code class=\"keyword\">const</code><code class=\"plain\"> auto ctx = get_context();</code></div>\n<div class=\"line\"><code class=\"plain\">   auto obj = ctx.CreateObject();</code></div>\n<div class=\"line\"><code class=\"plain\">   obj.SetProperty(</code><code class=\"string\">\"name\"</code><code class=\"plain\">, ctx.CreateString(</code><code class=\"string\">\"my name\"</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">   fireEvent(</code><code class=\"string\">\"foo\"</code><code class=\"plain\">, obj);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div>    <p>\nIn this example, we'd adding one additional event property named 'name' with the value of 'my name'. In JavaScript, this would be retrieved like:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">test.addEventListener(</code><code class=\"string\">'foo'</code><code class=\"plain\">,function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">  alert(</code><code class=\"string\">\"name is \"</code><code class=\"plain\">+e.name);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div>    <p>\nIn addition to any additional event arguments passed, Titanium automatically provides the following built-in properties on all events fired:    </p>\n<ul class=\" \"><li class=\" \">    <p>\nsource &mdash; The source object (proxy) that fired the event    </p>\n</li><li class=\" \">    <p>\ntype &mdash; The type of event    </p>\n</li></ul>    </div>\n    <div class=\"section section-3 line\" id=\"46248454_WindowsModuleArchitecture-MoreExamples\">\n        <h3 class=\"heading line\"><span>More Examples</span></h3>\n<ul class=\" \"><li class=\" \">    <p>\nFor information about HAL API, see <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/HAL\" target=\"_blank\">github/appcelerator/HAL</a>    </p>\n</li><li class=\" \">    <p>\nFor information about TitaniumKit, see <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile_windows\" target=\"_blank\">github/appcelerator/titanium_mobile_windows</a>    </p>\n</li><li class=\" \">    <p>\nFor more examples of using the module API, see working Titanium modules under <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile_windows/tree/master/Source\" target=\"_blank\">github/appcelerator/titanium_mobile_windows/Source</a>    </p>\n</li></ul>    </div>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=46248454\"><span>Edit</span></a>\n    \n        <div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n    </div>\n</body>\n</html>\n","title":"Windows Module Architecture"});