Ext.data.JsonP['Integrating_Web_Content']({"guide":" <!doctype html> <html> <head> <title>Integrating Web Content</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004917\" class=\"content\"> <h1>Integrating Web Content</h1> <p>While Titanium offers the power of using native UI components, sometimes it is necessary to use web content in our apps. For this reason, Titanium has the <tt>Ti.UI.WebView</tt> component that gives you access to the platform&apos;s underlying native webview. With this component you get the full range of HTML/CSS/JS capabilities that the platform has to offer. </p> <p>While it&apos;s highly encouraged to use native UI components whenever possible, there are some situations that are best suited for <tt>WebViews</tt>, like: </p> <ul class=\"\"><li> <p>Rendering existing HTML/CSS </p> </li><li> <p>Animation and interaction via the HTML5 &lt;canvas&gt; tag </p> </li><li> <p>Integrating web-based tools </p> </li></ul> <p>But be cautious when using <tt class=\"\">WebViews</tt>. They are the heaviest of native UI components. They take time to render and can effect the performance of your apps if used too often. This will be discussed in more detail in the <a class=\"document-link\" href=\"#!/guide/WebView_Use_Cases\">WebView Use Cases</a> section of this chapter. </p> <div class=\"section section-2\" id=\"src-29004917_IntegratingWebContent-Sectionsinthischapter\"> <h2 class=\"heading\"><span>Sections in this chapter</span></h2> <p><strong class=\"\"><a class=\"document-link\" href=\"#!/guide/The_WebView_Component\">The WebView Component</a></strong> </p> <p>In this section, you&apos;ll learn how to use the <tt class=\"\">Ti.UI.WebView</tt> component to display and interact with web content in your apps. You&apos;ll see how to use both static and dynamic local web content, as well as existing webpages, RSS feeds, and other remote web content. You&apos;ll also find some resources for optimizing web content to work well with <tt>WebViews</tt> (and mobile browsers). </p> <p><strong class=\"\"><a class=\"document-link\" href=\"#!/guide/Communication_Between_WebViews_and_Titanium\">Communication Between WebViews and Titanium</a></strong> </p> <p>Here you&apos;ll learn how to use Titanium application level events to bidirectionally communicate between Javascript code in <tt>WebViews</tt> and native Titanium code. This gives you the ability to have web content interact with the native Titanium environment and vice versa. </p> <p><strong class=\"\"><a class=\"document-link\" href=\"#!/guide/WebView_Use_Cases\">WebView Use Cases</a></strong> </p> <p>Finally, you&apos;ll explore some common use cases of the <tt>Ti.UI.WebView</tt> in Titanium apps. You will also further explore why caution must be taken to not overuse these components, particularly when the same result could be achieved with native components. </p> <p>So let&apos;s get started: <a class=\"document-link\" href=\"#!/guide/The_WebView_Component\">The WebView Component &gt;</a> </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004917\"><span>Edit</span></a> </div> </body> </html> ","title":"Integrating Web Content"});