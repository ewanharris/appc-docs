Ext.data.JsonP['Style_and_Conventions']({"guide":" <!doctype html> <html> <head> <title>Style and Conventions</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-30082366\" class=\"content\"> <h1>Style and Conventions</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Languagerules\">Language rules</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Codingstylebestpractices\">Coding style best practices</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Namingconventions\">Naming conventions</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Variableandfunctionnames\">Variable and function names</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_safe-id-U3R5bGVhbmRDb252ZW50aW9ucy1PYmplY3RhbmQnY2xhc3MnbmFtZXM\">Object and &apos;class&apos; names</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Namespace\">Namespace</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Factories\">Factories</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Operators\">Operators</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Indentation\">Indentation</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Primitivetypes\">Primitive types</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Controlstatements\">Control statements</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Commentsanddocumentation\">Comments and documentation</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Referencesandfurtherreading\">References and further reading</a> </p> </li></ul><ul class=\"\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-Summary\">Summary</a> </p> </li></ul> <p>In this section, we&apos;ll examine the Appcelerator recommended best-practices for coding style, including naming conventions, code formatting, and commenting. </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>We&apos;ll also cover our recommendations for organizing the assets that comprise your project. </p> </div> <div class=\"section section-2\" id=\"src-30082366_StyleandConventions-Languagerules\"> <h2 class=\"heading\"><span>Language rules</span></h2> <p>Many references exist that describe JavaScript language rules to follow. We&apos;ll lay out a few of the most important here, then direct you to the <a class=\"document-link\" href=\"#!/guide/Style_and_Conventions-section-src-30082366_StyleandConventions-references\">References</a> section below. </p> <ul class=\"\"><li class=\"\"> <p><tt class=\"\">var</tt> &#x2013; All variables should be explicitly declared using the <tt class=\"\">var</tt> keyword. Omitting <tt>var</tt> places the variable in the global scope. <a class=\"external-link external-link\" href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=var#var\" target=\"_blank\">Read more</a> </p> </li><li> <p>Semicolons &#x2013; Always use semicolons to terminate statements. <a class=\"external-link external-link\" href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Semicolons#Semicolons\" target=\"_blank\">Read more</a> </p> </li><li class=\"\"> <p>Use <tt>this</tt> with extreme care, as it sometimes doesn&apos;t refer to the object you expect. <a class=\"external-link external-link\" href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=this#this\" target=\"_blank\">Read more</a> </p> </li></ul> <p> </p> <p>We have codified our set of internal formatting and linting rules for ESLint at our repository: <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/eslint-config-axway\" target=\"_blank\">https://github.com/appcelerator/eslint-config-axway</a> </p> <p>This is the set of lint rules we apply to our own JavaScript source for any SDK-related NPM packages, CLI code, etc. </p> </div> <div class=\"section section-2\" id=\"src-30082366_StyleandConventions-Codingstylebestpractices\"> <h2 class=\"heading\"><span>Coding style best practices</span></h2> <div class=\"section section-3\" id=\"src-30082366_StyleandConventions-Namingconventions\"> <h3 class=\"heading\"><span>Naming conventions</span></h3> <div class=\"section section-4\" id=\"src-30082366_StyleandConventions-Variableandfunctionnames\"> <h4 class=\"heading\"><span>Variable and function names</span></h4> <p> <span style=\"color: #000000;\"> Variable names start with a category noun (lowercase) so that they are easier to categorize and associate with related variables. </span> </p> <p><strong>Variable examples</strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">personName, personAddress</code></div> <div class=\"line\"><code class=\"plain\">personNameLast, personNameFirst</code></div> </div> </div> <p> <span style=\"color: #000000;\"> Function names follow a similar convention, though we start with a category verb (lowercase) and are often followed by an associated variable name (if any). </span> </p> <p><strong>Function examples</strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">getPersonName, setPersonAddress</code></div> <div class=\"line\"><code class=\"plain\">driveCarBlue, stopCarRed</code></div> </div> </div> <p> <span style=\"color: #000000;\"> Both variables and functions (or properties and methods, respectively) start with a lowercase word so that they are easier to differentiate from major namespace objects or &apos;classes&apos;. </span> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>Appcelerator does not support the use of Hungarian Notation. </p> </div> </div> <div class=\"section section-4\" id=\"src-30082366_safe-id-U3R5bGVhbmRDb252ZW50aW9ucy1PYmplY3RhbmQnY2xhc3MnbmFtZXM\"> <h4 class=\"heading\"><span>Object and &apos;class&apos; names</span></h4> <p>Major objects and class-like functions (constructors) follow a standard pattern of capitalized words. Though not necessarily a naming convention, &apos;class&apos; names that end up rather large is an indicator that the &apos;class&apos; is most likely designed to do too much. &apos;Class&apos; names may also start with an abbreviation of a library. </p> <p><strong>Examples</strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">Car, GarbageCollector</code></div> <div class=\"line\"><code class=\"plain\">IKSystem, MCStyle</code></div> </div> </div> </div> <div class=\"section section-4\" id=\"src-30082366_StyleandConventions-Namespace\"> <h4 class=\"heading\"><span>Namespace</span></h4> <p>Here, convention is similar to &apos;class&apos; naming. </p> <p><strong>Examples</strong> </p> <ul class=\"\"><li> <p>App.UI.Widget </p> </li><li> <p>App.Network.Request </p> </li></ul> <p> </p> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\"> <p>&apos;app.ui&apos; should be &apos;App.UI&apos; </p> </div> </div> <div class=\"section section-4\" id=\"src-30082366_StyleandConventions-Factories\"> <h4 class=\"heading\"><span>Factories</span></h4> <p>Factory functions are located within a major namespace object, start with &apos;create&apos; and return an object. </p> <p><strong>Examples</strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">createPhotoGallery</code></div> <div class=\"line\"><code class=\"plain\">App.UI.createWidget</code></div> <div class=\"line\"><code class=\"plain\">App.Network.createRequest</code></div> </div> </div> </div> <div class=\"section section-4\" id=\"src-30082366_StyleandConventions-Operators\"> <h4 class=\"heading\"><span>Operators</span></h4> <p>Type data and operators should always be separated by a single space. </p> <p><strong>Examples</strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">var nameFull = nameFirst + nameLast;</code></div> <div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (var i = </code><code class=\"value\">0</code><code class=\"plain\">, cl = content.length; i &lt; cl; i++) {}</code></div> </div> </div> </div> </div> <div class=\"section section-3\" id=\"src-30082366_StyleandConventions-Indentation\"> <h3 class=\"heading\"><span>Indentation</span></h3> <p>Both K&amp;R/1TBS and Allman styles are acceptable. <strong class=\"\"><i>Consistency is most important and a combination is not to be used on the same project. Clean indentation is required.</i></strong> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// K&amp;R/1TBS Style</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (x &lt; </code><code class=\"value\">10</code><code class=\"plain\">) {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (y &gt; </code><code class=\"value\">10</code><code class=\"plain\">) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do this</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"comments\">// do this</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Allman Style</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (x &lt; </code><code class=\"value\">10</code><code class=\"plain\">)</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"keyword\">if</code><code class=\"plain\"> (y &gt; </code><code class=\"value\">10</code><code class=\"plain\">)&#xA0;</code></div> <div class=\"line\"><code class=\"plain\">\t{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do this</code></div> <div class=\"line\"><code class=\"plain\">\t}</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\"><code class=\"keyword\">else</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">\t</code><code class=\"comments\">// do this</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// but never do this within a function:</code></div> <div class=\"line\"><code class=\"keyword\">return</code></div> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\">\tfoo: </code><code class=\"string\">&apos;bar&apos;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>As noted, you should never put <tt class=\"\">return</tt> on its own line followed by an object literal definition. Doing so will return an <tt>undefined</tt> value rather than the object. See <a class=\"external-link external-link\" href=\"http://encosia.com/in-javascript-curly-brace-placement-matters-an-example/\" target=\"_blank\">this blog post</a> or <a class=\"external-link external-link\" href=\"http://www.amazon.com/dp/0596517742/?tag=stackoverfl08-20\" target=\"_blank\">Crockford&apos;s JavaScript: The Good Parts</a> for more info. </p> </div> <div class=\"section section-3\" id=\"src-30082366_StyleandConventions-Primitivetypes\"> <h3 class=\"heading\"><span>Primitive types</span></h3> <p><strong>Concatenation</strong><br>Strings concatenated using the + operator must always use a space be added before and after the + operator to improve readability: </br></p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> someString = </code><code class=\"string\">&apos;My name is &apos;</code><code class=\"plain\"> + firstName + </code><code class=\"string\">&apos;and I am a developer&apos;</code><code class=\"plain\">;</code></div> </div> </div> <p><strong>Primitive type construction</strong><br>Do not use the primitive type object constructors unless you have a very clear reason for doing so. </br></p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Don&apos;t do this</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> test = </code><code class=\"keyword\">new</code><code class=\"plain\"> String(</code><code class=\"string\">&apos;My String&apos;</code><code class=\"plain\">);</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-30082366_StyleandConventions-Controlstatements\"> <h3 class=\"heading\"><span>Control statements</span></h3> <p>Switch statements have a single space before the opening parenthesis of the conditional statement and also a single space after the closing parenthesis. Switch statement content is indented with one tab. Content in each case is indented one tab as well: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">switch</code><code class=\"plain\"> (someTest) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">1</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">2</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">default</code><code class=\"plain\">:</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> </div> <div class=\"section section-3\" id=\"src-30082366_StyleandConventions-Commentsanddocumentation\"> <h3 class=\"heading\"><span>Comments and documentation</span></h3> <p>Single-line comments are required to reduce programmer error. However, specialized block commenting is preferred when documenting functions. Inline statement comments should be used at a minimum or not at all. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">// Calculate position using initial&#xA0;</code></div> <div class=\"line\"><code class=\"comments\">// and offset x coordinates.</code></div> <div class=\"line\"><code class=\"plain\">var finalPos = initPosX + offsetPosX;</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"preprocessor\">/**</code></div> <div class=\"line\"><code class=\"preprocessor\"> * @param {String} customerName Customer&apos;s full name.</code></div> <div class=\"line\"><code class=\"preprocessor\"> */</code></div> <div class=\"line\"><code class=\"plain\">function getCustomer(customerName) {}</code></div> </div> </div> <p> </p> <p> <span id=\"src-30082366_StyleandConventions-references\"><a class=\"confluence-anchor-link\" name=\"src-30082366_StyleandConventions-references\"/></span> </p> </div> </div> <div class=\"section section-2\" id=\"src-30082366_StyleandConventions-Referencesandfurtherreading\"> <h2 class=\"heading\"><span>References and further reading</span></h2> <ul class=\"\"><li> <p><a class=\"external-link external-link\" href=\"http://javascript.crockford.com/code.html\" target=\"_blank\">Douglas Crockford&apos;s JavaScript Code Conventions</a> </p> </li><li> <p><a class=\"external-link external-link\" href=\"https://google.github.io/styleguide/jsguide.html\" target=\"_blank\">Google&apos;s JavaScript Style Guide</a> </p> </li><li> <p><a class=\"external-link external-link\" href=\"https://github.com/appcelerator/eslint-config-axway\" target=\"_blank\">Axway Appcelerator&apos;s ESLint Configuration</a> </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-30082366_StyleandConventions-Summary\"> <h2 class=\"heading\"><span>Summary</span></h2> <p>In this chapter, you learned the Appcelerator recommended best-practices for coding style, including naming conventions, code formatting, and commenting. </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30082366\"><span>Edit</span></a> </div> </body> </html> ","title":"Style and Conventions"});