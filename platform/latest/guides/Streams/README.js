Ext.data.JsonP['Streams']({"guide":" <!doctype html> <html> <head> <title>Streams</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-29004830\" class=\"content\"> <h1>Streams</h1> <p> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-Overview\">Overview</a> </p> </li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-BufferStream\">BufferStream</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-BufferStreamexamples\">BufferStream examples</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-FileStream\">FileStream</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-FileStreamexamples\">FileStream examples</a> </p> </li></ul></li><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-BlobStream\">BlobStream</a> </p> <ul class=\"toc-indentation\"><li class=\"\"> <p><a class=\"document-link\" href=\"#!/guide/Streams-section-src-29004830_Streams-BlobStreamexamples\">BlobStream examples</a> </p> </li></ul></li></ul> <div class=\"section section-2\" id=\"src-29004830_Streams-Overview\"> <h2 class=\"heading\"><span>Overview</span></h2> <p>A stream is a data type used to serially read and write bytes. The term &quot;Stream&quot;, used generically, refers to a data type which implements a particular interface consisting of the methods that you would expect from a stream-like object, namely <tt class=\"\">read()</tt>, <tt class=\"\">write()</tt>, <tt class=\"\">close()</tt>, <tt class=\"\">isWritable()</tt>, and <tt>isReadable()</tt>. The Titanium Mobile SDK, starting with version 1.7.0, defines four types which implement this interface: </p> <ul class=\"\"><li class=\"\"> <p><tt>Titanium.Stream.BufferStream</tt>, an in-memory stream implementation. </p> </li><li class=\"\"> <p><tt>Titanium.Stream.BlobStream</tt>, a read-only stream specifically for reading from Titanium Blobs. </p> </li><li class=\"\"> <p><tt>Titanium.Filesystem.FileStream</tt>, for reading and writing files on the mobile device. </p> </li><li class=\"\"> <p><tt>Titanium.Network.Socket.TCP</tt>, a TCP socket implementation which, among other things, implements the Stream interface. Sockets, of course, have lots of other interesting features beyond their stream implementation, and therefore there will be another installment of this article series devoted to sockets. We won&apos;t cover sockets any further in this article. </p> </li></ul> </div> <div class=\"section section-2\" id=\"src-29004830_Streams-BufferStream\"> <h2 class=\"heading\"><span>BufferStream</span></h2> <p>Buffers are basically resizable byte arrays. A <tt class=\"\">BufferStream</tt> reads or writes the bytes in a <tt class=\"\">Buffer</tt> in a serial fashion and maintains an internal pointer to the current read/write position in the <tt class=\"\">Buffer</tt>. So rather than needing to read or write each individual byte in a <tt class=\"\">Buffer</tt>, you can read or write a series of bytes using a <tt>BufferStream</tt>. </p> <p>One use-case might be if you want to prepare a message in its entirety before opening a socket and sending the message. You can use a <tt>BufferStream</tt> to assemble the message in a buffer in memory, then later pass that buffer to a socket write operation. </p> <div class=\"section section-3\" id=\"src-29004830_Streams-BufferStreamexamples\"> <h3 class=\"heading\"><span>BufferStream examples</span></h3> <p>Here&apos;s a simple example of writing strings to a <tt>BufferStream</tt> and then reading them back. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex01-bufferstream-create.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex01-bufferstream-create.js\"> <div class=\"line\"><code class=\"comments\">// Create the buffer &amp; stream</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> paragraph = Titanium.createBuffer({length: 1024});</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> stream = Titanium.Stream.createStream({</code></div> <div class=\"line\"><code class=\"plain\"> mode: Titanium.Stream.MODE_WRITE, </code><code class=\"comments\">// There is also MODE_APPEND for writing</code></div> <div class=\"line\"><code class=\"plain\"> source: paragraph</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex02-bufferstream-write.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex02-bufferstream-write.js\"> <div class=\"line\"><code class=\"comments\">// Write to stream in chunks, filling up &quot;paragraph&quot; buffer.</code></div> <div class=\"line\"><code class=\"comments\">// Each chunk will be an encoded UTF-8 string because we</code></div> <div class=\"line\"><code class=\"comments\">// don&apos;t specify otherwise.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> length = 0;</code></div> <div class=\"line\"><code class=\"plain\">length += stream.write(Titanium.createBuffer({</code></div> <div class=\"line\"><code class=\"plain\"> value: </code><code class=\"string\">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &quot;</code></div> <div class=\"line\"><code class=\"plain\">}));</code></div> <div class=\"line\"><code class=\"plain\">length += stream.write(Titanium.createBuffer({</code></div> <div class=\"line\"><code class=\"plain\"> value: </code><code class=\"string\">&quot;Morbi vel mi in nunc bibendum congue at a ligula. Nunc at mauris dui, ac posuere ligula. &quot;</code></div> <div class=\"line\"><code class=\"plain\">}));</code></div> <div class=\"line\"><code class=\"plain\">length += stream.write(Titanium.createBuffer({</code></div> <div class=\"line\"><code class=\"plain\"> value: </code><code class=\"string\">&quot; Curabitur posuere cursus orci, id convallis metus venenatis sed.&quot;</code></div> <div class=\"line\"><code class=\"plain\">}));</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Close the stream. The buffer still has the data in it.</code></div> <div class=\"line\"><code class=\"plain\">stream.close();</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex03-bufferstream-resetlength.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex03-bufferstream-resetlength.js\"> <div class=\"line\"><code class=\"comments\">// Set the buffer length to the actual bytes written.</code></div> <div class=\"line\"><code class=\"plain\">paragraph.length = length;</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex04-bufferstream-create2.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex04-bufferstream-create2.js\"> <div class=\"line\"><code class=\"comments\">// Read back the buffer in chunks.</code></div> <div class=\"line\"><code class=\"comments\">// Create the read stream &amp; buffer.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> CHUNK_SIZE = 10;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> read_buffer = Titanium.createBuffer({length: 1024});</code></div> <div class=\"line\"><code class=\"plain\">stream = Titanium.Stream.createStream({</code></div> <div class=\"line\"><code class=\"plain\"> mode: Titanium.Stream.MODE_READ,</code></div> <div class=\"line\"><code class=\"plain\"> source: paragraph</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex05-bufferstream-readchunks.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex05-bufferstream-readchunks.js\"> <div class=\"line\"><code class=\"comments\">// Read until end.</code></div> <div class=\"line\"><code class=\"plain\">length = 0;</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> bytes_read = 0;</code></div> <div class=\"line\"><code class=\"keyword\">while</code><code class=\"plain\"> ((length = stream.read(read_buffer, bytes_read, CHUNK_SIZE)) &gt; 0) {</code></div> <div class=\"line\"><code class=\"plain\"> bytes_read += length;</code></div> <div class=\"line\"><code class=\"plain\">};</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex07-bufferstream-decode.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex07-bufferstream-decode.js\"> <div class=\"line\"><code class=\"comments\">// Get the read_buffer contents into a string.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> lorem = Ti.Codec.decodeString({</code></div> <div class=\"line\"><code class=\"plain\"> source: read_buffer,</code></div> <div class=\"line\"><code class=\"plain\"> charset: Ti.Codec.CHARSET_UTF8,</code></div> <div class=\"line\"><code class=\"plain\"> length: bytes_read,</code></div> <div class=\"line\"><code class=\"plain\"> position: 0</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> <div class=\"line\">&#xA0;</div> <div class=\"line\"><code class=\"comments\">// Cleanup</code></div> <div class=\"line\"><code class=\"plain\">stream.close();</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-29004830_Streams-FileStream\"> <h2 class=\"heading\"><span>FileStream</span></h2> <p>The <tt>FileStream</tt>, surprise surprise, helps you read from and write to files on the mobile device. This can have memory advantages, such as if you want to read and write in chunks rather than pull a file&apos;s entire contents into memory at one time. </p> <p>There are two ways to get a <tt class=\"\">FileStream</tt> instance. If you already have a <tt class=\"\">File</tt> object, you can open a stream for it by using the new <tt class=\"\">open</tt> method of <tt class=\"\">Titanium.Filesystem.File</tt>. Alternatively, you can skip getting the <tt class=\"\">File</tt> object if you have no other use for it and instead get a stream directly with the new <tt>Titanium.Filesystem.openStream</tt> method. </p> <p>The supported modes are <tt class=\"\">Titanium.Filesystem.MODE_READ</tt>, <tt class=\"\">Titanium.Filesytem.MODE_WRITE</tt> and <tt>Titanium.Filesytem.MODE_APPEND</tt>. </p> <div class=\"section section-3\" id=\"src-29004830_Streams-FileStreamexamples\"> <h3 class=\"heading\"><span>FileStream examples</span></h3> <p>This simple example reads and writes a file in 1K chunks rather than loading up the entirety of the file in memory. In this example we get streams by first getting &lt;code&gt;File&lt;/code&gt; objects then calling their <tt class=\"\">open()</tt> methods. However, in the case of the output file, we show the alternative <tt>openStream(...)</tt> method as well in a commented line. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex01-filestream-getfile.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex01-filestream-getfile.js\"> <div class=\"line\"><code class=\"comments\">// Get the source file (this one is in Resources).</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> infile = Titanium.Filesystem.getFile(</code><code class=\"string\">&apos;emmy.jpg&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (!infile.exists()) {</code></div> <div class=\"line\"><code class=\"plain\"> Ti.API.error(</code><code class=\"string\">&quot;File not exists()&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\">;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex02-filestream-openread.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex02-filestream-openread.js\"> <div class=\"line\"><code class=\"comments\">// Open for reading.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> instream = infile.open(Titanium.Filesystem.MODE_READ);</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex03-filestream-getoutfile.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex03-filestream-getoutfile.js\"> <div class=\"line\"><code class=\"comments\">// Get a file descriptor for output file. (Doesn&apos;t need to exist.)</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> outfile =</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, </code><code class=\"string\">&apos;emmy_out.jpg&apos;</code><code class=\"plain\">);</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex04-filestream-openwrite.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex04-filestream-openwrite.js\"> <div class=\"line\"><code class=\"comments\">// Open for writing.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> outstream = outfile.open(Titanium.Filesystem.MODE_WRITE);</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex04a-filestream-openstream.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex04a-filestream-openstream.js\"> <div class=\"line\"><code class=\"comments\">// The last two steps could have been combined into one using this code:</code></div> <div class=\"line\"><code class=\"comments\">//var outstream =</code></div> <div class=\"line\"><code class=\"comments\">// Titanium.Filesystem.openStream(Titanium.Filesystem.MODE_WRITE, Titanium.Filesystem.applicationDataDirectory, &apos;emmy_out.jpg&apos;);</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex05-filestream-buffer.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex05-filestream-buffer.js\"> <div class=\"line\"><code class=\"comments\">// Create a 1K buffer for reading chunks.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> buffer = Titanium.createBuffer({length: 1024});</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex06-filestream-loopreadwrite.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex06-filestream-loopreadwrite.js\"> <div class=\"line\"><code class=\"comments\">// Read and write chunks.</code></div> <div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> size = 0;</code></div> <div class=\"line\"><code class=\"keyword\">while</code><code class=\"plain\"> ((size = instream.read(buffer)) &gt; -1) {</code></div> <div class=\"line\"><code class=\"plain\"> outstream.write(buffer);</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.API.info(</code><code class=\"string\">&apos;Wrote &apos;</code><code class=\"plain\"> + size + </code><code class=\"string\">&apos; bytes&apos;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex07-filestream-cleanup.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex07-filestream-cleanup.js\"> <div class=\"line\"><code class=\"comments\">// Cleanup.</code></div> <div class=\"line\"><code class=\"plain\">instream.close();</code></div> <div class=\"line\"><code class=\"plain\">outstream.close();</code></div> </div> </div> </div> </div> <div class=\"section section-2\" id=\"src-29004830_Streams-BlobStream\"> <h2 class=\"heading\"><span>BlobStream</span></h2> <p>The <tt class=\"\">BlobStream</tt> is a read-only stream that provides you with the ability to read blobs in chunks rather than load them up completely in memory. Blobs appear in a few places throughout the Titanium API, such as in <a class=\"external-link external-link\" href=\"#!/api/Titanium.Media\">Titanium.Media</a> when dealing with images from the camera and photo gallery. You read from a <tt class=\"\">BlobStream</tt> in the same manner you would for a <tt class=\"\">BufferStream</tt> or a <tt>FileStream</tt>. </p> <div class=\"section section-3\" id=\"src-29004830_Streams-BlobStreamexamples\"> <h3 class=\"heading\"><span>BlobStream examples</span></h3> <p>In this example, we use <a class=\"external-link external-link\" href=\"#!/api/Titanium.Media-method-showCamera\">Titanium.Media.showCamera</a> to take a photo and stream its bytes to a file. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">ex01-blobstream-full.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"ex01-blobstream-full.js\"> <div class=\"line\"><code class=\"plain\">Ti.Media.showCamera({</code></div> <div class=\"line\"><code class=\"plain\"> success: </code><code class=\"keyword\">function</code><code class=\"plain\">(e) {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Open stream on blob.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> instream = Titanium.Stream.createStream({</code></div> <div class=\"line\"><code class=\"plain\"> mode: Titanium.Stream.MODE_READ,</code></div> <div class=\"line\"><code class=\"plain\"> source: e.media </code><code class=\"comments\">// e.media is a Blob</code></div> <div class=\"line\"><code class=\"plain\"> });</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Open an output stream for a file</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// to hold the blob data.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> f =</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.Filesystem.getFile(</code></div> <div class=\"line\"><code class=\"plain\"> Titanium.Filesystem.applicationDataDirectory, </code><code class=\"string\">&quot;out.jpg&quot;</code><code class=\"plain\">);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> outstream = f.open(Titanium.Filesystem.MODE_WRITE);</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create a buffer for chunking the data.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> buffer = Ti.createBuffer({length: 1024});</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Read and write chunks.</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">var</code><code class=\"plain\"> read_bytes = 0;</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">while</code><code class=\"plain\"> ((read_bytes = instream.read(buffer)) &gt; 0) {</code></div> <div class=\"line\"><code class=\"plain\"> outstream.write(buffer, 0, read_bytes);</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Cleanup.</code></div> <div class=\"line\"><code class=\"plain\"> instream.close();</code></div> <div class=\"line\"><code class=\"plain\"> outstream.close();</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\">});</code></div> </div> </div> </div> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004830\"><span>Edit</span></a> </div> </body> </html> ","title":"Streams"});