Ext.data.JsonP['Titanium_Angular_-_FAQ']({"guide":" <!doctype html> <html> <head> <title>Titanium Angular - FAQ</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> </meta></head> <body> <div class=\"container\"> <div class=\"header\"/> <div id=\"src-55477107\" class=\"content\"> <h1>Titanium Angular - FAQ</h1> <div class=\"section section-2\" id=\"src-55477107_safe-id-VGl0YW5pdW1Bbmd1bGFyLUZBUS1Ib3dkb0l1c2Vtb2R1bGVzd2l0aFRpdGFuaXVtQW5ndWxhcj8\"> <h2 class=\"heading\"><span>How do I use modules with Titanium Angular?</span></h2> <p>Configure your modules as described in <a class=\"document-link\" href=\"#!/guide/Using_Titanium_Modules\">Using Titanium Modules</a> or, if it has any, follow the specific install instructions of the module itself. After that, you need to do some additional configuration in your Titanium Angular project. </p> <p>First, add an entry in Webpack&apos;s <a class=\"external-link external-link\" href=\"https://webpack.js.org/configuration/externals/\" target=\"_blank\">externals</a> configuration option to prevent it from trying to bundle any require statements of that native module. For example, if you want to use the <a class=\"external-link external-link\" href=\"https://docs.appcelerator.com/platform/latest/#!/api/Modules.Map\" target=\"_blank\">ti.map</a> module, add the following to your project&apos;s <tt>webpack.config.js</tt>: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">webpack.config.js</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"webpack.config.js\"> <div class=\"line\"><code class=\"plain\">externals: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&apos;ti.map&apos;</code><code class=\"plain\">: </code><code class=\"string\">&apos;commonjs ti.map&apos;</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p>Next you need to tell TypeScript about the types of this module. Since Titanium Angular is in a very early stage, it is highly unlikely that a module has TypeScript definitions available now. But you can easily create definitions yourself in two simple steps. Create <tt class=\"\">app/src/titanium-modules.d.ts</tt>, and for each module you want to use add a <tt>declare module</tt> statement. For example, to declare the ti.map module: </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"plain\">declare module </code><code class=\"string\">&apos;ti.map&apos;</code><code class=\"plain\">;</code></div> </div> </div> <p>The above will create an empty module definition with the <tt>any</tt> type. This is sufficient to get you started working with the module but note that the TypeScript compiler can&apos;t assist you with type checks and you won&apos;t have code completion for the module. </p> <p>Finally, reference your module definitions at the top of your <tt>AppModule.ts</tt> to let TypeScript know about them. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"comments\">/// &lt;reference path=&quot;./titanium-modules.d.ts&quot; /&gt;</code></div> </div> </div> <p>You can now use the module in your code by importing it as usual. </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> * as Map from </code><code class=\"string\">&apos;ti.map&apos;</code><code class=\"plain\">;</code></div> </div> </div> <div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\"> <div class=\"title\">Register third-party views as custom template elements</div> <p>In future versions of Titanium Angular it will be possible to register views from modules as custom elements so you can use them inside a template. For now, you have to configure and add third-party views programmatically in your component class. </p> </div> </div> <div class=\"section section-2\" id=\"src-55477107_safe-id-VGl0YW5pdW1Bbmd1bGFyLUZBUS1DYW5JdXNlSHlwZXJsb29wdG9nZXRoZXJ3aXRoVGl0YW5pdW1Bbmd1bGFyPw\"> <h2 class=\"heading\"><span>Can I use Hyperloop together with Titanium Angular?</span></h2> <p>Hyperloop is not supported in this technical preview so far. We are working on this and plan to add Hyperloop support in a later preview release. </p> <p> <span id=\"src-55477107_TitaniumAngular-FAQ-vscode-tasks\"><a class=\"confluence-anchor-link\" name=\"src-55477107_TitaniumAngular-FAQ-vscode-tasks\"/></span> </p> </div> <div class=\"section section-2\" id=\"src-55477107_safe-id-VGl0YW5pdW1Bbmd1bGFyLUZBUS1JZG9uJ3RsaWtld29ya2luZ3dpdGh0aGVDTEkuSG93Y2FuSWF2b2lkdGhhdD8\"> <h2 class=\"heading\"><span>I don&apos;t like working with the CLI. How can I avoid that?</span></h2> <p>You can setup a custom task in VS Code that uses the Appc CLI for a more comfortable development flow. </p> <ol class=\"\"><li> <p>Select <span style=\"color: #444444;\"> </span> <strong> <span style=\"color: #444444;\"> Configure Tasks </span> </strong> <span style=\"color: #444444;\"> from the global </span> <strong> <span style=\"color: #444444;\"> Tasks </span> </strong> <span style=\"color: #444444;\"> menu or </span> open the <strong>Command Pallete</strong> (&#x21E7;&#x2318;P). </p> </li><li class=\"\"> <p>Choose <strong>Task: Configure Task</strong>. </p> </li><li> <p>Select <span style=\"color: #444444;\"> <strong>Create tasks.json file from template</strong> entry. </span> </p> </li></ol> <p> <span style=\"color: #444444;\"> VS Code will then create and open the <tt>task.json</tt> file which you can modify to define your own task. For example, to create a task that will use the Appc CLI to build and run your app in the iOS simulator modify it to look like this. </span> </p> <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\"> <div class=\"title\">task.json</div> <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\" data-title=\"task.json\"> <div class=\"line\"><code class=\"plain\">{</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// See https://go.microsoft.com/fwlink/?LinkId=733558</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// for the documentation about the tasks.json format</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;version&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;2.0.0&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;tasks&quot;</code><code class=\"plain\">: [</code></div> <div class=\"line\"><code class=\"plain\"> {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;label&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;Appc run - iOS&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;type&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;shell&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;command&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;appc run -p ios&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;group&quot;</code><code class=\"plain\">: {</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;kind&quot;</code><code class=\"plain\">: </code><code class=\"string\">&quot;build&quot;</code><code class=\"plain\">,</code></div> <div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">&quot;isDefault&quot;</code><code class=\"plain\">: </code><code class=\"keyword\">true</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> }</code></div> <div class=\"line\"><code class=\"plain\"> ]</code></div> <div class=\"line\"><code class=\"plain\">}</code></div> </div> </div> <p> <span style=\"color: #444444;\"> This will also define the task as the the default build task so t <span style=\"color: #444444;\"> hat it is executed directly when triggering </span> <span style=\"color: #444444;\"> Run Build Task </span> <span style=\"color: #444444;\"> ( </span> </span> &#x21E7;&#x2318;B <span style=\"color: #444444;\"> <span style=\"color: #444444;\"> ). You can also define tasks for other build commands you frequently need. Please refer to the VS Code <a class=\"external-link external-link\" href=\"https://code.visualstudio.com/docs/editor/tasks#_custom-tasks\" target=\"_blank\">custom task</a> documentation for detailed instructions what else you can do with tasks. </span> </span> </p> <p> <span style=\"color: #444444;\"> <span style=\"color: #444444;\"> Additional Angular and TypeScript plugins are also available for both VS Code and other editors like <a class=\"external-link external-link\" href=\"https://atom.io/packages/atom-typescript\" target=\"_blank\">Atom</a> or <a class=\"external-link external-link\" href=\"https://github.com/Microsoft/TypeScript-Sublime-Plugin\" target=\"_blank\">Sublime</a>. </span> </span> </p> </div> </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=55477107\"><span>Edit</span></a> </div> </body> </html> ","title":"Titanium Angular - FAQ"});