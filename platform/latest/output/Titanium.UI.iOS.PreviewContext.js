Ext.data.JsonP['Titanium_UI_iOS_PreviewContext']({"tagname":"class","name":"Titanium.UI.iOS.PreviewContext","extends":"Titanium.Proxy","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"platform":["iphone 5.1.0"],"editurl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/Titanium/UI/iOS/PreviewContext.yml","description":["<p>The PreviewContext is created by the {@link Titanium.UI.iOS#method-createPreviewContext} method. You must set\nthe <code>pop</code> and <code>preview</code> properties when creating a <code>PreviewContext</code> object.</p>\n\n<p>Use this class to configure the previewing context which is displayed while \"peeking\" a view.</p>\n\n<p>Note: This feature requires iOS 9 and a 3D-Touch capable device (such as iPhone 6S or iPhone 6S Plus).\nYou cannot test 3D touch on the iOS simulator.\nTo check if the current device supports 3D touch, use the {@link Titanium.UI.iOS#property-forceTouchSupported}\nproperty and consider using the <code>longpress</code> event to provide a fallback to your users on\nnon-3D-touch devices.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html\">iOS Developer Library: Adopting 3D Touch on iPhone</a></li>\n</ul> \n<h3>Examples</h3>\n<h4>PreviewContext example using a Button as receiver.</h4>\n<p>The example below creates a new preview context and assigns a <code>window</code>, <code>actions</code> and a <code>contentHeight</code>.\nAfter that, we assign the preview context to a view which will trigger the \"peeking\" of it. Note, that this\nis independent from the click event of the view itself.</p>\n\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Index: \" + e.index);\n});\n\nvar subAction = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Subaction\"\n})\n\nsubAction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Subindex: \" + e.index);\n});\n\nvar actionGroup = Ti.UI.iOS.createPreviewActionGroup({\n    title: \"More actions...\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DESTRUCTIVE,\n    actions: [subAction]\n});\n\nactions.push(action);\nactions.push(actionGroup);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n     contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar button = Ti.UI.createButton({\n    previewContext: context, // Will be ignored on unsupported devices\n    title : \"Open Window!\",\n    backgroundColor: \"#A6171C\",\n    width: 200,\n    height: 50,\n    tintColor: \"#fff\"\n});\n\nwin.add(button);\nwin.open();\n</code></pre><h4>PreviewContext example using a ListView as receiver.</h4>\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\n        \"Title: \" + e.title +\n        \"\\nStyle: \" + e.style +\n        \"\\nIndex: \" + e.index +\n        \"\\nSectionIndex: \" + e.sectionIndex +\n        \"\\nItemIndex: \" + e.itemIndex\n    );\n});\n\nactions.push(action);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n    contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after peeking the preview\n// Use this event to configure the preview depending on the sectionIndex / itemIndex\ncontext.addEventListener(\"peek\", function(e) {\n    Ti.API.warn(\"sectionIndex: \" + e.sectionIndex);\n    Ti.API.warn(\"itemIndex: \" + e.itemIndex);\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar listView = Ti.UI.createListView({\n    previewContext: context, // Will be ignored on unsupported devices\n});\n\nvar section1 = Ti.UI.createListSection({\n    headerTitle: \"Section 1\"\n});\n\nvar section2 = Ti.UI.createListSection({\n    headerTitle: \"Section 2\"\n});\n\nvar items = [];\n\nfor(var i = 1; i &lt;= 5; i++) {\n    items.push({\n        properties: {\n            title: \"Cell #\" + i\n        }\n    });\n}\n\nsection1.setItems(items);\nsection2.setItems(items);\nlistView.setSections([section1, section2]);\n\nwin.add(listView);\nwin.open();</code></pre>"]},"private":null,"id":"class-Titanium.UI.iOS.PreviewContext","members":{"cfg":[],"property":[{"name":"actions","tagname":"property","owner":"Titanium.UI.iOS.PreviewContext","meta":{"description":["<p>Provides an array with elements of the type {@link Titanium.UI.iOS.PreviewAction Titanium.UI.iOS.PreviewAction}\nand {@link Titanium.UI.iOS.PreviewActionGroup Ti.UI.iOS.PreviewActionGroup}. Both can be used together.</p>"]},"id":"property-actions"},{"name":"apiName","tagname":"property","owner":"Titanium.Proxy","meta":{"readonly":true,"description":["<p>The value of this property is the fully qualified name of the API. For example, {@link Titanium.UI.Button Button}\nreturns <code>Ti.UI.Button</code>.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0","mobileweb 3.2.0","windowsphone 4.1.0"]},"id":"property-apiName"},{"name":"bubbleParent","tagname":"property","owner":"Titanium.Proxy","meta":{"description":["<p>Some proxies (most commonly views) have a relationship to other proxies, often\nestablished by the add() method. For example, for a button added to a window, a\nclick event on the button would bubble up to the window. Other common parents are\ntable sections to their rows, table views to their sections, and scrollable views\nto their views. Set this property to false to disable the bubbling to the proxy's parent.</p>"],"platform":["android 3.0.0","iphone 3.0.0","ipad 3.0.0","windowsphone 4.1.0"]},"id":"property-bubbleParent"},{"name":"contentHeight","tagname":"property","owner":"Titanium.UI.iOS.PreviewContext","meta":{"description":["<p>Specified the height of the preview which will be shown during \"peeking\".</p>"]},"id":"property-contentHeight"},{"name":"lifecycleContainer","tagname":"property","owner":"Titanium.Proxy","meta":{"description":["<p>If this property is set to a Window or TabGroup, then the corresponding Activity lifecycle event callbacks\nwill also be called on the proxy. Proxies that require the activity lifecycle will need this property set\nto the appropriate containing Window or TabGroup.</p>"],"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"property-lifecycleContainer"},{"name":"preview","tagname":"property","owner":"Titanium.UI.iOS.PreviewContext","meta":{"description":["<p>Provides the preview for \"peeking\". This view is independent from the window which can be openend after\n\"popping\" the preview to give you the ability to provide different layouts for the preview and the full\nwindow. If you want to adjust the preview inside the <code>peek</code> event, change the view assigned to this property.</p>"]},"id":"property-preview"}],"method":[{"name":"addEventListener","tagname":"method","owner":"Titanium.Proxy","meta":{},"id":"method-addEventListener"},{"name":"applyProperties","tagname":"method","owner":"Titanium.Proxy","meta":{"description":["<p>Properties are supplied as a dictionary. Each key-value pair in the object is applied to the proxy such that\nmyproxy[key] = value.</p>"],"platform":["android 3.0.0","iphone 3.0.0","ipad 3.0.0","mobileweb 3.0.0","windowsphone 4.1.0"]},"id":"method-applyProperties"},{"name":"fireEvent","tagname":"method","owner":"Titanium.Proxy","meta":{},"id":"method-fireEvent"},{"name":"getActions","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-getActions"},{"name":"getApiName","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0","mobileweb 3.2.0","windowsphone 4.1.0"]},"id":"method-getApiName"},{"name":"getBubbleParent","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.0.0","iphone 3.0.0","ipad 3.0.0","windowsphone 4.1.0"]},"id":"method-getBubbleParent"},{"name":"getContentHeight","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-getContentHeight"},{"name":"getLifecycleContainer","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"method-getLifecycleContainer"},{"name":"getPreview","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-getPreview"},{"name":"removeEventListener","tagname":"method","owner":"Titanium.Proxy","meta":{"description":["<p>Multiple listeners can be registered for the same event, so the \n<code>callback</code> parameter is used to determine which listener to remove. </p>\n\n<p>When adding a listener, you must save a reference to the callback function\nin order to remove the listener later:</p>\n\n<pre><code>var listener = function() { Ti.API.info(\"Event listener called.\"); }\nwindow.addEventListener('click', listener);\n</code></pre>\n\n<p>To remove the listener, pass in a reference to the callback function:</p>\n\n<pre><code>window.removeEventListener('click', listener);\n</code></pre>"]},"id":"method-removeEventListener"},{"name":"setActions","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-setActions"},{"name":"setBubbleParent","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.0.0","iphone 3.0.0","ipad 3.0.0","windowsphone 4.1.0"]},"id":"method-setBubbleParent"},{"name":"setContentHeight","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-setContentHeight"},{"name":"setLifecycleContainer","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"method-setLifecycleContainer"},{"name":"setPreview","tagname":"method","owner":"Titanium.UI.iOS.PreviewContext","meta":{},"id":"method-setPreview"}],"event":[{"name":"peek","tagname":"event","owner":"Titanium.UI.iOS.PreviewContext","meta":{"description":["<p>You can configure the preview in this event before it is displayed. If the preview context is assigned to a \nnormal view like a {@link Titanium.UI.Button} the <code>preview</code> property can be received here to change the content of it \nbefore displaying. If the preview context is assigned to a {@link Titanium.UI.ListView}, you can also receive the \nproperties <code>sectionIndex</code>, <code>itemIndex</code> and <code>itemId</code> here to access item-specific data to display. </p>\n\n<p>Note: Don't do asynchronous operations like HTTP requests here, since the preview will not wait for the \noperations to complete.</p>"]},"id":"event-peek"},{"name":"pop","tagname":"event","owner":"Titanium.UI.iOS.PreviewContext","meta":{"description":["<p>You can open a window here or update your current UI. If the preview context is assigned to a \nnormal view like a {@link Titanium.UI.Button} the <code>preview</code> property can be received here to change the content of it \nbefore displaying. If the preview context is assigned to a {@link Titanium.UI.ListView}, you can also receive the \nproperties <code>sectionIndex</code>, <code>itemIndex</code> and <code>itemId</code> here to access item-specific data to display. </p>\n\n<p>Note: Don't do asynchronous operations like HTTP requests here, since the preview will not wait for the \noperations to complete.</p>"]},"id":"event-pop"}],"css_var":[],"css_mixin":[]},"linenr":208881,"files":[{"filename":"titanium.js","href":"titanium.html#Titanium-UI-iOS-PreviewContext"}],"html_meta":{"platform":"<ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>5.1.0</li></ul>","editurl":null,"description":"<p><p>The PreviewContext is created by the <a href=\"#!/api/Titanium.UI.iOS-method-createPreviewContext\" rel=\"Titanium.UI.iOS-method-createPreviewContext\" class=\"docClass\">Titanium.UI.iOS.createPreviewContext</a> method. You must set\nthe <code>pop</code> and <code>preview</code> properties when creating a <code>PreviewContext</code> object.</p>\n\n\n\n\n<p>Use this class to configure the previewing context which is displayed while \"peeking\" a view.</p>\n\n\n\n\n<p>Note: This feature requires iOS 9 and a 3D-Touch capable device (such as iPhone 6S or iPhone 6S Plus).\nYou cannot test 3D touch on the iOS simulator.\nTo check if the current device supports 3D touch, use the <a href=\"#!/api/Titanium.UI.iOS-property-forceTouchSupported\" rel=\"Titanium.UI.iOS-property-forceTouchSupported\" class=\"docClass\">Titanium.UI.iOS.forceTouchSupported</a>\nproperty and consider using the <code>longpress</code> event to provide a fallback to your users on\nnon-3D-touch devices.</p>\n\n\n\n\n<p>See also:</p>\n\n\n\n\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html\">iOS Developer Library: Adopting 3D Touch on iPhone</a></li>\n</ul>\n\n\n<p></p>\n\n<h3>Examples</h3>\n\n\n<h4>PreviewContext example using a Button as receiver.</h4>\n\n\n<p>The example below creates a new preview context and assigns a <code>window</code>, <code>actions</code> and a <code>contentHeight</code>.\nAfter that, we assign the preview context to a view which will trigger the \"peeking\" of it. Note, that this\nis independent from the click event of the view itself.</p>\n\n\n\n\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Index: \" + e.index);\n});\n\nvar subAction = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Subaction\"\n})\n\nsubAction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Subindex: \" + e.index);\n});\n\nvar actionGroup = Ti.UI.iOS.createPreviewActionGroup({\n    title: \"More actions...\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DESTRUCTIVE,\n    actions: [subAction]\n});\n\nactions.push(action);\nactions.push(actionGroup);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n     contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar button = Ti.UI.createButton({\n    previewContext: context, // Will be ignored on unsupported devices\n    title : \"Open Window!\",\n    backgroundColor: \"#A6171C\",\n    width: 200,\n    height: 50,\n    tintColor: \"#fff\"\n});\n\nwin.add(button);\nwin.open();\n</code></pre>\n\n\n<h4>PreviewContext example using a ListView as receiver.</h4>\n\n\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\n        \"Title: \" + e.title +\n        \"\\nStyle: \" + e.style +\n        \"\\nIndex: \" + e.index +\n        \"\\nSectionIndex: \" + e.sectionIndex +\n        \"\\nItemIndex: \" + e.itemIndex\n    );\n});\n\nactions.push(action);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n    contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after peeking the preview\n// Use this event to configure the preview depending on the sectionIndex / itemIndex\ncontext.addEventListener(\"peek\", function(e) {\n    Ti.API.warn(\"sectionIndex: \" + e.sectionIndex);\n    Ti.API.warn(\"itemIndex: \" + e.itemIndex);\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar listView = Ti.UI.createListView({\n    previewContext: context, // Will be ignored on unsupported devices\n});\n\nvar section1 = Ti.UI.createListSection({\n    headerTitle: \"Section 1\"\n});\n\nvar section2 = Ti.UI.createListSection({\n    headerTitle: \"Section 2\"\n});\n\nvar items = [];\n\nfor(var i = 1; i &lt;= 5; i++) {\n    items.push({\n        properties: {\n            title: \"Cell #\" + i\n        }\n    });\n}\n\nsection1.setItems(items);\nsection2.setItems(items);\nlistView.setSections([section1, section2]);\n\nwin.add(listView);\nwin.open();</code></pre>\n\n</p>"},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":["Titanium.Proxy","Titanium.UI.iOS.PreviewContext"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><div class='sidebar'><ul class=\"sidebar-platforms\"><li class='platform-iphone' title='iPhone since Titanium SDK 5.1.0'>iPhone 5.1.0</li></ul></div><div class='hierarchy'><div class='classes'><div class='subclass'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='docClass'>Titanium.Proxy</a></div><div class='subclass'> &gt; <strong>Titanium.UI.iOS.PreviewContext</strong></div></div></div><div class='doc-contents'><p>A PreviewContext provides options to configure the iOS 9 3D-Touch \"Peek and Pop\" feature.</p>\n\n\n\n\n<p> <b>Requires:</b> \niOS 9.0 and later \n</p>\n\n<p><p>The PreviewContext is created by the <a href=\"#!/api/Titanium.UI.iOS-method-createPreviewContext\" rel=\"Titanium.UI.iOS-method-createPreviewContext\" class=\"docClass\">Titanium.UI.iOS.createPreviewContext</a> method. You must set\nthe <code>pop</code> and <code>preview</code> properties when creating a <code>PreviewContext</code> object.</p>\n\n\n\n\n<p>Use this class to configure the previewing context which is displayed while \"peeking\" a view.</p>\n\n\n\n\n<p>Note: This feature requires iOS 9 and a 3D-Touch capable device (such as iPhone 6S or iPhone 6S Plus).\nYou cannot test 3D touch on the iOS simulator.\nTo check if the current device supports 3D touch, use the <a href=\"#!/api/Titanium.UI.iOS-property-forceTouchSupported\" rel=\"Titanium.UI.iOS-property-forceTouchSupported\" class=\"docClass\">Titanium.UI.iOS.forceTouchSupported</a>\nproperty and consider using the <code>longpress</code> event to provide a fallback to your users on\nnon-3D-touch devices.</p>\n\n\n\n\n<p>See also:</p>\n\n\n\n\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html\">iOS Developer Library: Adopting 3D Touch on iPhone</a></li>\n</ul>\n\n\n<p></p>\n\n<h3>Examples</h3>\n\n\n<h4>PreviewContext example using a Button as receiver.</h4>\n\n\n<p>The example below creates a new preview context and assigns a <code>window</code>, <code>actions</code> and a <code>contentHeight</code>.\nAfter that, we assign the preview context to a view which will trigger the \"peeking\" of it. Note, that this\nis independent from the click event of the view itself.</p>\n\n\n\n\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Index: \" + e.index);\n});\n\nvar subAction = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Subaction\"\n})\n\nsubAction.addEventListener(\"click\", function(e) {\n    alert(\"Title: \" + e.title + \" / Style: \" + e.style+\" / Subindex: \" + e.index);\n});\n\nvar actionGroup = Ti.UI.iOS.createPreviewActionGroup({\n    title: \"More actions...\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DESTRUCTIVE,\n    actions: [subAction]\n});\n\nactions.push(action);\nactions.push(actionGroup);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n     contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar button = Ti.UI.createButton({\n    previewContext: context, // Will be ignored on unsupported devices\n    title : \"Open Window!\",\n    backgroundColor: \"#A6171C\",\n    width: 200,\n    height: 50,\n    tintColor: \"#fff\"\n});\n\nwin.add(button);\nwin.open();\n</code></pre>\n\n\n<h4>PreviewContext example using a ListView as receiver.</h4>\n\n\n<pre><code>var actions = [];\nvar win = Ti.UI.createWindow({\n    backgroundColor: \"white\"\n});\n\n// The view to be previewed while popping.\nvar previewView = Ti.UI.createView({\n    backgroundColor: \"blue\"\n});\n\n// The window to be opened after popping the preview.\nvar detailWindow = Ti.UI.createWindow({\n    backgroundColor: \"yellow\"\n});\n\ndetailWindow.add(Ti.UI.createLabel({\n    text: \"You made it!\"\n}));\n\n// The actions to be added to the preview context.\nvar action = Ti.UI.iOS.createPreviewAction({\n    title: \"Preview Action\",\n    style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT\n});\n\naction.addEventListener(\"click\", function(e) {\n    alert(\n        \"Title: \" + e.title +\n        \"\\nStyle: \" + e.style +\n        \"\\nIndex: \" + e.index +\n        \"\\nSectionIndex: \" + e.sectionIndex +\n        \"\\nItemIndex: \" + e.itemIndex\n    );\n});\n\nactions.push(action);\n\n// Create the preview context\nvar context = Ti.UI.iOS.createPreviewContext({\n    preview: previewView,\n    actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup\n    contentHeight: 300 // When unspecified, we use the available height\n});\n\n// Fired after peeking the preview\n// Use this event to configure the preview depending on the sectionIndex / itemIndex\ncontext.addEventListener(\"peek\", function(e) {\n    Ti.API.warn(\"sectionIndex: \" + e.sectionIndex);\n    Ti.API.warn(\"itemIndex: \" + e.itemIndex);\n});\n\n// Fired after popping the preview\ncontext.addEventListener(\"pop\", function(e) {\n    detailWindow.open();\n});\n\n// Assign the preview context\nvar listView = Ti.UI.createListView({\n    previewContext: context, // Will be ignored on unsupported devices\n});\n\nvar section1 = Ti.UI.createListSection({\n    headerTitle: \"Section 1\"\n});\n\nvar section2 = Ti.UI.createListSection({\n    headerTitle: \"Section 2\"\n});\n\nvar items = [];\n\nfor(var i = 1; i &lt;= 5; i++) {\n    items.push({\n        properties: {\n            title: \"Cell #\" + i\n        }\n    });\n}\n\nsection1.setItems(items);\nsection2.setItems(items);\nlistView.setSections([section1, section2]);\n\nwin.add(listView);\nwin.open();</code></pre>\n\n</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>5.1.0</li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-actions' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-property-actions' class='name not-expandable'>actions</a><span> : <a href=\"#!/api/Titanium.UI.iOS.PreviewAction\" rel=\"Titanium.UI.iOS.PreviewAction\" class=\"docClass\">Titanium.UI.iOS.PreviewAction</a>[]</span></div><div class='description'><div class='short'><p>The preview actions and preview action groups.</p>\n\n</div><div class='long'><p>The preview actions and preview action groups.</p>\n\n<p><p>Provides an array with elements of the type <a href=\"#!/api/Titanium.UI.iOS.PreviewAction\" rel=\"Titanium.UI.iOS.PreviewAction\" class=\"docClass\">Titanium.UI.iOS.PreviewAction</a>\nand <a href=\"#!/api/Titanium.UI.iOS.PreviewActionGroup\" rel=\"Titanium.UI.iOS.PreviewActionGroup\" class=\"docClass\">Ti.UI.iOS.PreviewActionGroup</a>. Both can be used together.</p>\n\n</p></div></div></div><div id='property-apiName' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-property-apiName' class='name not-expandable'>apiName</a><span> : String</span><strong class='readonly signature' >readonly</strong></div><div class='description'><div class='short'><p>The name of the API that this proxy corresponds to.</p>\n\n</div><div class='long'><p>The name of the API that this proxy corresponds to.</p>\n\n<p><p>The value of this property is the fully qualified name of the API. For example, <a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Button</a>\nreturns <code>Ti.UI.Button</code>.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li><li class='platform-mobileweb'\n        title='Mobile Web'>3.2.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul></div></div></div><div id='property-bubbleParent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-property-bubbleParent' class='name expandable'>bubbleParent</a><span> : Boolean</span></div><div class='description'><div class='short'>Indicates if the proxy will bubble an event to its parent. ...</div><div class='long'><p>Indicates if the proxy will bubble an event to its parent.</p>\n\n<p><p>Some proxies (most commonly views) have a relationship to other proxies, often\nestablished by the add() method. For example, for a button added to a window, a\nclick event on the button would bubble up to the window. Other common parents are\ntable sections to their rows, table views to their sections, and scrollable views\nto their views. Set this property to false to disable the bubbling to the proxy's parent.</p>\n\n</p><p>Default: true</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.0.0</li><li class='platform-iphone'\n        title='iPhone'>3.0.0</li><li class='platform-ipad'\n        title='iPad'>3.0.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul></div></div></div><div id='property-contentHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-property-contentHeight' class='name expandable'>contentHeight</a><span> : Number</span></div><div class='description'><div class='short'>The height of the preview. ...</div><div class='long'><p>The height of the preview.</p>\n\n<p><p>Specified the height of the preview which will be shown during \"peeking\".</p>\n\n</p><p>Default: The available height of the screen.</p></div></div></div><div id='property-lifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-property-lifecycleContainer' class='name not-expandable'>lifecycleContainer</a><span> : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></span></div><div class='description'><div class='short'><p>The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.</p>\n\n</div><div class='long'><p>The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.</p>\n\n<p><p>If this property is set to a Window or TabGroup, then the corresponding Activity lifecycle event callbacks\nwill also be called on the proxy. Proxies that require the activity lifecycle will need this property set\nto the appropriate containing Window or TabGroup.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul></div></div></div><div id='property-preview' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-property-preview' class='name not-expandable'>preview</a><span> : <a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a></span></div><div class='description'><div class='short'><p>The preview view.</p>\n\n</div><div class='long'><p>The preview view.</p>\n\n<p><p>Provides the preview for \"peeking\". This view is independent from the window which can be openend after\n\"popping\" the preview to give you the ability to provide different layouts for the preview and the full\nwindow. If you want to adjust the preview inside the <code>peek</code> event, change the view assigned to this property.</p>\n\n</p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addEventListener' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-addEventListener' class='name expandable'>addEventListener</a>( <span class='pre'>name, callback</span> )</div><div class='description'><div class='short'>Adds the specified callback as an event listener for the named event. ...</div><div class='long'><p>Adds the specified callback as an event listener for the named event.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name of the event.</p>\n\n</div></li><li><span class='pre'>callback</span> : Callback&lt;Object&gt;<div class='sub-desc'><p>Callback function to invoke when the event is fired.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-applyProperties' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-applyProperties' class='name expandable'>applyProperties</a>( <span class='pre'>props</span> )</div><div class='description'><div class='short'>Applies the properties to the proxy. ...</div><div class='long'><p>Applies the properties to the proxy.</p>\n\n<p><p>Properties are supplied as a dictionary. Each key-value pair in the object is applied to the proxy such that\nmyproxy[key] = value.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.0.0</li><li class='platform-iphone'\n        title='iPhone'>3.0.0</li><li class='platform-ipad'\n        title='iPad'>3.0.0</li><li class='platform-mobileweb'\n        title='Mobile Web'>3.0.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>props</span> : <a href=\"#!/api/Dictionary\" rel=\"Dictionary\" class=\"docClass\">Dictionary</a><div class='sub-desc'><p>A dictionary of properties to apply.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-fireEvent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-fireEvent' class='name expandable'>fireEvent</a>( <span class='pre'>name, event</span> )</div><div class='description'><div class='short'>Fires a synthesized event to any registered listeners. ...</div><div class='long'><p>Fires a synthesized event to any registered listeners.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name of the event.</p>\n\n</div></li><li><span class='pre'>event</span> : <a href=\"#!/api/Dictionary\" rel=\"Dictionary\" class=\"docClass\">Dictionary</a><div class='sub-desc'><p>A dictionary of keys and values to add to the <a href=\"#!/api/Titanium.Event\" rel=\"Titanium.Event\" class=\"docClass\">Titanium.Event</a> object sent to the listeners.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-getActions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-getActions' class='name expandable'>getActions</a>( <span class='pre'></span> ) : <a href=\"#!/api/Titanium.UI.iOS.PreviewAction\" rel=\"Titanium.UI.iOS.PreviewAction\" class=\"docClass\">Titanium.UI.iOS.PreviewAction</a>[]</div><div class='description'><div class='short'>Gets the value of the actions property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-actions\" rel=\"Titanium.UI.iOS.PreviewContext-property-actions\" class=\"docClass\">actions</a> property.</p>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Titanium.UI.iOS.PreviewAction\" rel=\"Titanium.UI.iOS.PreviewAction\" class=\"docClass\">Titanium.UI.iOS.PreviewAction</a>[]</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getApiName' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-getApiName' class='name expandable'>getApiName</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'>Gets the value of the apiName property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.Proxy-property-apiName\" rel=\"Titanium.Proxy-property-apiName\" class=\"docClass\">apiName</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li><li class='platform-mobileweb'\n        title='Mobile Web'>3.2.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getBubbleParent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-getBubbleParent' class='name expandable'>getBubbleParent</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'>Gets the value of the bubbleParent property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.Proxy-property-bubbleParent\" rel=\"Titanium.Proxy-property-bubbleParent\" class=\"docClass\">bubbleParent</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.0.0</li><li class='platform-iphone'\n        title='iPhone'>3.0.0</li><li class='platform-ipad'\n        title='iPad'>3.0.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getContentHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-getContentHeight' class='name expandable'>getContentHeight</a>( <span class='pre'></span> ) : Number</div><div class='description'><div class='short'>Gets the value of the contentHeight property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-contentHeight\" rel=\"Titanium.UI.iOS.PreviewContext-property-contentHeight\" class=\"docClass\">contentHeight</a> property.</p>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getLifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-getLifecycleContainer' class='name expandable'>getLifecycleContainer</a>( <span class='pre'></span> ) : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></div><div class='description'><div class='short'>Gets the value of the lifecycleContainer property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.Proxy-property-lifecycleContainer\" rel=\"Titanium.Proxy-property-lifecycleContainer\" class=\"docClass\">lifecycleContainer</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getPreview' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-getPreview' class='name expandable'>getPreview</a>( <span class='pre'></span> ) : <a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a></div><div class='description'><div class='short'>Gets the value of the preview property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-preview\" rel=\"Titanium.UI.iOS.PreviewContext-property-preview\" class=\"docClass\">preview</a> property.</p>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-removeEventListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-removeEventListener' class='name expandable'>removeEventListener</a>( <span class='pre'>name, callback</span> )</div><div class='description'><div class='short'>Removes the specified callback as an event listener for the named event. ...</div><div class='long'><p>Removes the specified callback as an event listener for the named event.</p>\n\n<p><p>Multiple listeners can be registered for the same event, so the \n<code>callback</code> parameter is used to determine which listener to remove. </p>\n\n\n\n\n<p>When adding a listener, you must save a reference to the callback function\nin order to remove the listener later:</p>\n\n\n\n\n<pre><code>var listener = function() { Ti.API.info(\"Event listener called.\"); }\nwindow.addEventListener('click', listener);\n</code></pre>\n\n\n\n\n<p>To remove the listener, pass in a reference to the callback function:</p>\n\n\n\n\n<pre><code>window.removeEventListener('click', listener);\n</code></pre>\n\n</p><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name of the event.</p>\n\n</div></li><li><span class='pre'>callback</span> : Callback&lt;Object&gt;<div class='sub-desc'><p>Callback function to remove. Must be the same function passed to <code>addEventListener</code>.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setActions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-setActions' class='name expandable'>setActions</a>( <span class='pre'>actions</span> )</div><div class='description'><div class='short'>Sets the value of the actions property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-actions\" rel=\"Titanium.UI.iOS.PreviewContext-property-actions\" class=\"docClass\">actions</a> property.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>actions</span> : Array&lt;<a href=\"#!/api/Titanium.UI.iOS.PreviewAction\" rel=\"Titanium.UI.iOS.PreviewAction\" class=\"docClass\">Titanium.UI.iOS.PreviewAction</a>&gt;<div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setBubbleParent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-setBubbleParent' class='name expandable'>setBubbleParent</a>( <span class='pre'>bubbleParent</span> )</div><div class='description'><div class='short'>Sets the value of the bubbleParent property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.Proxy-property-bubbleParent\" rel=\"Titanium.Proxy-property-bubbleParent\" class=\"docClass\">bubbleParent</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.0.0</li><li class='platform-iphone'\n        title='iPhone'>3.0.0</li><li class='platform-ipad'\n        title='iPad'>3.0.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>bubbleParent</span> : Boolean<div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setContentHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-setContentHeight' class='name expandable'>setContentHeight</a>( <span class='pre'>contentHeight</span> )</div><div class='description'><div class='short'>Sets the value of the contentHeight property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-contentHeight\" rel=\"Titanium.UI.iOS.PreviewContext-property-contentHeight\" class=\"docClass\">contentHeight</a> property.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>contentHeight</span> : Number<div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setLifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-setLifecycleContainer' class='name expandable'>setLifecycleContainer</a>( <span class='pre'>lifecycleContainer</span> )</div><div class='description'><div class='short'>Sets the value of the lifecycleContainer property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.Proxy-property-lifecycleContainer\" rel=\"Titanium.Proxy-property-lifecycleContainer\" class=\"docClass\">lifecycleContainer</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lifecycleContainer</span> : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a><div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setPreview' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-method-setPreview' class='name expandable'>setPreview</a>( <span class='pre'>preview</span> )</div><div class='description'><div class='short'>Sets the value of the preview property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.UI.iOS.PreviewContext-property-preview\" rel=\"Titanium.UI.iOS.PreviewContext-property-preview\" class=\"docClass\">preview</a> property.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>preview</span> : <a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a><div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-peek' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-event-peek' class='name expandable'>peek</a></div><div class='description'><div class='short'>Fired when the user peeks the preview. ...</div><div class='long'><p>Fired when the user peeks the preview. You can configure the preview</p>\n\n<p><p>You can configure the preview in this event before it is displayed. If the preview context is assigned to a \nnormal view like a <a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Titanium.UI.Button</a> the <code>preview</code> property can be received here to change the content of it \nbefore displaying. If the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>, you can also receive the \nproperties <code>sectionIndex</code>, <code>itemIndex</code> and <code>itemId</code> here to access item-specific data to display. </p>\n\n\n\n\n<p>Note: Don't do asynchronous operations like HTTP requests here, since the preview will not wait for the \noperations to complete.</p>\n\n</p><h3 class=\"pa\">Properties</h3><ul><li><span class='pre'>preview</span> : <a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a><div class='sub-desc'><p>The view to be previewed.</p>\n\n</div></li><li><span class='pre'>sectionIndex</span> : Number<div class='sub-desc'><p>The section index of the ListView to identify the selected section. \nNote: This property is only available if the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</div></li><li><span class='pre'>itemIndex</span> : Number<div class='sub-desc'><p>The item index of the ListView to identify the selected item. \nNote: This property is only available if the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</div></li><li><span class='pre'>itemId</span> : String<div class='sub-desc'><p>The item ID bound to the list item that generated the event.</p>\n\n</div></li><li><span class='pre'>bubbles</span> : Boolean<div class='sub-desc'><p>True if the event will try to bubble up if possible.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li></ul></div></li><li><span class='pre'>cancelBubble</span> : Boolean<div class='sub-desc'><p>Set to true to stop the event from bubbling.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li></ul></div></li><li><span class='pre'>source</span> : Object<div class='sub-desc'><p>Source object that fired the event.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li><li class='platform-mobileweb' title='Mobile Web' >&nbsp;</li><li class='platform-windowsphone' title='Windows Phone' >&nbsp;</li></ul></div></li><li><span class='pre'>type</span> : String<div class='sub-desc'><p>Name of the event fired.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li><li class='platform-mobileweb' title='Mobile Web' >&nbsp;</li><li class='platform-windowsphone' title='Windows Phone' >&nbsp;</li></ul></div></li></ul></div></div></div><div id='event-pop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.iOS.PreviewContext'>Titanium.UI.iOS.PreviewContext</span></div><a href='#!/api/Titanium.UI.iOS.PreviewContext-event-pop' class='name expandable'>pop</a></div><div class='description'><div class='short'>Fired when the user pop the preview. ...</div><div class='long'><p>Fired when the user pop the preview. You will most likely open a fullscreen window here.</p>\n\n<p><p>You can open a window here or update your current UI. If the preview context is assigned to a \nnormal view like a <a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Titanium.UI.Button</a> the <code>preview</code> property can be received here to change the content of it \nbefore displaying. If the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>, you can also receive the \nproperties <code>sectionIndex</code>, <code>itemIndex</code> and <code>itemId</code> here to access item-specific data to display. </p>\n\n\n\n\n<p>Note: Don't do asynchronous operations like HTTP requests here, since the preview will not wait for the \noperations to complete.</p>\n\n</p><h3 class=\"pa\">Properties</h3><ul><li><span class='pre'>preview</span> : <a href=\"#!/api/Titanium.UI.View\" rel=\"Titanium.UI.View\" class=\"docClass\">Titanium.UI.View</a><div class='sub-desc'><p>The view to be previewed.</p>\n\n</div></li><li><span class='pre'>sectionIndex</span> : Number<div class='sub-desc'><p>The section index of the ListView to identify the selected section. \nNote: This property is only available if the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</div></li><li><span class='pre'>itemIndex</span> : Number<div class='sub-desc'><p>The item index of the ListView to identify the selected item. \nNote: This property is only available if the preview context is assigned to a <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</div></li><li><span class='pre'>itemId</span> : String<div class='sub-desc'><p>The item ID bound to the list item that generated the event.</p>\n\n</div></li><li><span class='pre'>bubbles</span> : Boolean<div class='sub-desc'><p>True if the event will try to bubble up if possible.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li></ul></div></li><li><span class='pre'>cancelBubble</span> : Boolean<div class='sub-desc'><p>Set to true to stop the event from bubbling.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li></ul></div></li><li><span class='pre'>source</span> : Object<div class='sub-desc'><p>Source object that fired the event.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li><li class='platform-mobileweb' title='Mobile Web' >&nbsp;</li><li class='platform-windowsphone' title='Windows Phone' >&nbsp;</li></ul></div></li><li><span class='pre'>type</span> : String<div class='sub-desc'><p>Name of the event fired.</p>\n\n<ul class=\"platforms\"><li class='platform-android' title='Android' >&nbsp;</li><li class='platform-iphone' title='iPhone' >&nbsp;</li><li class='platform-ipad' title='iPad' >&nbsp;</li><li class='platform-mobileweb' title='Mobile Web' >&nbsp;</li><li class='platform-windowsphone' title='Windows Phone' >&nbsp;</li></ul></div></li></ul></div></div></div></div></div></div></div>"});