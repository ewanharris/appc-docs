Ext.data.JsonP['Titanium_UI_ListItem']({"tagname":"class","name":"Titanium.UI.ListItem","extends":"Titanium.Proxy","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"platform":["android 3.1.0","iphone 3.1.0","ipad 3.1.0"],"editurl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/Titanium/UI/ListItem.yml","description":["<p>A list item is a combination of a {@link ListDataItem} and {@link ItemTemplate}.  The list data item\nrepresents the actual data, while the item template represents the style elements of the item.</p>\n\n<p>You do not create <code>ListItem</code> objects with a JavaScript factory method, as you do other Titanium proxies.\nInstead, you pass a {@link ListDataItem} array to the <code>setItems</code> method of a <code>ListSection</code>. The list data items \ncontain the data you want to display in the list.</p>\n\n<p>Alloy applications can use <strong><code>&lt;ListItem&gt;</code></strong> elements to create <code>ListItem</code> objects. <code>&lt;ListItem&gt;</code> elements\nmust be nested inside a <strong><code>&lt;ListSection&gt;</code></strong> element, which itself is nested in a <code>&lt;ListView&gt;</code> element, \nas shown below:</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;ListView id=\"list\"&gt;\n        &lt;ListSection id=\"accounts\"&gt;\n            &lt;ListItem image=\"images/checking_account.png\" title=\"Checking\"/&gt;\n            &lt;ListItem image=\"images/saving_account.png\" title=\"Savings\"/&gt;\n        &lt;/ListSection&gt;\n    &lt;/ListView&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>By default, only the <code>title</code>, <code>image</code> and <code>accessoryType</code> keys of the list data item's\n<code>properties</code> dictionary are displayed if an item template is not defined.  See \"Default List Item\"\nfor an example of using the default template.</p>\n\n<p>See Examples below.</p>\n\n<h4>Item Templates</h4>\n\n<p>To customize the style of a list item, use an item template to create your view structure.</p>\n\n<p>Add key-value pairs of view properties and their values to the <code>properties</code> dictionary of the\nitem template to set view properties of the list item.</p>\n\n<p><strong>Note:</strong> If possible, do not use <code>Ti.UI.SIZE</code> or non-static dimensions to set the\ndimensions of view elements in list items.  Instead, try to use static dimensions. Scrolling in\nthe list view may be jerky if you use non-static dimensions.</p>\n\n<p>Add key-value pairs of event names and their callback functions (or array of callback functions\nfor multiple callback bindings) to the <code>events</code> dictionary of the  item template to bind callbacks\nto events, which are bubbled from the subcomponents of the item.</p>\n\n<p>Add additional views, such as labels or image views, to the <code>childTemplates</code> array of the item\ntemplate. The child templates are item templates with two extra properties:</p>\n\n<ul>\n<li>Set the <code>type</code> property to a Titanium view class, such as <code>Ti.UI.Label</code> or <code>Ti.UI.ImageView</code>,\nto use that view in your template.</li>\n<li>Set the <code>bindId</code> to bind the template to a custom property in the list data item. The custom\nproperties in the list data item contain key-value pairs of view properties and their values.</li>\n</ul>\n\n<p>A list template supports the following view classes:</p>\n\n<ul>\n<li>{@link Titanium.UI.ActivityIndicator}</li>\n<li>{@link Titanium.UI.Button}</li>\n<li>{@link Titanium.UI.ImageView}</li>\n<li>{@link Titanium.UI.Label}</li>\n<li>{@link Titanium.UI.ProgressBar}</li>\n<li>{@link Titanium.UI.Slider}</li>\n<li>{@link Titanium.UI.Switch}</li>\n<li>{@link Titanium.UI.TextArea}</li>\n<li>{@link Titanium.UI.TextField}</li>\n</ul>\n\n<p>For example, suppose you have a list data item defined as <code>{foo:{text: 'foobar'}}</code> and an item\ntemplate defined as <code>{childTemplates: [{type: 'Ti.UI.Label', bindId: 'foo'}]}</code>.  The <code>foo</code>\nproperty in the list data item binds to the label in the template, which sets the <code>text</code>\nproperty of the label in the template to the <code>text</code> property in the list data item.</p>\n\n<p>To bind the list data item to an item template, use the {@link Titanium.UI.ListView#property-templates}\nproperty to map the template to a style name, then use the style name to either set the\n{@link Titanium.UI.ListView#property-defaultItemTemplate} property to globally set the style for all items or set the\n<code>template</code> property of the list data item to override or individually set the style.</p>\n\n<p>On iOS, you can specify one of the template constants for the {@link ListDataItem#property-template} property\nor {@link Titanium.UI.ListView#property-defaultItemTemplate} property: {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_CONTACTS},\n{@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SETTINGS} or {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SUBTITLE}.</p>\n\n<h4>Eventing</h4>\n\n<p>Unlike other views, you cannot use the <code>addEventListener</code> method to bind callbacks to events for a\nListItem.</p>\n\n<p>Use list view's {@link Titanium.UI.ListView#event-itemclick itemclick} event to monitor click events on\nitems in the list view. Do not rely on the <code>source</code> property to determine which item fired the\nevent.  Either use the <code>sectionIndex</code> and <code>itemIndex</code>, or the <code>itemId</code> to determine the list item\nthat generated the event, and use the <code>bindId</code> to check which child control fired the event.\nSee \"Default List Item\" for an example of using the <code>itemclick</code> event.</p>\n\n<p>To monitor events that bubble to the <code>ListItem</code> or to monitor events of the view subcomponents,\nbind them to the item by using the <code>events</code> dictionary of the item template or the child view\ntemplates, respectively. Add the bindings as key-value pairs, where the key is the event name\nand the value is the callback (or array of callbacks for multiple bindings). See \"List Items\nwith an Item Template\" for an example of binding a <code>click</code> event to an item using an item template.</p> \n<h3>Examples</h3>\n<h4>Default List Items</h4>\n<p>Creates a list without using an item template. Monitors the <code>itemclick</code> event to check and\nuncheck tasks.</p>\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView();\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push(\n        { properties: {\n            itemId: tasks[i].id,\n            title: tasks[i].name,\n            image: tasks[i].icon,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n            color: 'black'\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\nlistView.addEventListener('itemclick', function(e){\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    section.updateItemAt(e.itemIndex, item);\n});\nwin.add(listView);\nwin.open();\n</code></pre><h4>Default List Items (Alloy version)</h4>\n<p>Alloy version of previous example. For additional Alloy examples of using <code>ListView</code>, see {@link Titanium.UI.ListView}. </p>\n\n<p>index.xml</p>\n\n<pre><code>&lt;!-- views/index.xml --&gt;\n&lt;Alloy&gt;\n    &lt;Window class=\"container\" title=\"Some things\"&gt;\n        &lt;ListView id=\"listView\"&gt;\n            &lt;ListSection id=\"section\"&gt;\n                &lt;ListItem image=\"images/trash.jpg\" title=\"Take Out the Trash\"/&gt;\n                &lt;ListItem image=\"images/dishes.png\" title=\"Do the Dishes\"/&gt;\n                &lt;ListItem image=\"images/doge.png\" title=\"Walk the Dog\"/&gt;\n            &lt;/ListSection&gt;\n        &lt;/ListView&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>index.js</p>\n\n<pre><code>&lt;!-- controllers/index.js --&gt;\n$.listView.addEventListener('itemclick', function(e){\n    var item = $.section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    $.section.updateItemAt(e.itemIndex, item);\n});\n</code></pre><h4>List Items with an Item Template</h4>\n<p>Previous example modified to use an item template.  The template defines a small icon on the\nfar left, a title label to the right of the icon and a subtitle below the title label in\nsmaller text.</p>\n\n<p>Monitors the <code>click</code> event of the item rather than the <code>itemclick</code> event of the list view.</p>\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\n\nvar plainTemplate = {\n    childTemplates: [\n        {                            // Image justified left\n            type: 'Ti.UI.ImageView', // Use an image view for the image\n            bindId: 'pic',           // Maps to a custom pic property of the item data\n            properties: {            // Sets the image view properties\n                width: '50dp', height: '50dp', left: 0\n            }\n        },\n        {                            // Title\n            type: 'Ti.UI.Label',     // Use a label for the title\n            bindId: 'title',         // Maps to a custom title property of the item data\n            properties: {            // Sets the label properties\n                color: 'black',\n                font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n                left: '60dp', top: 0,\n            },\n        },\n        {                            // Subtitle\n            type: 'Ti.UI.Label',     // Use a label for the subtitle\n            bindId: 'subtitle',      // Maps to a custom subtitle property of the item data\n            properties: {            // Sets the label properties\n                color: 'gray',\n                font: { fontFamily:'Arial', fontSize: '14dp' },\n                left: '60dp', top: '25dp',\n            }\n        }\n    ],\n    // Binds a callback to the click event, which catches events bubbled by the view subcomponents.\n    events: {click: toggleCheck }\n};\n\n// The following JSON API calls copy the plainTemplate object minus functions.\n// This method of copying an object is simple but not quick.\n// If performance is a factor, create your own method to copy an object.\n\nvar redTemplate = JSON.parse(JSON.stringify(plainTemplate));\n// Change the text color to red\nredTemplate.childTemplates[1].properties.color = 'red';\nredTemplate.childTemplates[2].properties.color = 'red';\n// Rebind the click event callback\nredTemplate.events.click = toggleCheck;\n\nvar listView = Ti.UI.createListView({\n    // Maps plainTemplate to 'uncheck' and redTemplate to 'check' \n    templates: { 'uncheck': plainTemplate, 'check': redTemplate },\n    // Use 'uncheck', that is, the plainTemplate created earlier for all items\n    // Can be overridden by the item's template property\n    defaultItemTemplate: 'uncheck'\n});\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', person: 'Yakko', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', person: 'Wakko', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', person: 'Dot', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push({\n        // Maps to the title component in the template\n        // Sets the text property of the Label component\n        title : { text: tasks[i].name },\n        // Maps to the subtitle component in the template\n        // Sets the text property of the Label component\n        subtitle : { text : tasks[i].person },\n        // Maps to the pic component in the template\n        // Sets the image property of the ImageView component\n        pic : { image : tasks[i].icon },\n        // Sets the regular list data properties\n        properties : {\n            itemId: tasks[i].id,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\n\n// Modified version of the `itemclick` event listener\n// Changes the item template rather than the list item's color property\nfunction toggleCheck (e) {\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.template = 'check';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.template = 'uncheck';\n    }\n    section.updateItemAt(e.itemIndex, item);\n} \n\nwin.add(listView);\nwin.open();\n</code></pre>"]},"private":null,"id":"class-Titanium.UI.ListItem","members":{"cfg":[],"property":[{"name":"accessoryType","tagname":"property","owner":"Titanium.UI.ListItem","meta":{},"id":"property-accessoryType"},{"name":"apiName","tagname":"property","owner":"Titanium.Proxy","meta":{"readonly":true,"description":["<p>The value of this property is the fully qualified name of the API. For example, {@link Titanium.UI.Button Button}\nreturns <code>Ti.UI.Button</code>.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0","mobileweb 3.2.0","windowsphone 4.1.0"]},"id":"property-apiName"},{"name":"backgroundColor","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For information about color values, see the \"Colors\" section of {@link Titanium.UI}.</p>"]},"id":"property-backgroundColor"},{"name":"backgroundGradient","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0"]},"id":"property-backgroundGradient"},{"name":"backgroundImage","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>Must be a local resource.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0"]},"id":"property-backgroundImage"},{"name":"canEdit","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For more information see the \"Editing Support\" section of {@link Titanium.UI.ListView}.</p>"],"platform":["iphone 3.2.0","ipad 3.2.0"]},"id":"property-canEdit"},{"name":"canInsert","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For more information see the \"Editing Support\" section of {@link Titanium.UI.ListView}.</p>"],"platform":["iphone 5.2.0","ipad 5.2.0"]},"id":"property-canInsert"},{"name":"canMove","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For more information see the \"Editing Support\" section of {@link Titanium.UI.ListView}.</p>"],"platform":["iphone 3.2.0","ipad 3.2.0"]},"id":"property-canMove"},{"name":"color","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For information about color values, see the \"Colors\" section of {@link Titanium.UI}.</p>\n\n<p>On Android, <code>selectedColor</code> is not supported, so the text is always displayed in this color.</p>\n\n<p>Only applies to the built-in templates.</p>"]},"id":"property-color"},{"name":"editActions","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>For more information see the \"Editing Support\" section of {@link Titanium.UI.ListView}.</p>"],"platform":["iphone 4.1.0","ipad 4.1.0"]},"id":"property-editActions"},{"name":"font","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>Only applies to the built-in templates.</p>"]},"id":"property-font"},{"name":"height","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>On Android, the value can be either a float value or a dimension string, for example, '40dp'.\nBy default, the minimum height is 30 dp on the Android platform.</p>\n\n<p>On iOS, the value can only be an absolute value.</p>"]},"id":"property-height"},{"name":"image","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>On iOS, the image is on the left, and on Android, the image is on the right.</p>\n\n<p>On Android, this image only appears on the default template.</p>\n\n<p>On iOS, only local images are supported.</p>\n\n<p>On iOS, this image only appears if the ListDataItem <code>template</code> property or ListView\n<code>defaultItemTemplate</code> property is either: {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_DEFAULT},\n{@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SETTINGS} or {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SUBTITLE}.</p>"]},"id":"property-image"},{"name":"itemId","tagname":"property","owner":"Titanium.UI.ListItem","meta":{},"id":"property-itemId"},{"name":"lifecycleContainer","tagname":"property","owner":"Titanium.Proxy","meta":{"description":["<p>If this property is set to a Window or TabGroup, then the corresponding Activity lifecycle event callbacks\nwill also be called on the proxy. Proxies that require the activity lifecycle will need this property set\nto the appropriate containing Window or TabGroup.</p>"],"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"property-lifecycleContainer"},{"name":"searchableText","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>Used in conjunction with {@link Titanium.UI.ListView#property-searchView searchView}, {@link Titanium.UI.ListView#property-searchText searchText} and {@link Titanium.UI.ListView#property-caseInsensitiveSearch caseInsensitiveSearch} properties of ListView.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0"]},"id":"property-searchableText"},{"name":"selectedBackgroundColor","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.\nFor information about color values, see the \"Colors\" section of {@link Titanium.UI}.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0"]},"id":"property-selectedBackgroundColor"},{"name":"selectedBackgroundGradient","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"platform":["iphone 3.2.0","ipad 3.2.0"]},"id":"property-selectedBackgroundGradient"},{"name":"selectedBackgroundImage","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>Must be a local resource.\nOn Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.</p>"],"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0"]},"id":"property-selectedBackgroundImage"},{"name":"selectionStyle","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>Specify one of the constants from {@link Titanium.UI.iPhone.ListViewCellSelectionStyle}.</p>"],"platform":["iphone 3.1.0","ipad 3.1.0"]},"id":"property-selectionStyle"},{"name":"subtitle","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>This subtitle only appears if the ListDataItem <code>template</code> property or ListView\n<code>defaultItemTemplate</code> property is set to either: {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_CONTACTS},\n{@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SETTINGS} or {@link Titanium.UI#property-LIST_ITEM_TEMPLATE_SUBTITLE}.</p>"],"platform":["iphone 3.1.0","ipad 3.1.0"]},"id":"property-subtitle"},{"name":"title","tagname":"property","owner":"Titanium.UI.ListItem","meta":{"description":["<p>This title only appears for the built-in templates.</p>"]},"id":"property-title"}],"method":[{"name":"getApiName","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.2.0","iphone 3.2.0","ipad 3.2.0","mobileweb 3.2.0","windowsphone 4.1.0"]},"id":"method-getApiName"},{"name":"getEditActions","tagname":"method","owner":"Titanium.UI.ListItem","meta":{"platform":["iphone 4.1.0","ipad 4.1.0"]},"id":"method-getEditActions"},{"name":"getLifecycleContainer","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"method-getLifecycleContainer"},{"name":"setEditActions","tagname":"method","owner":"Titanium.UI.ListItem","meta":{"platform":["iphone 4.1.0","ipad 4.1.0"]},"id":"method-setEditActions"},{"name":"setLifecycleContainer","tagname":"method","owner":"Titanium.Proxy","meta":{"platform":["android 3.6.0","windowsphone 4.1.0"]},"id":"method-setLifecycleContainer"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":144240,"files":[{"filename":"titanium.js","href":"titanium.html#Titanium-UI-ListItem"}],"html_meta":{"platform":"<ul class='platforms'><li class='platform-android'\n        title='Android'>3.1.0</li><li class='platform-iphone'\n        title='iPhone'>3.1.0</li><li class='platform-ipad'\n        title='iPad'>3.1.0</li></ul>","editurl":null,"description":"<p><p>A list item is a combination of a <a href=\"#!/api/ListDataItem\" rel=\"ListDataItem\" class=\"docClass\">ListDataItem</a> and <a href=\"#!/api/ItemTemplate\" rel=\"ItemTemplate\" class=\"docClass\">ItemTemplate</a>.  The list data item\nrepresents the actual data, while the item template represents the style elements of the item.</p>\n\n\n\n\n<p>You do not create <code>ListItem</code> objects with a JavaScript factory method, as you do other Titanium proxies.\nInstead, you pass a <a href=\"#!/api/ListDataItem\" rel=\"ListDataItem\" class=\"docClass\">ListDataItem</a> array to the <code>setItems</code> method of a <code>ListSection</code>. The list data items \ncontain the data you want to display in the list.</p>\n\n\n\n\n<p>Alloy applications can use <strong><code>&lt;ListItem&gt;</code></strong> elements to create <code>ListItem</code> objects. <code>&lt;ListItem&gt;</code> elements\nmust be nested inside a <strong><code>&lt;ListSection&gt;</code></strong> element, which itself is nested in a <code>&lt;ListView&gt;</code> element, \nas shown below:</p>\n\n\n\n\n<pre><code>&lt;Alloy&gt;\n    &lt;ListView id=\"list\"&gt;\n        &lt;ListSection id=\"accounts\"&gt;\n            &lt;ListItem image=\"images/checking_account.png\" title=\"Checking\"/&gt;\n            &lt;ListItem image=\"images/saving_account.png\" title=\"Savings\"/&gt;\n        &lt;/ListSection&gt;\n    &lt;/ListView&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n\n\n\n<p>By default, only the <code>title</code>, <code>image</code> and <code>accessoryType</code> keys of the list data item's\n<code>properties</code> dictionary are displayed if an item template is not defined.  See \"Default List Item\"\nfor an example of using the default template.</p>\n\n\n\n\n<p>See Examples below.</p>\n\n\n\n\n<h4>Item Templates</h4>\n\n\n\n\n<p>To customize the style of a list item, use an item template to create your view structure.</p>\n\n\n\n\n<p>Add key-value pairs of view properties and their values to the <code>properties</code> dictionary of the\nitem template to set view properties of the list item.</p>\n\n\n\n\n<p><strong>Note:</strong> If possible, do not use <code>Ti.UI.SIZE</code> or non-static dimensions to set the\ndimensions of view elements in list items.  Instead, try to use static dimensions. Scrolling in\nthe list view may be jerky if you use non-static dimensions.</p>\n\n\n\n\n<p>Add key-value pairs of event names and their callback functions (or array of callback functions\nfor multiple callback bindings) to the <code>events</code> dictionary of the  item template to bind callbacks\nto events, which are bubbled from the subcomponents of the item.</p>\n\n\n\n\n<p>Add additional views, such as labels or image views, to the <code>childTemplates</code> array of the item\ntemplate. The child templates are item templates with two extra properties:</p>\n\n\n\n\n<ul>\n<li>Set the <code>type</code> property to a Titanium view class, such as <code>Ti.UI.Label</code> or <code>Ti.UI.ImageView</code>,\nto use that view in your template.</li>\n<li>Set the <code>bindId</code> to bind the template to a custom property in the list data item. The custom\nproperties in the list data item contain key-value pairs of view properties and their values.</li>\n</ul>\n\n\n\n\n<p>A list template supports the following view classes:</p>\n\n\n\n\n<ul>\n<li><a href=\"#!/api/Titanium.UI.ActivityIndicator\" rel=\"Titanium.UI.ActivityIndicator\" class=\"docClass\">Titanium.UI.ActivityIndicator</a></li>\n<li><a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Titanium.UI.Button</a></li>\n<li><a href=\"#!/api/Titanium.UI.ImageView\" rel=\"Titanium.UI.ImageView\" class=\"docClass\">Titanium.UI.ImageView</a></li>\n<li><a href=\"#!/api/Titanium.UI.Label\" rel=\"Titanium.UI.Label\" class=\"docClass\">Titanium.UI.Label</a></li>\n<li><a href=\"#!/api/Titanium.UI.ProgressBar\" rel=\"Titanium.UI.ProgressBar\" class=\"docClass\">Titanium.UI.ProgressBar</a></li>\n<li><a href=\"#!/api/Titanium.UI.Slider\" rel=\"Titanium.UI.Slider\" class=\"docClass\">Titanium.UI.Slider</a></li>\n<li><a href=\"#!/api/Titanium.UI.Switch\" rel=\"Titanium.UI.Switch\" class=\"docClass\">Titanium.UI.Switch</a></li>\n<li><a href=\"#!/api/Titanium.UI.TextArea\" rel=\"Titanium.UI.TextArea\" class=\"docClass\">Titanium.UI.TextArea</a></li>\n<li><a href=\"#!/api/Titanium.UI.TextField\" rel=\"Titanium.UI.TextField\" class=\"docClass\">Titanium.UI.TextField</a></li>\n</ul>\n\n\n\n\n<p>For example, suppose you have a list data item defined as <code>{foo:{text: 'foobar'}}</code> and an item\ntemplate defined as <code>{childTemplates: [{type: 'Ti.UI.Label', bindId: 'foo'}]}</code>.  The <code>foo</code>\nproperty in the list data item binds to the label in the template, which sets the <code>text</code>\nproperty of the label in the template to the <code>text</code> property in the list data item.</p>\n\n\n\n\n<p>To bind the list data item to an item template, use the <a href=\"#!/api/Titanium.UI.ListView-property-templates\" rel=\"Titanium.UI.ListView-property-templates\" class=\"docClass\">Titanium.UI.ListView.templates</a>\nproperty to map the template to a style name, then use the style name to either set the\n<a href=\"#!/api/Titanium.UI.ListView-property-defaultItemTemplate\" rel=\"Titanium.UI.ListView-property-defaultItemTemplate\" class=\"docClass\">Titanium.UI.ListView.defaultItemTemplate</a> property to globally set the style for all items or set the\n<code>template</code> property of the list data item to override or individually set the style.</p>\n\n\n\n\n<p>On iOS, you can specify one of the template constants for the <a href=\"#!/api/ListDataItem-property-template\" rel=\"ListDataItem-property-template\" class=\"docClass\">ListDataItem.template</a> property\nor <a href=\"#!/api/Titanium.UI.ListView-property-defaultItemTemplate\" rel=\"Titanium.UI.ListView-property-defaultItemTemplate\" class=\"docClass\">Titanium.UI.ListView.defaultItemTemplate</a> property: <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS</a>,\n<a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS</a> or <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE</a>.</p>\n\n\n\n\n<h4>Eventing</h4>\n\n\n\n\n<p>Unlike other views, you cannot use the <code>addEventListener</code> method to bind callbacks to events for a\nListItem.</p>\n\n\n\n\n<p>Use list view's <a href=\"#!/api/Titanium.UI.ListView-event-itemclick\" rel=\"Titanium.UI.ListView-event-itemclick\" class=\"docClass\">itemclick</a> event to monitor click events on\nitems in the list view. Do not rely on the <code>source</code> property to determine which item fired the\nevent.  Either use the <code>sectionIndex</code> and <code>itemIndex</code>, or the <code>itemId</code> to determine the list item\nthat generated the event, and use the <code>bindId</code> to check which child control fired the event.\nSee \"Default List Item\" for an example of using the <code>itemclick</code> event.</p>\n\n\n\n\n<p>To monitor events that bubble to the <code>ListItem</code> or to monitor events of the view subcomponents,\nbind them to the item by using the <code>events</code> dictionary of the item template or the child view\ntemplates, respectively. Add the bindings as key-value pairs, where the key is the event name\nand the value is the callback (or array of callbacks for multiple bindings). See \"List Items\nwith an Item Template\" for an example of binding a <code>click</code> event to an item using an item template.</p>\n\n\n<p></p>\n\n<h3>Examples</h3>\n\n\n<h4>Default List Items</h4>\n\n\n<p>Creates a list without using an item template. Monitors the <code>itemclick</code> event to check and\nuncheck tasks.</p>\n\n\n\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView();\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push(\n        { properties: {\n            itemId: tasks[i].id,\n            title: tasks[i].name,\n            image: tasks[i].icon,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n            color: 'black'\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\nlistView.addEventListener('itemclick', function(e){\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    section.updateItemAt(e.itemIndex, item);\n});\nwin.add(listView);\nwin.open();\n</code></pre>\n\n\n<h4>Default List Items (Alloy version)</h4>\n\n\n<p>Alloy version of previous example. For additional Alloy examples of using <code>ListView</code>, see <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>. </p>\n\n\n\n\n<p>index.xml</p>\n\n\n\n\n<pre><code>&lt;!-- views/index.xml --&gt;\n&lt;Alloy&gt;\n    &lt;Window class=\"container\" title=\"Some things\"&gt;\n        &lt;ListView id=\"listView\"&gt;\n            &lt;ListSection id=\"section\"&gt;\n                &lt;ListItem image=\"images/trash.jpg\" title=\"Take Out the Trash\"/&gt;\n                &lt;ListItem image=\"images/dishes.png\" title=\"Do the Dishes\"/&gt;\n                &lt;ListItem image=\"images/doge.png\" title=\"Walk the Dog\"/&gt;\n            &lt;/ListSection&gt;\n        &lt;/ListView&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n\n\n\n<p>index.js</p>\n\n\n\n\n<pre><code>&lt;!-- controllers/index.js --&gt;\n$.listView.addEventListener('itemclick', function(e){\n    var item = $.section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    $.section.updateItemAt(e.itemIndex, item);\n});\n</code></pre>\n\n\n<h4>List Items with an Item Template</h4>\n\n\n<p>Previous example modified to use an item template.  The template defines a small icon on the\nfar left, a title label to the right of the icon and a subtitle below the title label in\nsmaller text.</p>\n\n\n\n\n<p>Monitors the <code>click</code> event of the item rather than the <code>itemclick</code> event of the list view.</p>\n\n\n\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\n\nvar plainTemplate = {\n    childTemplates: [\n        {                            // Image justified left\n            type: 'Ti.UI.ImageView', // Use an image view for the image\n            bindId: 'pic',           // Maps to a custom pic property of the item data\n            properties: {            // Sets the image view properties\n                width: '50dp', height: '50dp', left: 0\n            }\n        },\n        {                            // Title\n            type: 'Ti.UI.Label',     // Use a label for the title\n            bindId: 'title',         // Maps to a custom title property of the item data\n            properties: {            // Sets the label properties\n                color: 'black',\n                font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n                left: '60dp', top: 0,\n            },\n        },\n        {                            // Subtitle\n            type: 'Ti.UI.Label',     // Use a label for the subtitle\n            bindId: 'subtitle',      // Maps to a custom subtitle property of the item data\n            properties: {            // Sets the label properties\n                color: 'gray',\n                font: { fontFamily:'Arial', fontSize: '14dp' },\n                left: '60dp', top: '25dp',\n            }\n        }\n    ],\n    // Binds a callback to the click event, which catches events bubbled by the view subcomponents.\n    events: {click: toggleCheck }\n};\n\n// The following JSON API calls copy the plainTemplate object minus functions.\n// This method of copying an object is simple but not quick.\n// If performance is a factor, create your own method to copy an object.\n\nvar redTemplate = JSON.parse(JSON.stringify(plainTemplate));\n// Change the text color to red\nredTemplate.childTemplates[1].properties.color = 'red';\nredTemplate.childTemplates[2].properties.color = 'red';\n// Rebind the click event callback\nredTemplate.events.click = toggleCheck;\n\nvar listView = Ti.UI.createListView({\n    // Maps plainTemplate to 'uncheck' and redTemplate to 'check' \n    templates: { 'uncheck': plainTemplate, 'check': redTemplate },\n    // Use 'uncheck', that is, the plainTemplate created earlier for all items\n    // Can be overridden by the item's template property\n    defaultItemTemplate: 'uncheck'\n});\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', person: 'Yakko', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', person: 'Wakko', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', person: 'Dot', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push({\n        // Maps to the title component in the template\n        // Sets the text property of the Label component\n        title : { text: tasks[i].name },\n        // Maps to the subtitle component in the template\n        // Sets the text property of the Label component\n        subtitle : { text : tasks[i].person },\n        // Maps to the pic component in the template\n        // Sets the image property of the ImageView component\n        pic : { image : tasks[i].icon },\n        // Sets the regular list data properties\n        properties : {\n            itemId: tasks[i].id,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\n\n// Modified version of the `itemclick` event listener\n// Changes the item template rather than the list item's color property\nfunction toggleCheck (e) {\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.template = 'check';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.template = 'uncheck';\n    }\n    section.updateItemAt(e.itemIndex, item);\n} \n\nwin.add(listView);\nwin.open();\n</code></pre>\n\n</p>"},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":["Titanium.Proxy","Titanium.UI.ListItem"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><div class='sidebar'><ul class=\"sidebar-platforms\"><li class='platform-android' title='Android since Titanium SDK 3.1.0'>Android 3.1.0</li><li class='platform-iphone' title='iPhone since Titanium SDK 3.1.0'>iPhone 3.1.0</li><li class='platform-ipad' title='iPad since Titanium SDK 3.1.0'>iPad 3.1.0</li></ul></div><div class='hierarchy'><div class='classes'><div class='subclass'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='docClass'>Titanium.Proxy</a></div><div class='subclass'> &gt; <strong>Titanium.UI.ListItem</strong></div></div></div><div class='doc-contents'><p>A list item is an individual item in a list section.</p>\n\n<p><p>A list item is a combination of a <a href=\"#!/api/ListDataItem\" rel=\"ListDataItem\" class=\"docClass\">ListDataItem</a> and <a href=\"#!/api/ItemTemplate\" rel=\"ItemTemplate\" class=\"docClass\">ItemTemplate</a>.  The list data item\nrepresents the actual data, while the item template represents the style elements of the item.</p>\n\n\n\n\n<p>You do not create <code>ListItem</code> objects with a JavaScript factory method, as you do other Titanium proxies.\nInstead, you pass a <a href=\"#!/api/ListDataItem\" rel=\"ListDataItem\" class=\"docClass\">ListDataItem</a> array to the <code>setItems</code> method of a <code>ListSection</code>. The list data items \ncontain the data you want to display in the list.</p>\n\n\n\n\n<p>Alloy applications can use <strong><code>&lt;ListItem&gt;</code></strong> elements to create <code>ListItem</code> objects. <code>&lt;ListItem&gt;</code> elements\nmust be nested inside a <strong><code>&lt;ListSection&gt;</code></strong> element, which itself is nested in a <code>&lt;ListView&gt;</code> element, \nas shown below:</p>\n\n\n\n\n<pre><code>&lt;Alloy&gt;\n    &lt;ListView id=\"list\"&gt;\n        &lt;ListSection id=\"accounts\"&gt;\n            &lt;ListItem image=\"images/checking_account.png\" title=\"Checking\"/&gt;\n            &lt;ListItem image=\"images/saving_account.png\" title=\"Savings\"/&gt;\n        &lt;/ListSection&gt;\n    &lt;/ListView&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n\n\n\n<p>By default, only the <code>title</code>, <code>image</code> and <code>accessoryType</code> keys of the list data item's\n<code>properties</code> dictionary are displayed if an item template is not defined.  See \"Default List Item\"\nfor an example of using the default template.</p>\n\n\n\n\n<p>See Examples below.</p>\n\n\n\n\n<h4>Item Templates</h4>\n\n\n\n\n<p>To customize the style of a list item, use an item template to create your view structure.</p>\n\n\n\n\n<p>Add key-value pairs of view properties and their values to the <code>properties</code> dictionary of the\nitem template to set view properties of the list item.</p>\n\n\n\n\n<p><strong>Note:</strong> If possible, do not use <code>Ti.UI.SIZE</code> or non-static dimensions to set the\ndimensions of view elements in list items.  Instead, try to use static dimensions. Scrolling in\nthe list view may be jerky if you use non-static dimensions.</p>\n\n\n\n\n<p>Add key-value pairs of event names and their callback functions (or array of callback functions\nfor multiple callback bindings) to the <code>events</code> dictionary of the  item template to bind callbacks\nto events, which are bubbled from the subcomponents of the item.</p>\n\n\n\n\n<p>Add additional views, such as labels or image views, to the <code>childTemplates</code> array of the item\ntemplate. The child templates are item templates with two extra properties:</p>\n\n\n\n\n<ul>\n<li>Set the <code>type</code> property to a Titanium view class, such as <code>Ti.UI.Label</code> or <code>Ti.UI.ImageView</code>,\nto use that view in your template.</li>\n<li>Set the <code>bindId</code> to bind the template to a custom property in the list data item. The custom\nproperties in the list data item contain key-value pairs of view properties and their values.</li>\n</ul>\n\n\n\n\n<p>A list template supports the following view classes:</p>\n\n\n\n\n<ul>\n<li><a href=\"#!/api/Titanium.UI.ActivityIndicator\" rel=\"Titanium.UI.ActivityIndicator\" class=\"docClass\">Titanium.UI.ActivityIndicator</a></li>\n<li><a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Titanium.UI.Button</a></li>\n<li><a href=\"#!/api/Titanium.UI.ImageView\" rel=\"Titanium.UI.ImageView\" class=\"docClass\">Titanium.UI.ImageView</a></li>\n<li><a href=\"#!/api/Titanium.UI.Label\" rel=\"Titanium.UI.Label\" class=\"docClass\">Titanium.UI.Label</a></li>\n<li><a href=\"#!/api/Titanium.UI.ProgressBar\" rel=\"Titanium.UI.ProgressBar\" class=\"docClass\">Titanium.UI.ProgressBar</a></li>\n<li><a href=\"#!/api/Titanium.UI.Slider\" rel=\"Titanium.UI.Slider\" class=\"docClass\">Titanium.UI.Slider</a></li>\n<li><a href=\"#!/api/Titanium.UI.Switch\" rel=\"Titanium.UI.Switch\" class=\"docClass\">Titanium.UI.Switch</a></li>\n<li><a href=\"#!/api/Titanium.UI.TextArea\" rel=\"Titanium.UI.TextArea\" class=\"docClass\">Titanium.UI.TextArea</a></li>\n<li><a href=\"#!/api/Titanium.UI.TextField\" rel=\"Titanium.UI.TextField\" class=\"docClass\">Titanium.UI.TextField</a></li>\n</ul>\n\n\n\n\n<p>For example, suppose you have a list data item defined as <code>{foo:{text: 'foobar'}}</code> and an item\ntemplate defined as <code>{childTemplates: [{type: 'Ti.UI.Label', bindId: 'foo'}]}</code>.  The <code>foo</code>\nproperty in the list data item binds to the label in the template, which sets the <code>text</code>\nproperty of the label in the template to the <code>text</code> property in the list data item.</p>\n\n\n\n\n<p>To bind the list data item to an item template, use the <a href=\"#!/api/Titanium.UI.ListView-property-templates\" rel=\"Titanium.UI.ListView-property-templates\" class=\"docClass\">Titanium.UI.ListView.templates</a>\nproperty to map the template to a style name, then use the style name to either set the\n<a href=\"#!/api/Titanium.UI.ListView-property-defaultItemTemplate\" rel=\"Titanium.UI.ListView-property-defaultItemTemplate\" class=\"docClass\">Titanium.UI.ListView.defaultItemTemplate</a> property to globally set the style for all items or set the\n<code>template</code> property of the list data item to override or individually set the style.</p>\n\n\n\n\n<p>On iOS, you can specify one of the template constants for the <a href=\"#!/api/ListDataItem-property-template\" rel=\"ListDataItem-property-template\" class=\"docClass\">ListDataItem.template</a> property\nor <a href=\"#!/api/Titanium.UI.ListView-property-defaultItemTemplate\" rel=\"Titanium.UI.ListView-property-defaultItemTemplate\" class=\"docClass\">Titanium.UI.ListView.defaultItemTemplate</a> property: <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS</a>,\n<a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS</a> or <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE</a>.</p>\n\n\n\n\n<h4>Eventing</h4>\n\n\n\n\n<p>Unlike other views, you cannot use the <code>addEventListener</code> method to bind callbacks to events for a\nListItem.</p>\n\n\n\n\n<p>Use list view's <a href=\"#!/api/Titanium.UI.ListView-event-itemclick\" rel=\"Titanium.UI.ListView-event-itemclick\" class=\"docClass\">itemclick</a> event to monitor click events on\nitems in the list view. Do not rely on the <code>source</code> property to determine which item fired the\nevent.  Either use the <code>sectionIndex</code> and <code>itemIndex</code>, or the <code>itemId</code> to determine the list item\nthat generated the event, and use the <code>bindId</code> to check which child control fired the event.\nSee \"Default List Item\" for an example of using the <code>itemclick</code> event.</p>\n\n\n\n\n<p>To monitor events that bubble to the <code>ListItem</code> or to monitor events of the view subcomponents,\nbind them to the item by using the <code>events</code> dictionary of the item template or the child view\ntemplates, respectively. Add the bindings as key-value pairs, where the key is the event name\nand the value is the callback (or array of callbacks for multiple bindings). See \"List Items\nwith an Item Template\" for an example of binding a <code>click</code> event to an item using an item template.</p>\n\n\n<p></p>\n\n<h3>Examples</h3>\n\n\n<h4>Default List Items</h4>\n\n\n<p>Creates a list without using an item template. Monitors the <code>itemclick</code> event to check and\nuncheck tasks.</p>\n\n\n\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView();\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push(\n        { properties: {\n            itemId: tasks[i].id,\n            title: tasks[i].name,\n            image: tasks[i].icon,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n            color: 'black'\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\nlistView.addEventListener('itemclick', function(e){\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    section.updateItemAt(e.itemIndex, item);\n});\nwin.add(listView);\nwin.open();\n</code></pre>\n\n\n<h4>Default List Items (Alloy version)</h4>\n\n\n<p>Alloy version of previous example. For additional Alloy examples of using <code>ListView</code>, see <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>. </p>\n\n\n\n\n<p>index.xml</p>\n\n\n\n\n<pre><code>&lt;!-- views/index.xml --&gt;\n&lt;Alloy&gt;\n    &lt;Window class=\"container\" title=\"Some things\"&gt;\n        &lt;ListView id=\"listView\"&gt;\n            &lt;ListSection id=\"section\"&gt;\n                &lt;ListItem image=\"images/trash.jpg\" title=\"Take Out the Trash\"/&gt;\n                &lt;ListItem image=\"images/dishes.png\" title=\"Do the Dishes\"/&gt;\n                &lt;ListItem image=\"images/doge.png\" title=\"Walk the Dog\"/&gt;\n            &lt;/ListSection&gt;\n        &lt;/ListView&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n\n\n\n<p>index.js</p>\n\n\n\n\n<pre><code>&lt;!-- controllers/index.js --&gt;\n$.listView.addEventListener('itemclick', function(e){\n    var item = $.section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    $.section.updateItemAt(e.itemIndex, item);\n});\n</code></pre>\n\n\n<h4>List Items with an Item Template</h4>\n\n\n<p>Previous example modified to use an item template.  The template defines a small icon on the\nfar left, a title label to the right of the icon and a subtitle below the title label in\nsmaller text.</p>\n\n\n\n\n<p>Monitors the <code>click</code> event of the item rather than the <code>itemclick</code> event of the list view.</p>\n\n\n\n\n<pre><code>var win = Ti.UI.createWindow({backgroundColor: 'white'});\n\nvar plainTemplate = {\n    childTemplates: [\n        {                            // Image justified left\n            type: 'Ti.UI.ImageView', // Use an image view for the image\n            bindId: 'pic',           // Maps to a custom pic property of the item data\n            properties: {            // Sets the image view properties\n                width: '50dp', height: '50dp', left: 0\n            }\n        },\n        {                            // Title\n            type: 'Ti.UI.Label',     // Use a label for the title\n            bindId: 'title',         // Maps to a custom title property of the item data\n            properties: {            // Sets the label properties\n                color: 'black',\n                font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n                left: '60dp', top: 0,\n            },\n        },\n        {                            // Subtitle\n            type: 'Ti.UI.Label',     // Use a label for the subtitle\n            bindId: 'subtitle',      // Maps to a custom subtitle property of the item data\n            properties: {            // Sets the label properties\n                color: 'gray',\n                font: { fontFamily:'Arial', fontSize: '14dp' },\n                left: '60dp', top: '25dp',\n            }\n        }\n    ],\n    // Binds a callback to the click event, which catches events bubbled by the view subcomponents.\n    events: {click: toggleCheck }\n};\n\n// The following JSON API calls copy the plainTemplate object minus functions.\n// This method of copying an object is simple but not quick.\n// If performance is a factor, create your own method to copy an object.\n\nvar redTemplate = JSON.parse(JSON.stringify(plainTemplate));\n// Change the text color to red\nredTemplate.childTemplates[1].properties.color = 'red';\nredTemplate.childTemplates[2].properties.color = 'red';\n// Rebind the click event callback\nredTemplate.events.click = toggleCheck;\n\nvar listView = Ti.UI.createListView({\n    // Maps plainTemplate to 'uncheck' and redTemplate to 'check' \n    templates: { 'uncheck': plainTemplate, 'check': redTemplate },\n    // Use 'uncheck', that is, the plainTemplate created earlier for all items\n    // Can be overridden by the item's template property\n    defaultItemTemplate: 'uncheck'\n});\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', person: 'Yakko', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', person: 'Wakko', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', person: 'Dot', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i &lt; tasks.length; i++) {\n    data.push({\n        // Maps to the title component in the template\n        // Sets the text property of the Label component\n        title : { text: tasks[i].name },\n        // Maps to the subtitle component in the template\n        // Sets the text property of the Label component\n        subtitle : { text : tasks[i].person },\n        // Maps to the pic component in the template\n        // Sets the image property of the ImageView component\n        pic : { image : tasks[i].icon },\n        // Sets the regular list data properties\n        properties : {\n            itemId: tasks[i].id,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\n\n// Modified version of the `itemclick` event listener\n// Changes the item template rather than the list item's color property\nfunction toggleCheck (e) {\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.template = 'check';\n    }\n    else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.template = 'uncheck';\n    }\n    section.updateItemAt(e.itemIndex, item);\n} \n\nwin.add(listView);\nwin.open();\n</code></pre>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.1.0</li><li class='platform-iphone'\n        title='iPhone'>3.1.0</li><li class='platform-ipad'\n        title='iPad'>3.1.0</li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-accessoryType' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-accessoryType' class='name expandable'>accessoryType</a><span> : Number</span></div><div class='description'><div class='short'>Sets an accessory on the right side of an item. ...</div><div class='long'><p>Sets an accessory on the right side of an item.</p>\n\n\n\n\n<p>This API can be assigned the following constants:<ul>\n <li> <a href=\"#!/api/Titanium.UI-property-LIST_ACCESSORY_TYPE_NONE\" rel=\"Titanium.UI-property-LIST_ACCESSORY_TYPE_NONE\" class=\"docClass\">Titanium.UI.LIST_ACCESSORY_TYPE_NONE</a>\n <li> <a href=\"#!/api/Titanium.UI-property-LIST_ACCESSORY_TYPE_CHECKMARK\" rel=\"Titanium.UI-property-LIST_ACCESSORY_TYPE_CHECKMARK\" class=\"docClass\">Titanium.UI.LIST_ACCESSORY_TYPE_CHECKMARK</a>\n <li> <a href=\"#!/api/Titanium.UI-property-LIST_ACCESSORY_TYPE_DETAIL\" rel=\"Titanium.UI-property-LIST_ACCESSORY_TYPE_DETAIL\" class=\"docClass\">Titanium.UI.LIST_ACCESSORY_TYPE_DETAIL</a>\n <li> <a href=\"#!/api/Titanium.UI-property-LIST_ACCESSORY_TYPE_DISCLOSURE\" rel=\"Titanium.UI-property-LIST_ACCESSORY_TYPE_DISCLOSURE\" class=\"docClass\">Titanium.UI.LIST_ACCESSORY_TYPE_DISCLOSURE</a>\n</li></li></li></li></ul></p>\n\n<p>Default: <a href=\"#!/api/Titanium.UI-property-LIST_ACCESSORY_TYPE_NONE\" rel=\"Titanium.UI-property-LIST_ACCESSORY_TYPE_NONE\" class=\"docClass\">Titanium.UI.LIST_ACCESSORY_TYPE_NONE</a></p></div></div></div><div id='property-apiName' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-property-apiName' class='name not-expandable'>apiName</a><span> : String</span><strong class='readonly signature' >readonly</strong></div><div class='description'><div class='short'><p>The name of the API that this proxy corresponds to.</p>\n\n</div><div class='long'><p>The name of the API that this proxy corresponds to.</p>\n\n<p><p>The value of this property is the fully qualified name of the API. For example, <a href=\"#!/api/Titanium.UI.Button\" rel=\"Titanium.UI.Button\" class=\"docClass\">Button</a>\nreturns <code>Ti.UI.Button</code>.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li><li class='platform-mobileweb'\n        title='Mobile Web'>3.2.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul></div></div></div><div id='property-backgroundColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-backgroundColor' class='name expandable'>backgroundColor</a><span> : String</span></div><div class='description'><div class='short'>Background color of the view, as a color name or hex triplet. ...</div><div class='long'><p>Background color of the view, as a color name or hex triplet.</p>\n\n<p><p>For information about color values, see the \"Colors\" section of <a href=\"#!/api/Titanium.UI\" rel=\"Titanium.UI\" class=\"docClass\">Titanium.UI</a>.</p>\n\n</p><p>Default: Transparent</p></div></div></div><div id='property-backgroundGradient' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-backgroundGradient' class='name not-expandable'>backgroundGradient</a><span> : <a href=\"#!/api/Gradient\" rel=\"Gradient\" class=\"docClass\">Gradient</a></span></div><div class='description'><div class='short'><p>Background gradient to render when the item is not selected.</p>\n\n</div><div class='long'><p>Background gradient to render when the item is not selected.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-backgroundImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-backgroundImage' class='name not-expandable'>backgroundImage</a><span> : String</span></div><div class='description'><div class='short'><p>Background image to render when the item is not selected.</p>\n\n</div><div class='long'><p>Background image to render when the item is not selected.</p>\n\n<p><p>Must be a local resource.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-canEdit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-canEdit' class='name expandable'>canEdit</a><span> : Boolean</span></div><div class='description'><div class='short'>Specifies if the item can be deleted by a user initiated action. ...</div><div class='long'><p>Specifies if the item can be deleted by a user initiated action.</p>\n\n<p><p>For more information see the \"Editing Support\" section of <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</p><p>Default: false</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-canInsert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-canInsert' class='name expandable'>canInsert</a><span> : Boolean</span></div><div class='description'><div class='short'>Specifies if the item can be inserted by a user initiated action. ...</div><div class='long'><p>Specifies if the item can be inserted by a user initiated action.</p>\n\n<p><p>For more information see the \"Editing Support\" section of <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</p><p>Default: false</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>5.2.0</li><li class='platform-ipad'\n        title='iPad'>5.2.0</li></ul></div></div></div><div id='property-canMove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-canMove' class='name expandable'>canMove</a><span> : Boolean</span></div><div class='description'><div class='short'>Specifies if the item can be reordered within the list view by a user initiated action. ...</div><div class='long'><p>Specifies if the item can be reordered within the list view by a user initiated action.</p>\n\n<p><p>For more information see the \"Editing Support\" section of <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</p><p>Default: false</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-color' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-color' class='name not-expandable'>color</a><span> : String</span></div><div class='description'><div class='short'><p>Default text color of the item when not selected, as a color name or hex triplet.</p>\n\n</div><div class='long'><p>Default text color of the item when not selected, as a color name or hex triplet.</p>\n\n<p><p>For information about color values, see the \"Colors\" section of <a href=\"#!/api/Titanium.UI\" rel=\"Titanium.UI\" class=\"docClass\">Titanium.UI</a>.</p>\n\n\n\n\n<p>On Android, <code>selectedColor</code> is not supported, so the text is always displayed in this color.</p>\n\n\n\n\n<p>Only applies to the built-in templates.</p>\n\n</p></div></div></div><div id='property-editActions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-editActions' class='name expandable'>editActions</a><span> : <a href=\"#!/api/RowActionType\" rel=\"RowActionType\" class=\"docClass\">RowActionType</a>[]</span></div><div class='description'><div class='short'>Specifies custom action items to be shown when when a list item is edited. ...</div><div class='long'><p>Specifies custom action items to be shown when when a list item is edited.</p>\n\n\n\n\n<p> <b>Requires:</b> \niOS 8.0 and later \n</p>\n\n<p><p>For more information see the \"Editing Support\" section of <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">Titanium.UI.ListView</a>.</p>\n\n</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>4.1.0</li><li class='platform-ipad'\n        title='iPad'>4.1.0</li></ul></div></div></div><div id='property-font' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-font' class='name expandable'>font</a><span> : <a href=\"#!/api/Font\" rel=\"Font\" class=\"docClass\">Font</a></span></div><div class='description'><div class='short'>Font to use for the item title. ...</div><div class='long'><p>Font to use for the item title.</p>\n\n<p><p>Only applies to the built-in templates.</p>\n\n</p><p>Default: System default font.</p></div></div></div><div id='property-height' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-height' class='name not-expandable'>height</a><span> : Number/String</span></div><div class='description'><div class='short'><p>Row height in platform-specific units.</p>\n\n</div><div class='long'><p>Row height in platform-specific units.</p>\n\n<p><p>On Android, the value can be either a float value or a dimension string, for example, '40dp'.\nBy default, the minimum height is 30 dp on the Android platform.</p>\n\n\n\n\n<p>On iOS, the value can only be an absolute value.</p>\n\n</p></div></div></div><div id='property-image' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-image' class='name not-expandable'>image</a><span> : String</span></div><div class='description'><div class='short'><p>Image to render in the image area of the item, specified as a local path or URL.</p>\n\n</div><div class='long'><p>Image to render in the image area of the item, specified as a local path or URL.</p>\n\n<p><p>On iOS, the image is on the left, and on Android, the image is on the right.</p>\n\n\n\n\n<p>On Android, this image only appears on the default template.</p>\n\n\n\n\n<p>On iOS, only local images are supported.</p>\n\n\n\n\n<p>On iOS, this image only appears if the ListDataItem <code>template</code> property or ListView\n<code>defaultItemTemplate</code> property is either: <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_DEFAULT\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_DEFAULT\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT</a>,\n<a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS</a> or <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE</a>.</p>\n\n</p></div></div></div><div id='property-itemId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-itemId' class='name not-expandable'>itemId</a><span> : String</span></div><div class='description'><div class='short'><p>A user defined string that gets passed to events.</p>\n\n</div><div class='long'><p>A user defined string that gets passed to events.</p>\n\n</div></div></div><div id='property-lifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-property-lifecycleContainer' class='name not-expandable'>lifecycleContainer</a><span> : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></span></div><div class='description'><div class='short'><p>The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.</p>\n\n</div><div class='long'><p>The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.</p>\n\n<p><p>If this property is set to a Window or TabGroup, then the corresponding Activity lifecycle event callbacks\nwill also be called on the proxy. Proxies that require the activity lifecycle will need this property set\nto the appropriate containing Window or TabGroup.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul></div></div></div><div id='property-searchableText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-searchableText' class='name not-expandable'>searchableText</a><span> : String</span></div><div class='description'><div class='short'><p>The text to match against when the <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">ListView</a> is performing a search.</p>\n\n</div><div class='long'><p>The text to match against when the <a href=\"#!/api/Titanium.UI.ListView\" rel=\"Titanium.UI.ListView\" class=\"docClass\">ListView</a> is performing a search.</p>\n\n<p><p>Used in conjunction with <a href=\"#!/api/Titanium.UI.ListView-property-searchView\" rel=\"Titanium.UI.ListView-property-searchView\" class=\"docClass\">searchView</a>, <a href=\"#!/api/Titanium.UI.ListView-property-searchText\" rel=\"Titanium.UI.ListView-property-searchText\" class=\"docClass\">searchText</a> and <a href=\"#!/api/Titanium.UI.ListView-property-caseInsensitiveSearch\" rel=\"Titanium.UI.ListView-property-caseInsensitiveSearch\" class=\"docClass\">caseInsensitiveSearch</a> properties of ListView.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-selectedBackgroundColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-selectedBackgroundColor' class='name expandable'>selectedBackgroundColor</a><span> : String</span></div><div class='description'><div class='short'>Background color of the view, as a color name or hex triplet when item is selected. ...</div><div class='long'><p>Background color of the view, as a color name or hex triplet when item is selected.</p>\n\n<p><p>On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.\nFor information about color values, see the \"Colors\" section of <a href=\"#!/api/Titanium.UI\" rel=\"Titanium.UI\" class=\"docClass\">Titanium.UI</a>.</p>\n\n</p><p>Default: Transparent</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-selectedBackgroundGradient' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-selectedBackgroundGradient' class='name not-expandable'>selectedBackgroundGradient</a><span> : <a href=\"#!/api/Gradient\" rel=\"Gradient\" class=\"docClass\">Gradient</a></span></div><div class='description'><div class='short'><p>Background gradient to render when the item is selected.</p>\n\n</div><div class='long'><p>Background gradient to render when the item is selected.</p>\n\n<ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-selectedBackgroundImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-selectedBackgroundImage' class='name not-expandable'>selectedBackgroundImage</a><span> : String</span></div><div class='description'><div class='short'><p>Background image to render when the item is selected.</p>\n\n</div><div class='long'><p>Background image to render when the item is selected.</p>\n\n<p><p>Must be a local resource.\nOn Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.</p>\n\n</p><ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li></ul></div></div></div><div id='property-selectionStyle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-selectionStyle' class='name not-expandable'>selectionStyle</a><span> : Number</span></div><div class='description'><div class='short'><p>Selection style constant to control the selection color.</p>\n\n</div><div class='long'><p>Selection style constant to control the selection color.</p>\n\n<p><p>Specify one of the constants from <a href=\"#!/api/Titanium.UI.iPhone.ListViewCellSelectionStyle\" rel=\"Titanium.UI.iPhone.ListViewCellSelectionStyle\" class=\"docClass\">Titanium.UI.iPhone.ListViewCellSelectionStyle</a>.</p>\n\n</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>3.1.0</li><li class='platform-ipad'\n        title='iPad'>3.1.0</li></ul></div></div></div><div id='property-subtitle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-subtitle' class='name not-expandable'>subtitle</a><span> : String</span></div><div class='description'><div class='short'><p>Subtitle to set in the text area of the item.</p>\n\n</div><div class='long'><p>Subtitle to set in the text area of the item.</p>\n\n<p><p>This subtitle only appears if the ListDataItem <code>template</code> property or ListView\n<code>defaultItemTemplate</code> property is set to either: <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_CONTACTS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS</a>,\n<a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SETTINGS\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS</a> or <a href=\"#!/api/Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" rel=\"Titanium.UI-property-LIST_ITEM_TEMPLATE_SUBTITLE\" class=\"docClass\">Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE</a>.</p>\n\n</p><ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>3.1.0</li><li class='platform-ipad'\n        title='iPad'>3.1.0</li></ul></div></div></div><div id='property-title' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-property-title' class='name not-expandable'>title</a><span> : String</span></div><div class='description'><div class='short'><p>Title to set in the text area of the item.</p>\n\n</div><div class='long'><p>Title to set in the text area of the item.</p>\n\n<p><p>This title only appears for the built-in templates.</p>\n\n</p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getApiName' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-getApiName' class='name expandable'>getApiName</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'>Gets the value of the apiName property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.Proxy-property-apiName\" rel=\"Titanium.Proxy-property-apiName\" class=\"docClass\">apiName</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.2.0</li><li class='platform-iphone'\n        title='iPhone'>3.2.0</li><li class='platform-ipad'\n        title='iPad'>3.2.0</li><li class='platform-mobileweb'\n        title='Mobile Web'>3.2.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getEditActions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-method-getEditActions' class='name expandable'>getEditActions</a>( <span class='pre'></span> ) : <a href=\"#!/api/RowActionType\" rel=\"RowActionType\" class=\"docClass\">RowActionType</a>[]</div><div class='description'><div class='short'>Gets the value of the editActions property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.UI.ListItem-property-editActions\" rel=\"Titanium.UI.ListItem-property-editActions\" class=\"docClass\">editActions</a> property.</p>\n\n<ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>4.1.0</li><li class='platform-ipad'\n        title='iPad'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/RowActionType\" rel=\"RowActionType\" class=\"docClass\">RowActionType</a>[]</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getLifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-getLifecycleContainer' class='name expandable'>getLifecycleContainer</a>( <span class='pre'></span> ) : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></div><div class='description'><div class='short'>Gets the value of the lifecycleContainer property. ...</div><div class='long'><p>Gets the value of the <a href=\"#!/api/Titanium.Proxy-property-lifecycleContainer\" rel=\"Titanium.Proxy-property-lifecycleContainer\" class=\"docClass\">lifecycleContainer</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-setEditActions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Titanium.UI.ListItem'>Titanium.UI.ListItem</span></div><a href='#!/api/Titanium.UI.ListItem-method-setEditActions' class='name expandable'>setEditActions</a>( <span class='pre'>editActions</span> )</div><div class='description'><div class='short'>Sets the value of the editActions property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.UI.ListItem-property-editActions\" rel=\"Titanium.UI.ListItem-property-editActions\" class=\"docClass\">editActions</a> property.</p>\n\n<ul class='platforms'><li class='platform-iphone'\n        title='iPhone'>4.1.0</li><li class='platform-ipad'\n        title='iPad'>4.1.0</li></ul><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>editActions</span> : Array&lt;<a href=\"#!/api/RowActionType\" rel=\"RowActionType\" class=\"docClass\">RowActionType</a>&gt;<div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div><div id='method-setLifecycleContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Titanium.Proxy' rel='Titanium.Proxy' class='defined-in docClass'>Titanium.Proxy</a></div><a href='#!/api/Titanium.Proxy-method-setLifecycleContainer' class='name expandable'>setLifecycleContainer</a>( <span class='pre'>lifecycleContainer</span> )</div><div class='description'><div class='short'>Sets the value of the lifecycleContainer property. ...</div><div class='long'><p>Sets the value of the <a href=\"#!/api/Titanium.Proxy-property-lifecycleContainer\" rel=\"Titanium.Proxy-property-lifecycleContainer\" class=\"docClass\">lifecycleContainer</a> property.</p>\n\n<ul class='platforms'><li class='platform-android'\n        title='Android'>3.6.0</li><li class='platform-windowsphone'\n        title='Window Phone'>4.1.0</li></ul><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lifecycleContainer</span> : <a href=\"#!/api/Titanium.UI.Window\" rel=\"Titanium.UI.Window\" class=\"docClass\">Titanium.UI.Window</a>/<a href=\"#!/api/Titanium.UI.TabGroup\" rel=\"Titanium.UI.TabGroup\" class=\"docClass\">Titanium.UI.TabGroup</a><div class='sub-desc'><p>New value for the property.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span></li></ul></div></div></div></div></div></div></div>"});